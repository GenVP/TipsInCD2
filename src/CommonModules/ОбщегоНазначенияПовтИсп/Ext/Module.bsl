
// Получает дерево свойств объекта с учетом ссылочной вложенности.
// Вложенность свойств зачитывается до второго уровня, например "Объект.Родитель.Код".
//
// Параметры:
//  Объект - СправочникСсылка.Объекты – объект, для которого необходимо получить дерево свойств
//  ОтображатьТабличныеЧасти – Булево. Истина – в дерево свойств будут выводиться данные табличных частей.
//                                     Ложь – данные табличных частей выводиться не будут.
// 
//  Возвращаемое значение:
//  Тип: ДеревоЗначений. Дерево свойств объекта с учетом ссылочной вложенности.
//
Функция ПолноеДеревоСвойствОбъекта(Объект, Знач ОтображатьТабличныеЧасти) Экспорт
	
	Возврат ПолучитьПолноеДеревоСвойствОбъекта(Объект, 0, ОтображатьТабличныеЧасти);
	
КонецФункции

// Вставляет в дерево значений ДеревоПриемник дерево ДеревоИсточник с учетом рекурсивной вложенности веток.
// В результате ДеревоПриемник будет содержать все значения и иерархию из ДеревоИсточник.
//
// Параметры:
//  ДеревоИсточник – Дерево значений, которое необходимо вставить;
//  ДеревоПриемник – Дерево значений, которое будет дополнено и которое служит как результат работы процедуры.
// 
Процедура ВставитьДеревоЗначений(ДеревоИсточник, ДеревоПриемник) Экспорт
	
	ДеревоПриемник.Строки.Очистить();
	
	Для Каждого СтрокаДереваИсточника ИЗ ДеревоИсточник.Строки Цикл
		
		НоваяСтрокаДереваПриемника = ДеревоПриемник.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваПриемника, СтрокаДереваИсточника);
		
		Если СтрокаДереваИсточника.Строки.Количество() <> 0 Тогда
			
			ВставитьДеревоЗначений(СтрокаДереваИсточника, НоваяСтрокаДереваПриемника);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//

Функция ПолучитьПолноеДеревоСвойствОбъекта(Объект, Знач ГлубинаВложенности, ОтображатьТабличныеЧасти)
	
	Дерево = ПолучитьДеревоСвойствОбъекта(Объект, ОтображатьТабличныеЧасти);
	
	ДополнитьДеревоСвойствВложеннымиДанными(Дерево, ГлубинаВложенности, ОтображатьТабличныеЧасти);
	
	Возврат Дерево;
	
КонецФункции

Функция ПолучитьДеревоСвойствОбъекта(Объект, ОтображатьТабличныеЧасти)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА СправочникСвойства.ЭтоГруппа
	|	ТОГДА ""["" + СправочникСвойства.Наименование + ""]""
	|	ИНАЧЕ СправочникСвойства.Наименование
	|	КОНЕЦ                                   КАК НаименованиеСвойства,
	|	
	|	СправочникСвойстваТипы.Тип              КАК Объект,
	|	СправочникСвойстваТипы.Тип.Наименование КАК НаименованиеТипа,
	|	СправочникСвойства.Вид                  КАК Вид,
	|	
	|	ВЫБОР КОГДА СправочникСвойства.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.ТабличнаяЧасть)
	|	ТОГДА Истина 
	|	ИНАЧЕ Ложь
	|	КОНЕЦ                                   КАК ЭтоТабличнаяЧасть,
	|	
	|	ВЫБОР КОГДА (СправочникСвойства.Наименование <> ""Ссылка"")
	|		И (
	|		    СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Справочник)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Документ)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.БизнесПроцесс)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Задача)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланВидовРасчета)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланВидовХарактеристик)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланОбмена)
	|		ИЛИ СправочникСвойстваТипы.Тип.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланСчетов)
	|		)
	|	ТОГДА Истина
	|	ИНАЧЕ Ложь
	|	КОНЕЦ                                    КАК ЭтоСсылочныйТип
	|	
	|ИЗ
	|	Справочник.Свойства КАК СправочникСвойства
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Свойства.Типы КАК СправочникСвойстваТипы
	|	ПО СправочникСвойства.Ссылка = СправочникСвойстваТипы.Ссылка
	|ГДЕ
	|	  СправочникСвойства.Владелец = &Владелец
	|	И СправочникСвойства.Вид <> ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.СоставПланаОбмена)
	|	И СправочникСвойства.Вид <> ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.ЭлементСоставаПланаОбмена)
	|	И НЕ СправочникСвойства.ПометкаУдаления
	|";
	
	Если Не ОтображатьТабличныеЧасти Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|И    СправочникСвойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
		|И НЕ СправочникСвойства.ЭтоГруппа";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|СправочникСвойства.ЭтоГруппа ИЕРАРХИЯ УБЫВ,
	|СправочникСвойства.Наименование
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", Объект);
	
	ДеревоРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// добавляем предопределенное свойство "Ссылка" при необходимости
	Если глЭтоСсылочныйТип(Объект.Тип)
		И ДеревоРезультат.Строки.Найти("Ссылка", "НаименованиеСвойства", Ложь) = Неопределено Тогда
		
		НоваяСтрока = ДеревоРезультат.Строки.Добавить();
		
		НоваяСтрока.НаименованиеСвойства = "Ссылка";
		НоваяСтрока.Объект               = Объект;
		НоваяСтрока.НаименованиеТипа     = Объект.Наименование;
		НоваяСтрока.Вид                  = Перечисления.ВидыСвойств.Свойство;
		НоваяСтрока.ЭтоТабличнаяЧасть    = Ложь;
		НоваяСтрока.ЭтоСсылочныйТип      = Ложь;
		
	КонецЕсли;
	
	Возврат ДеревоРезультат;
	
КонецФункции

Процедура ДополнитьДеревоСвойствВложеннымиДанными(Дерево, ГлубинаВложенности, ОтображатьТабличныеЧасти)
	
	Для Каждого СтрокаДерева ИЗ Дерево.Строки Цикл
		
		Если СтрокаДерева.ЭтоТабличнаяЧасть Тогда
			
			ДополнитьДеревоСвойствВложеннымиДанными(СтрокаДерева, ГлубинаВложенности, ОтображатьТабличныеЧасти);
			
		ИначеЕсли СтрокаДерева.ЭтоСсылочныйТип Тогда
			
			Если ГлубинаВложенности < 1 Тогда
				
				НовоеДерево = ПолучитьПолноеДеревоСвойствОбъекта(СтрокаДерева.Объект, ГлубинаВложенности + 1, ОтображатьТабличныеЧасти);
				
				ВставитьДеревоЗначений(НовоеДерево, СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
