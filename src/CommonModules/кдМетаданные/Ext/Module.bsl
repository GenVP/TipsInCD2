
Функция ПолучитьКаталогМетаданных(Конфигурация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	кд_НастройкиКонфиграции.КаталогИсходныхФайлов
	|ИЗ
	|	РегистрСведений.кд_НастройкиКонфиграции КАК кд_НастройкиКонфиграции
	|ГДЕ
	|	кд_НастройкиКонфиграции.Конфигурация = &Конфигурация";
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КаталогИсходныхФайлов;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Пропускает все вложенные узлы до конца указанного узла или только один узел, если имя узла не указано
Процедура ПропуститьУзелXML(ЧтениеXML, Знач ИмяУзла = Неопределено)
	Пока Истина Цикл
		ЧтениеXML.Пропустить(); // После выполнения - позиция на конец элемента
		Если ИмяУзла = Неопределено ИЛИ ЭтоКонецУзлаXML(ЧтениеXML, ИмяУзла) Тогда
			ЧтениеXML.Прочитать();
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяет, что сейчас начыинается указанный узел
Функция ЭтоУзелXML(ЧтениеXML, ИмяУзла)
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = ИмяУзла;
КонецФункции

// Проверяет, что сейчас заканчивается указанный узел
Функция ЭтоКонецУзлаXML(ЧтениеXML, ИмяУзла)
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяУзла;
КонецФункции

// Считывает соответствие имен узлов их обрабатываемым значениям
Функция ПрочитатьОписаниеСоответствия(ЧтениеXML, ИмяЭлемента)
	
	СоответствиеСвойств = Новый Соответствие;
	
	Пока НЕ ЭтоКонецУзлаXML(ЧтениеXML, ИмяЭлемента) Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяСвойства = ЧтениеXML.Имя;
			ЗначениеСвойства = ПрочитатьЗначениеXML(ЧтениеXML);
			Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				СоответствиеСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат СоответствиеСвойств;
	
КонецФункции

Функция ПрочитатьОписаниеТипа(ЧтениеXML, ИмяЭлемента)
	
	ПростыеТипы = Новый Соответствие;
	ПростыеТипы.Вставить("xs:string", "Строка");
	ПростыеТипы.Вставить("xs:decimal", "Число");
	ПростыеТипы.Вставить("xs:boolean", "Булево");
	ПростыеТипы.Вставить("xs:dateTime", "Дата");
	
	// Чтение описания типов
	Типы = Новый Массив;
	//КвалификаторыЧисла = Новый Соответствие;
	//КвалификаторыСтроки = Новый Соответствие;
	//КвалификаторыДаты  = Новый Соответствие;
	
	Пока НЕ ЭтоКонецУзлаXML(ЧтениеXML, ИмяЭлемента) Цикл
		
		Если ЭтоУзелXML(ЧтениеXML, "v8:Type") ИЛИ ЭтоУзелXML(ЧтениеXML, "v8:TypeSet") Тогда
			ТипXML = ПрочитатьЗначениеXML(ЧтениеXML);
			ПростойТип = ПростыеТипы[ТипXML];
			Если ПростойТип = Неопределено Тогда
				Типы.Добавить(ТипXML);
			Иначе
				Типы.Добавить(ПростойТип);
			КонецЕсли;
		
		//ИначеЕсли ЭтоУзелXML(ЧтениеXML, "v8:NumberQualifiers") Тогда
		//	ЧтениеXML.Прочитать();
		//	КвалификаторыЧисла = ПрочитатьОписаниеСоответствия(ЧтениеXML, "v8:NumberQualifiers");
		//	
		//ИначеЕсли ЭтоУзелXML(ЧтениеXML, "v8:StringQualifiers") Тогда
		//	ЧтениеXML.Прочитать();
		//	КвалификаторыСтроки = ПрочитатьОписаниеСоответствия(ЧтениеXML, "v8:StringQualifiers");
		//
		//ИначеЕсли ЭтоУзелXML(ЧтениеXML, "v8:DateQualifiers") Тогда
		//	ЧтениеXML.Прочитать();
		//	КвалификаторыДаты = ПрочитатьОписаниеСоответствия(ЧтениеXML, "v8:DateQualifiers");
		
		Иначе
			ПропуститьУзелXML(ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	// Генерация строкового представления типа
	//
	//ИндексТипаЧисло = Типы.Найти("xs:decimal");
	//Если ИндексТипаЧисло <> Неопределено Тогда
	//	ПредставлениеТипа = "" + Типы[ИндексТипаЧисло] + "(" + КвалификаторыЧисла["v8:Digits"] + "," + КвалификаторыЧисла["v8:FractionDigits"] + "," + КвалификаторыЧисла["v8:AllowedSign"] + ")";
	//	Типы[ИндексТипаЧисло] = ПредставлениеТипа;
	//КонецЕсли;
	//
	//ИндексТипаСтрока = Типы.Найти("xs:string");
	//Если ИндексТипаСтрока <> Неопределено Тогда
	//	ПредставлениеТипа = "" + Типы[ИндексТипаСтрока] + "(" + КвалификаторыСтроки["v8:Length"] + "," + КвалификаторыСтроки["v8:AllowedLength"] + ")";
	//	Типы[ИндексТипаСтрока] = ПредставлениеТипа;
	//КонецЕсли;
	//
	//ИндексТипаДата = Типы.Найти("xs:date");
	//Если ИндексТипаДата <> Неопределено Тогда
	//	ПредставлениеТипа = "" + Типы[ИндексТипаДата] + "(" + КвалификаторыДаты["v8:DateFractions"] + ")";
	//	Типы[ИндексТипаДата] = ПредставлениеТипа;
	//КонецЕсли;
	
	ОписаниеТипа = "";
	Для Каждого Тип Из Типы Цикл
		ОписаниеТипа = "," + Тип;
	КонецЦикла;
	Возврат Сред(ОписаниеТипа, 2);
	
КонецФункции

Функция ПрочитатьЗначениеXML(ЧтениеXML)
	
	ИмяЭлемента = ЧтениеXML.Имя;
	ЧтениеXML.Прочитать();
	Если ЭтоКонецУзлаXML(ЧтениеXML, ИмяЭлемента) Тогда
		Значение = ""; // Пустой узел
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 
		Значение = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
	ИначеЕсли ЭтоУзелXML(ЧтениеXML, "v8:Type") ИЛИ ЭтоУзелXML(ЧтениеXML, "v8:TypeSet") Тогда
		Значение = ПрочитатьОписаниеТипа(ЧтениеXML, ИмяЭлемента);
	Иначе
		Сообщить("Найдено неизвестное описание значения " + ЧтениеXML.Имя);
		ЕстьОшибки = Истина;
		Пока ЭтоУзелXML(ЧтениеXML, ИмяЭлемента) Цикл
			ПропуститьУзелXML(ЧтениеXML);
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция ПрочитатьPropertiesXML(ЧтениеXML, СписокПолей)
	
	ОписаниеЭлемента = Новый Структура(СписокПолей);
	
	ЧтениеXML.Прочитать();
	
	Пока НЕ ЭтоКонецУзлаXML(ЧтениеXML, "Properties") Цикл
		Если Найти(СписокПолей, ЧтениеXML.Имя) = 0 Тогда
			ПропуститьУзелXML(ЧтениеXML, ЧтениеXML.Имя);
		Иначе
			ИмяЗначения = ЧтениеXML.Имя;
			Значение = ПрочитатьЗначениеXML(ЧтениеXML);
			ОписаниеЭлемента.Вставить(ИмяЗначения, Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

Процедура ЗаполнитьФайлМетаданных(КаталогМетаданных, ИмяФайла, ПолноеИмяОбъекта)
	
	СоответствиеКорневыхТипов = Новый Соответствие;
	СоответствиеКорневыхТипов.Вставить("ExchangePlan"              , "ПланОбмена");
	СоответствиеКорневыхТипов.Вставить("Constant"                  , "Константа");
	СоответствиеКорневыхТипов.Вставить("Catalog"                   , "Справочник");
	СоответствиеКорневыхТипов.Вставить("Document"                  , "Документ");
	//СоответствиеКорневыхТипов.Вставить("Sequence"                  , "Последовательность");
	СоответствиеКорневыхТипов.Вставить("Enum"                      , "Перечисление");
	СоответствиеКорневыхТипов.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СоответствиеКорневыхТипов.Вставить("ChartOfAccounts"           , "ПланСчетов");
	СоответствиеКорневыхТипов.Вставить("ChartOfCalculationTypes"   , "ПланВидовРасчета");
	СоответствиеКорневыхТипов.Вставить("InformationRegister"       , "РегистрСведений");
	СоответствиеКорневыхТипов.Вставить("AccumulationRegister"      , "РегистрНакопления");
	СоответствиеКорневыхТипов.Вставить("AccountingRegister"        , "РегистрБухгалтерии");
	СоответствиеКорневыхТипов.Вставить("CalculationRegister"       , "РегистрРасчета");
	СоответствиеКорневыхТипов.Вставить("BusinessProcess"           , "БизнесПроцесс");
	СоответствиеКорневыхТипов.Вставить("Task"                      , "Задача");
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("КорневойТип"); // Вид объекта - "Справочник", "Реквизит", "ТабличнаяЧасть", "ТабличнаяЧасть.<имя ТЧ>.Реквизит"
	ТаблицаМетаданных.Колонки.Добавить("ПолноеИмяРодителя"); // Метаданные родителя для подчиненных коллекций (реквизитов ТЧ, измерений, ...) - "ТабличнаяЧасть.<имя ТЧ>"
	ТаблицаМетаданных.Колонки.Добавить("ПолноеИмя"); // Полное имя - "Справочник.Валюты", "<имя реквизита>", "ТабличнаяЧасть.<имя ТЧ>", "<имя реквизита ТЧ>"
	ТаблицаМетаданных.Колонки.Добавить("Имя"); // имя - "Валюты", "<имя реквизита>", "<имя ТЧ>", "<имя реквизита ТЧ>"
	ТаблицаМетаданных.Колонки.Добавить("Тип");
	
	ПолноеИмяФайла = КаталогМетаданных + ПолучитьРазделительПути() + ИмяФайла + ".xml";
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.ОбъявлениеXML Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	Если ЭтоУзелXML(ЧтениеXML, "MetaDataObject") Тогда
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		Пока НЕ ЭтоУзелXML(ЧтениеXML, "ChildObjects") Цикл
			ЧтениеXML.Пропустить();
			ЧтениеXML.Прочитать();
		КонецЦикла;
		ЧтениеXML.Прочитать();
		Пока НЕ ЭтоКонецУзлаXML(ЧтениеXML, "ChildObjects") Цикл
			Если ИмяФайла = "Configuration" Тогда
				КорневойТип = СоответствиеКорневыхТипов[ЧтениеXML.Имя];
				ИмяОбъекта = ПрочитатьЗначениеXML(ЧтениеXML);
				Если КорневойТип <> Неопределено Тогда
					СтрокаМетаданных = ТаблицаМетаданных.Добавить();
					СтрокаМетаданных.КорневойТип = КорневойТип;
					СтрокаМетаданных.ПолноеИмя = КорневойТип + "." + ИмяОбъекта;
					СтрокаМетаданных.Имя = ИмяОбъекта;
				КонецЕсли;
			Иначе
				//ПрочитатьКоллекциюXML(ЧтениеXML, "Attribute", "Реквизиты");
				Если ЭтоУзелXML(ЧтениеXML, "Attribute") Тогда
					ЧтениеXML.Прочитать();
					ОписаниеЭлемента = ПрочитатьPropertiesXML(ЧтениеXML, "Name,Type");
					СтрокаМетаданных = ТаблицаМетаданных.Добавить();
					СтрокаМетаданных.КорневойТип = "Реквизит";
					СтрокаМетаданных.ПолноеИмя = ОписаниеЭлемента.Name;
					СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
					СтрокаМетаданных.Тип = ОписаниеЭлемента.Type;
					
				ИначеЕсли ЭтоУзелXML(ЧтениеXML, "TabularSection") Тогда
					ЧтениеXML.Прочитать();
					ПолноеИмяТЧ = "";
					Пока НЕ ЭтоКонецУзлаXML(ЧтениеXML, "TabularSection") Цикл
						Если ЭтоУзелXML(ЧтениеXML, "Properties") Тогда
							ОписаниеЭлемента = ПрочитатьPropertiesXML(ЧтениеXML, "Name");
							ПолноеИмяТЧ = "ТабличнаяЧасть." + ОписаниеЭлемента.Name;
							СтрокаМетаданных = ТаблицаМетаданных.Добавить();
							СтрокаМетаданных.КорневойТип = "ТабличнаяЧасть";
							СтрокаМетаданных.ПолноеИмяРодителя = ПолноеИмяОбъекта;
							СтрокаМетаданных.ПолноеИмя = ПолноеИмяТЧ;
							СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
						ИначеЕсли ЭтоУзелXML(ЧтениеXML, "ChildObjects") Тогда
							ЧтениеXML.Прочитать();
							Пока НЕ ЭтоКонецУзлаXML(ЧтениеXML, "ChildObjects") Цикл
								Если ЭтоУзелXML(ЧтениеXML, "Attribute") Тогда
									ЧтениеXML.Прочитать();
									ОписаниеЭлемента = ПрочитатьPropertiesXML(ЧтениеXML, "Name,Type");
									СтрокаМетаданных = ТаблицаМетаданных.Добавить();
									СтрокаМетаданных.КорневойТип = ПолноеИмяТЧ + ".Реквизит";
									СтрокаМетаданных.ПолноеИмя = ОписаниеЭлемента.Name;
									СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
									СтрокаМетаданных.Тип = ОписаниеЭлемента.Type;
								КонецЕсли;
								ЧтениеXML.Прочитать();
							КонецЦикла;
							ЧтениеXML.Прочитать();
						Иначе
							ЧтениеXML.Пропустить();
							ЧтениеXML.Прочитать();
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЧтениеXML.Пропустить();
				КонецЕсли;
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	КонецЕсли;
	
	ПолноеИмяФайла = КаталогМетаданных + ПолучитьРазделительПути() + ИмяФайла + ".idx";
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ТаблицаМетаданных);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Функция ПолучитьТаблицуМетаданныхИзФайла(ОписаниеМетаданных)
	
	ИмяФайла = ИмяФайлаПоМетаданным(ОписаниеМетаданных["ПолноеИмя"]); // ПовтИсп
	
	КаталогМетаданных = ПолучитьКаталогМетаданных(ОписаниеМетаданных["Конфигурация"]); // ПовтИсп
	
	ПолноеИмяФайла = КаталогМетаданных + ПолучитьРазделительПути() + ИмяФайла + ".idx";
	
	ТестФайл = Новый Файл(ПолноеИмяФайла);
	Если НЕ ТестФайл.Существует() Тогда
		ЗаполнитьФайлМетаданных(КаталогМетаданных, ИмяФайла, ОписаниеМетаданных["ПолноеИмя"]);
	КонецЕсли;
	
	ТаблицаМетаданных = ирОбщий.ЗагрузитьЗначениеИзФайлаЛкс(ПолноеИмяФайла);
	
	Возврат ТаблицаМетаданных;
	
КонецФункции

Функция ПолучитьКоллекциюОбъектов(МетаданныеРодителя, ИмяКоллекции) Экспорт
	
	ТаблицаМетаданных = кд_глПолучитьМетаданныеИзКэша(МетаданныеРодителя);
	Если ТаблицаМетаданных = Неопределено Тогда
		ТаблицаМетаданных = ПолучитьТаблицуМетаданныхИзФайла(МетаданныеРодителя);
		кд_СохранитьМетаданныеВКэше(МетаданныеРодителя, ТаблицаМетаданных);
	КонецЕсли;
	
	НайденныеОбъекты = ТаблицаМетаданных.НайтиСтроки(Новый Структура("КорневойТип", ИмяКоллекции));
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция ИмяФайлаПоМетаданным(ПолноеИмя)
	
	СоответствиеКорневыхТипов = Новый Соответствие;  // ПовтИсп
	СоответствиеКорневыхТипов.Вставить("ПланОбмена", "ExchangePlans");
	СоответствиеКорневыхТипов.Вставить("Константа", "Constants");
	СоответствиеКорневыхТипов.Вставить("Справочник", "Catalogs");
	СоответствиеКорневыхТипов.Вставить("Документ", "Documents");
	//СоответствиеКорневыхТипов.Вставить("Последовательность", "Sequence");
	СоответствиеКорневыхТипов.Вставить("Перечисление", "Enums");
	СоответствиеКорневыхТипов.Вставить("ПланВидовХарактеристик", "ChartsOfCharacteristicTypes");
	СоответствиеКорневыхТипов.Вставить("ПланСчетов", "ChartsOfAccounts");
	СоответствиеКорневыхТипов.Вставить("ПланВидовРасчета", "ChartsOfCalculationTypes");
	СоответствиеКорневыхТипов.Вставить("РегистрСведений", "InformationRegisters");
	СоответствиеКорневыхТипов.Вставить("РегистрНакопления", "AccumulationRegisters");
	СоответствиеКорневыхТипов.Вставить("РегистрБухгалтерии", "AccountingRegisters");
	СоответствиеКорневыхТипов.Вставить("РегистрРасчета", "CalculationRegisters");
	СоответствиеКорневыхТипов.Вставить("БизнесПроцесс", "BusinessProcesses");
	СоответствиеКорневыхТипов.Вставить("Задача", "Tasks");
	
	Если ПолноеИмя = Неопределено Тогда
		ИмяФайла = "Configuration";
	Иначе
		МассивФрагментов = ирОбщий.СтрРазделитьЛкс(ПолноеИмя);
		ИмяФайла = СоответствиеКорневыхТипов[МассивФрагментов[0]] + ПолучитьРазделительПути() + МассивФрагментов[1];
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции
