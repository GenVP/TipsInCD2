
// Параметры: 
//  ТипСтрокой     - Строковое представление типа.
//
// Возвращаемое значение:
//  Описание типов.
//
Функция ОписаниеТипа(ТипСтрокой) Экспорт

	МассивТипов		= Новый Массив;
	МассивТипов.Добавить(Тип(ТипСтрокой));
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // ОписаниеТипа()

Функция НайтиПравилаКОПоКонвертацииИТипуИсточника(Владелец, ОбъектВыборки) Экспорт

	НайденныеПКО  = Новый СписокЗначений;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Владелец",      Владелец);
	Запрос.УстановитьПараметр("ОбъектВыборки", ОбъектВыборки);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаКонвертацииОбъектов.Ссылка КАК ПКО
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|
	|ГДЕ
	|	ПравилаКонвертацииОбъектов.Владелец = &Владелец И
	|	ПравилаКонвертацииОбъектов.Источник = &ОбъектВыборки"
	;

	РезЗапроса = Запрос.Выполнить();

	РезТаблица = РезЗапроса.Выгрузить();

	Для каждого Строка из РезТаблица Цикл
		НайденныеПКО.Добавить(Строка.ПКО);
	КонецЦикла;

	Возврат НайденныеПКО;

КонецФункции

// Отделяет от исходной строки левую часть до разделителя и присваивает это значение исходной строке,
// а правую часть возвращает.
//
// Параметры: 
//  Стр            - Исходная строка.
//  Типы           - Подстрока разделитель.
//  Режим          - 1, разделитель в левой части строки
//                   2, разделитель в правой части строки
//
// Возвращаемое значение:
//  Строка, содержащая правую часть исходной строки после разделителя.
//
Функция глОтделитьРазделителем(Стр, Знач Разделитель = ".", Режим = 0, ЕслиНетРазделителяВернутьИсходнуюСтроку = Ложь) Экспорт

	ПраваяЧасть	= "";
	Разделитель	= Найти(Стр, Разделитель);
	Если Разделитель > 0 Тогда
		
		ПраваяЧасть	= Сред(Стр, Разделитель + ?(Режим = 2, 0, 1));
		Стр			= СокрЛП(Лев(Стр, Разделитель - ?(Режим = 1, 0, 1)));
		
	ИначеЕсли ЕслиНетРазделителяВернутьИсходнуюСтроку = Истина Тогда
		
		ПраваяЧасть = СокрЛП(Стр);
		Стр = "";
		
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции // глОтделитьРазделителем()

// Формирует наименование для правила конвертации свойств.
//
// Параметры: 
//  Правило        - Правило, для которого формируется наименование.
//
// Возвращаемое значение:
//  Строка, содержащая наименование правила.
//
Функция глНаименованиеПКС(Правило) Экспорт
	
	ИмяИсточника = СокрЛП(Правило.Источник);
	ИмяПриемника = СокрЛП(?(ПустаяСтрока(Правило.ИмяПараметраДляПередачи), Правило.Приемник, Правило.ИмяПараметраДляПередачи));
	
	ИмяПравила = "[ИмяИсточника] --> [ИмяПриемника]";
	ИмяПравила = СтрЗаменить(ИмяПравила, "[ИмяИсточника]", ИмяИсточника);
	ИмяПравила = СтрЗаменить(ИмяПравила, "[ИмяПриемника]", ИмяПриемника);
	
	Возврат СокрЛП(ИмяПравила);
	
КонецФункции // глНаименованиеПКС() 

// Формирует наименование для правила конвертации объектов.
//
// Параметры: 
//  Правило        - Правило, для которого формируется наименование.
//
// Возвращаемое значение:
//  Строка, содержащая наименование правила.
//
Функция глНаименованиеПКО(Правило) Экспорт

	Возврат Строка(Правило.Источник.Тип) + ": " + Правило.Источник.Синоним;
	
КонецФункции // глНаименованиеПКО() 

// Формирует наименование для правила регистрации объектов.
//
// Параметры: 
//  Правило        - Правило, для которого формируется наименование.
//
// Возвращаемое значение:
//  Строка, содержащая наименование правила.
//
Функция глНаименованиеПРО(Правило) Экспорт

	Возврат Правило.ОбъектНастройки.Синоним;
	
КонецФункции // глНаименованиеПРО()

// Формирует наименование для конвертации.
//
// Параметры: 
//  Правило        - Правило, для которого формируется наименование.
//
// Возвращаемое значение:
//  Строка, содержащая наименование правила.
//
Функция глНаименованиеКонвертации(Правило) Экспорт

	Возврат СокрЛП(СокрЛП(Правило.Источник) + " --> " + СокрЛП(Правило.Приемник));
	
КонецФункции // глНаименованиеКонвертации()

// Формирует наименование для регистрации.
//
// Параметры: 
//  Правило        - Правило, для которого формируется наименование.
//
// Возвращаемое значение:
//  Строка, содержащая наименование правила.
//
Функция глНаименованиеРегистрации(Правило) Экспорт
	
	НаименованиеКонфигурации = СокрЛП(Строка(Правило.Конфигурация));
	
	НаименованиеПланаОбмена = СокрЛП(Правило.ПланОбмена.Синоним);
	
	Возврат НаименованиеКонфигурации + ?(ПустаяСтрока(НаименованиеКонфигурации), "", ": ") + НаименованиеПланаОбмена;
	
КонецФункции // глНаименованиеРегистрации()

// Формирует наименование для правила конвертации значений.
//
// Параметры: 
//  Правило        - Правило, для которого формируется наименование.
//
// Возвращаемое значение:
//  Строка, содержащая наименование правила.
//
Функция глНаименованиеПКЗ(Правило) Экспорт

	Возврат СокрЛП(СокрЛП(Правило.Источник) + " --> " + СокрЛП(Правило.Приемник));
	
КонецФункции // глНаименованиеПКЗ() 

// Получает имя объекта без типа.
//
// Параметры: 
//  Объект         - Объект, для которого необходимо получить имя.
//
// Возвращаемое значение:
//  Строка, содержащая имя объекта.
//
Функция глИмяОбъекта(Объект) Экспорт

    Возврат СокрЛП(глОтделитьРазделителем(СокрЛП(Объект), , , Истина));
	
КонецФункции // глИмяОбъекта() 

// Получает значение булевой операции для корневой группы
Функция глБулеваОперацияДляКорневойГруппы() Экспорт
	
	Возврат Перечисления.БулевыОперации.И;
	
КонецФункции

Функция СформироватьУникальныйКодДляСправочника(ИмяСправочника, ТекущееЗначениеКода, СсылкаНаЭлемент, Владелец) Экспорт
	
	ТекущееЗначениеКода = Сред(ТекущееЗначениеКода, 1, 45);
	
	Если ПустаяСтрока(ТекущееЗначениеКода) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Максимум(Спр.Код) КАК КОД
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр.Владелец = &Владелец
				   |
				   |	И Спр.Ссылка <> &Ссылка
				   |
				   |	И (Спр.КОД = """ + ТекущееЗначениеКода + """
				   |	)";
				   
	Запрос.УстановитьПараметр("Владелец", Владелец);			   
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлемент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТекущееЗначениеКода;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Не ЗначениеЗаполнено(Выборка.КОД) Тогда
			Возврат ТекущееЗначениеКода;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Максимум(Спр.Код) КАК КОД
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр.Владелец = &Владелец
				   |
				   |	И Спр.Ссылка <> &Ссылка
				   |
				   |	И (Спр.КОД Подобно """ + СокрЛП(ТекущееЗначениеКода) + "[0-9]%"" )";
				   
	Запрос.УстановитьПараметр("Владелец", Владелец);			   
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлемент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТекущееЗначениеКода;
	КонецЕсли;
			
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	МаксимальныйКод = СокрЛП(Выборка.Код);
	
	МаксимальныйКод = СтрЗаменить(Строка(МаксимальныйКод), Символы.НПП, "");
	
	Если ПустаяСтрока(МаксимальныйКод) Тогда
		Возврат СокрЛП(ТекущееЗначениеКода) + "00001";
	КонецЕсли;
	
	//с конца строки ищем цифры
	ИтоговоеЧисло = "";
	ДлинаСтрокиМаксимальногоКода = СтрДлина(МаксимальныйКод);
	ТекущаяПозиция = ДлинаСтрокиМаксимальногоКода;
	ЭтоЦифры = Истина;
	
	Пока ЭтоЦифры 
		И ТекущаяПозиция > 0 Цикл
		
		ТекущийСимвол = Сред(МаксимальныйКод, ТекущаяПозиция, 1);
		ЭтоЦифры = (ТекущийСимвол >= "0") И (ТекущийСимвол <= "9");
		
		Если ЭтоЦифры Тогда
			ИтоговоеЧисло = ИтоговоеЧисло + ТекущийСимвол;
		Иначе
			Прервать;
		КонецЕсли;
		
		ТекущаяПозиция = ТекущаяПозиция - 1;
				
	КонецЦикла;
	
	ПозицияНачалаЦифр = ТекущаяПозиция + 1;
	
	Если ПустаяСтрока(ИтоговоеЧисло) Тогда
		
		Возврат МаксимальныйКод + "00001";
		
	Иначе
		
		ОбщийПрефикс = Сред(МаксимальныйКод, 1, ПозицияНачалаЦифр - 1);
		ДобавочноеЧисло = Число(Сред(МаксимальныйКод, ПозицияНачалаЦифр)) + 1;
	
	КонецЕсли;
	
	Возврат ОбщийПрефикс + Прав("0000" + СтрЗаменить(Строка(ДобавочноеЧисло), Символы.НПП, ""), 5);
	
КонецФункции

// Определяет очередной порядок для правила.
//
// Параметры: 
//  ИдентСправочника - Имя справочника правил.
//  ТекРодитель      - Родитель, в пределах которого необходимо определить порядок.
//  ТекВладелец      - Владелец, в пределах которого необходимо определить порядок.
//
// Возвращаемое значение:
//  Новый порядок.
//
Функция ОчереднойПорядок(ИдентСправочника, ТекРодитель, ТекВладелец) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Максимум(СПР.Порядок) КАК Порядок
	               |ИЗ
	               |	Справочник." + ИдентСправочника + " КАК СПР
	               |ГДЕ
	               |	СПР.Владелец = &Владелец
	               |	И СПР.Родитель = &Родитель";
				   
	Запрос.УстановитьПараметр("Владелец", ТекВладелец);
	Запрос.УстановитьПараметр("Родитель", ТекРодитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И Выборка.Порядок <> NULL Тогда
		
		НовыйПорядок = Выборка.Порядок + 50;
		
	Иначе
		
		НовыйПорядок = 50;
		
	КонецЕсли;
		
	Возврат НовыйПорядок;
	
КонецФункции // ОчереднойПорядок()

// Проверяет, имеет ли указанный объект метаданных ссылку
//
// Параметры:
//  Объект         - элемент справочника Объекты
// 
Функция глЕстьСсылка(Объект, ЭтоПеречисление = Неопределено) Экспорт
    
    ТипОбъекта   = Объект.Тип;
    ТипыОбъектов = Перечисления.ТипыОбъектов;
    
    Если (ТипОбъекта = ТипыОбъектов.Справочник)
     Или (ТипОбъекта = ТипыОбъектов.Документ)
     Или (ТипОбъекта = ТипыОбъектов.Перечисление)
     Или (ТипОбъекта = ТипыОбъектов.ПланСчетов)
     Или (ТипОбъекта = ТипыОбъектов.ПланВидовХарактеристик)
     Или (ТипОбъекта = ТипыОбъектов.ПланВидовРасчета)
	 Или (ТипОбъекта = ТипыОбъектов.ПланОбмена)
	 Или (ТипОбъекта = ТипыОбъектов.Задача)
	 Или (ТипОбъекта = ТипыОбъектов.БизнесПроцесс)
	 Или (ТипОбъекта = ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса)
    Тогда
		ЭтоПеречисление = (ТипОбъекта = ТипыОбъектов.Перечисление);
        Возврат Истина;
	Иначе
		ЭтоПеречисление = Ложь;
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

Функция НайтиОбъектПоИмениИВладельцу(ИмяОбъекта, Владелец) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	Объекты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Объекты КАК Объекты
	               |ГДЕ
	               |	Объекты.Наименование = &Имя
	               |	И Объекты.Владелец = &Владелец";
				   
	Запрос.УстановитьПараметр("Имя", ИмяОбъекта);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Объекты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция СоздатьМножественноеКоличествоПравилоКО(ПравилоКО, Источник, Приемник, РекурсивноСоздаватьПодчиненныеПравила, 
	СписокСозданныхПравилКО = Неопределено, ТаблицаСоотвествийТипов = Неопределено, СоздаватьПКСТолькоДляПолейПоиска = Ложь) Экспорт
	
	Если ТаблицаСоотвествийТипов = Неопределено Тогда
		
		ОпределитьПоИсточникуИПриемникуМожетБытьПКОСозданоНесколькоПКО(ПравилоКО.Владелец, Источник, Приемник, ТаблицаСоотвествийТипов);
		
	КонецЕсли;
	
	ТекущееПравило = Неопределено;
	
	ЗапросПравил = Новый Запрос;
	
	ЗапросПравил.Текст = "ВЫБРАТЬ Первые 1 ПравилаКонвертацииОбъектов.Ссылка КАК ПКО
                      |ИЗ
                      |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
                      |ГДЕ
                      |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
                      |	И ПравилаКонвертацииОбъектов.Источник = &Источник
                      |	И ПравилаКонвертацииОбъектов.Приемник = &Приемник";
					  
	ЗапросПравил.УстановитьПараметр("Владелец", ПравилоКО.Владелец);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоотвествийТипов Цикл
		
		// если ПКо уже есть, то новое создавать не нужно
		// правила уже могли создать до этого момента, нужно еще раз проверить нет ли уже того правила, что мы пытаемся создать
		
		ЗапросПравил.УстановитьПараметр("Источник", СтрокаТаблицы.ТипИсточника);
		ЗапросПравил.УстановитьПараметр("Приемник", СтрокаТаблицы.ТипПриемника);
		
		РезультатЗапроса = ЗапросПравил.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТекущееПравило = Выборка.ПКО;			
			Продолжить;
			
		КонецЕсли;
		
		НовоеПравило = Справочники.ПравилаКонвертацииОбъектов.СоздатьЭлемент();
		НовоеПравило.Владелец       = ПравилоКО.Владелец;
		НовоеПравило.Источник       = СтрокаТаблицы.ТипИсточника;
		НовоеПравило.Приемник       = СтрокаТаблицы.ТипПриемника;
		НовоеПравило.Наименование   = глНаименованиеПКО(НовоеПравило);
		
		НовоеПравило.Записать();
		
		Если СписокСозданныхПравилКО <> Неопределено
			И ЗначениеЗаполнено(НовоеПравило.Ссылка) Тогда

			СписокСозданныхПравилКО.Добавить(НовоеПравило.Ссылка);
									
		КонецЕсли;
		
		Если РекурсивноСоздаватьПодчиненныеПравила Тогда
			
			АвтоматическиСоздатьПКСПКЗПоПравилу(НовоеПравило, РекурсивноСоздаватьПодчиненныеПравила, 
				СписокСозданныхПравилКО, СоздаватьПКСТолькоДляПолейПоиска, СоздаватьПКСТолькоДляПолейПоиска);
			
		КонецЕсли;
		
		ТекущееПравило = НовоеПравило.Ссылка;
				
	КонецЦикла;
	
	Если Источник.Типы.Количество() <> 1 
		ИЛИ Приемник.Типы.Количество() <> 1 Тогда
		
		ТекущееПравило = Неопределено;
		
	КонецЕсли;		

    Возврат ТекущееПравило;

КонецФункции

Процедура АвтоматическиСоздатьПКСПКЗПоПравилу(Объект, РекурсивноСоздаватьПодчиненныеПравила, 
	СписокСозданныхПКО = Неопределено, СоздаватьПКСТолькоДляПолейПоиска = Истина, ДляВложенныхПКОСоздаватьПКСТолькоДляПолейПоиска = Ложь) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Приемник)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Источник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент тогда
	Состояние("Автоматическое создание ПКС");
	#КонецЕсли
		
	// нужно автоматически добавить все значения и свойства для нового объекта
	Обработка = Обработки.АвтонастройкаПравилКонвертацииСвойств.Создать();
	Обработка.СоздаватьПравилаКО = РекурсивноСоздаватьПодчиненныеПравила;
	Обработка.ПравилоКО = Объект.Ссылка;
	Обработка.СоздаватьПКСТолькоДляПолейПоиска = СоздаватьПКСТолькоДляПолейПоиска;
		
	РезультатСинхронизации = Обработка.ВыполнитьСинхронизацию(Ложь);
	Если РезультатСинхронизации Тогда
		
		Обработка.УстановитьПометкиУНайденныхСтрок(Ложь);
		Обработка.СоздаватьПКСТолькоДляПолейПоиска = ДляВложенныхПКОСоздаватьПКСТолькоДляПолейПоиска;
		
		Обработка.СохранитьПравилаКС(Обработка.ТаблицаРезультат.Строки, РекурсивноСоздаватьПодчиненныеПравила, СписокСозданныхПКО);
		
	КонецЕсли;
	
	#Если Клиент тогда
	Состояние("Автоматическое создание ПКЗ");
	#КонецЕсли
	
	Обработка = Обработки.АвтонастройкаПравилКонвертацииЗначений.Создать();
	Обработка.ПравилоКО = Объект.Ссылка;
	РезультатСинхронизации = Обработка.ВыполнитьСинхронизацию();
	Если РезультатСинхронизации Тогда
		
		Обработка.УстановитьПометкиУНайденныхСтрок();
		Обработка.СохранитьПравилаКЗ(Обработка.ТаблицаРезультат.Строки);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПоказатьИнформацияПоВозможнымПравиламДляСоздания(ДанныеРезультатовПоиска, ИмяПрефиксаСоздания, ТаблицаВидовСвойствДляПоиска = Неопределено, 
	Строки, СтрокаПКО, СсылкаНаПКО, СтрокаВложенная = Неопределено)
	
	Для каждого Строка из Строки Цикл
		
		Если ИмяПрефиксаСоздания = "ПКС" Тогда
			
			ПозицияЭлемента = ТаблицаВидовСвойствДляПоиска.Найти(Строка.ВидИсточника, "ВидСвойстваДляПоиска");
			Если ПозицияЭлемента = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Строка.Пометка Тогда

			Если СтрокаПКО = Неопределено Тогда
				
				ПостроитьДеревоДляПКО(ДанныеРезультатовПоиска, СтрокаПКО, СсылкаНаПКО);				
							
			КонецЕсли;
			
			Если СтрокаВложенная = Неопределено Тогда
				
				СтрокаВложенная = СтрокаПКО.Строки.Добавить();
				СтрокаВложенная.Информация  = ИмяПрефиксаСоздания + " ДЛЯ СОЗДАНИЯ";				
								
			КонецЕсли;
			
			ВременнаяСтрока = СтрокаВложенная.Строки.Добавить(); 
			ВременнаяСтрока.Информация = Строка(Строка.Источник) + " -> " + Строка(Строка.Приемник);										
			
		Иначе
			
			ВременнаяСтрока = СтрокаВложенная;		
								
		КонецЕсли;

		ПоказатьИнформацияПоВозможнымПравиламДляСоздания(ДанныеРезультатовПоиска, ИмяПрефиксаСоздания, ТаблицаВидовСвойствДляПоиска, Строка.Строки, 
			СтрокаПКО, СсылкаНаПКО, ВременнаяСтрока);
				
	КонецЦикла;		
		
КонецПроцедуры

Процедура ПоказатьНесопоставленныеСвойстваИЗначения(ДанныеРезультатовПоиска, ИмяПрефиксаСоздания, ТаблицаВидовСвойствДляПоиска = Неопределено, 
	Строки, СтрокаПКО, СсылкаНаПКО, СтрокаВложенная = Неопределено, ИскатьИсточники = Истина, ИмяЭлементаВысокогоУровня = "")
	
	Для каждого Строка из Строки Цикл
		
		Если ИмяПрефиксаСоздания = "Свойства" Тогда
			
			Если ИскатьИсточники Тогда
				ПозицияЭлемента = ТаблицаВидовСвойствДляПоиска.Найти(Строка.ВидИсточника, "ВидСвойстваДляПоиска");
			Иначе
				ПозицияЭлемента = ТаблицаВидовСвойствДляПоиска.Найти(Строка.ВидПриемника, "ВидСвойстваДляПоиска");
			КонецЕсли;
						
			Если ПозицияЭлемента = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
		
		КонецЕсли;
				   					
		Если (ИскатьИсточники
			И Строка.Приемник.Пустая())
			ИЛИ (НЕ ИскатьИсточники
				И Строка.Источник.Пустая()) Тогда
				
			Если СтрокаПКО = Неопределено Тогда
				
				ПостроитьДеревоДляПКО(ДанныеРезультатовПоиска, СтрокаПКО, СсылкаНаПКО);
											
			КонецЕсли;
			
			Если СтрокаВложенная = Неопределено Тогда
				
				СтрокаВложенная = СтрокаПКО.Строки.Добавить();
				
				Если ИскатьИсточники Тогда
					ИмяВложеннойСтроки = "НЕ СОПОСТАВЛЕННЫЕ " + Врег(ИмяПрефиксаСоздания) + " ИСТОЧНИКА";
				Иначе
					ИмяВложеннойСтроки = "НЕ СОПОСТАВЛЕННЫЕ " + Врег(ИмяПрефиксаСоздания) + " ПРИЕМНИКА";
				КонецЕсли;
				
				СтрокаВложенная.Информация  = ИмяВложеннойСтроки;				
								
			КонецЕсли;
			
			Если ИскатьИсточники Тогда
				ИмяПравила = Строка(Строка.Источник);	
			Иначе
				ИмяПравила = Строка(Строка.Приемник);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяЭлементаВысокогоУровня) Тогда
				
				СтрокаВысокогоУровня = СтрокаВложенная.Строки.Добавить();
				СтрокаВысокогоУровня.Информация = ИмяЭлементаВысокогоУровня;
				ИмяЭлементаВысокогоУровня = "";
				
			Иначе
				
				СтрокаВысокогоУровня = СтрокаВложенная;
				
			КонецЕсли;
			
			ВременнаяСтрока = СтрокаВысокогоУровня.Строки.Добавить(); 
			ВременнаяСтрока.Информация = ИмяПравила;			
						
		Иначе
			
			Если ИмяПрефиксаСоздания = "Свойства" Тогда
				ИмяЭлементаВысокогоУровня = Строка(Строка.ПравилоКС);
			Иначе
				ИмяЭлементаВысокогоУровня = Строка(Строка.ПравилоКЗ);
			КонецЕсли;			
						
		КонецЕсли;
		
		ПоказатьНесопоставленныеСвойстваИЗначения(ДанныеРезультатовПоиска, ИмяПрефиксаСоздания, ТаблицаВидовСвойствДляПоиска, Строка.Строки, 
			СтрокаПКО, СсылкаНаПКО, СтрокаВложенная, ИскатьИсточники, ИмяЭлементаВысокогоУровня);
				
	КонецЦикла;	
		
КонецПроцедуры    

Процедура ПостроитьДеревоДляПКО(ДанныеРезультатовПоиска, СтрокаПКО, СсылкаНаПКО)
	
	// добавим строку в дерево, но с учетом иерархии
	Если ЗначениеЗаполнено(СсылкаНаПКО.Родитель) Тогда
		
		ПостроитьДеревоДляПКО(ДанныеРезультатовПоиска, СтрокаПКО, СсылкаНаПКО.Родитель);		
		
	Иначе
		
		СтрокаПКО = ДанныеРезультатовПоиска;		
		
	КонецЕсли;
	
	ВременнаяСтрока = СтрокаПКО.Строки.Найти(СсылкаНаПКО, "Информация");	
	Если ВременнаяСтрока = Неопределено Тогда
		
		ВременнаяСтрока = СтрокаПКО.Строки.Добавить();
		ВременнаяСтрока.Информация = СсылкаНаПКО;	
		
	КонецЕсли;
	
	СтрокаПКО = ВременнаяСтрока;
	
КонецПроцедуры

Процедура ПоказатьИнформациюПКСПКЗПоПравилу(ДанныеРезультатовПоиска, СсылкаНаПравило, ТаблицаВидовСвойствДляПоиска = Неопределено,
	ПоказатьЧтоМожноСоздать, НеСопоставленныеИсточники, НеСопоставленныеПриемники) Экспорт
	
	Если СсылкаНаПравило.Пустая() Тогда
		Возврат;
	КонецЕсли;
			
	#Если Клиент тогда
	Состояние("Поиск ПКС для создания");
	#КонецЕсли
		
	// нужно автоматически добавить все значения и свойства для нового объекта
	Обработка = Обработки.АвтонастройкаПравилКонвертацииСвойств.Создать();
	Обработка.СоздаватьПравилаКО = Ложь;
	Обработка.ПравилоКО = СсылкаНаПравило;
	РезультатСинхронизации = Обработка.ВыполнитьСинхронизацию(Ложь);
	
	ВыданаИнформацияДляПКО = Ложь;
	СтрокаПКО = Неопределено;
	
	
	Если РезультатСинхронизации Тогда
		
		Обработка.УстановитьПометкиУНайденныхСтрок(Ложь);
		
		Если ПоказатьЧтоМожноСоздать Тогда
			
			ПоказатьИнформацияПоВозможнымПравиламДляСоздания(ДанныеРезультатовПоиска, "ПКС", ТаблицаВидовСвойствДляПоиска, 
				Обработка.ТаблицаРезультат.Строки, СтрокаПКО, СсылкаНаПравило);
				
		КонецЕсли;
		
		Если НеСопоставленныеИсточники Тогда
			
			ПоказатьНесопоставленныеСвойстваИЗначения(ДанныеРезультатовПоиска, "Свойства", ТаблицаВидовСвойствДляПоиска, 
				Обработка.ТаблицаРезультат.Строки, СтрокаПКО, СсылкаНаПравило, , Истина);
			
		КонецЕсли;
			
		Если НеСопоставленныеПриемники Тогда
			
			ПоказатьНесопоставленныеСвойстваИЗначения(ДанныеРезультатовПоиска, "Свойства", ТаблицаВидовСвойствДляПоиска, 
				Обработка.ТаблицаРезультат.Строки, СтрокаПКО, СсылкаНаПравило, , Ложь);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	#Если Клиент тогда
	Состояние("Поиск ПКЗ для создания");
	#КонецЕсли
	
	Обработка = Обработки.АвтонастройкаПравилКонвертацииЗначений.Создать();
	Обработка.ПравилоКО = СсылкаНаПравило;
	РезультатСинхронизации = Обработка.ВыполнитьСинхронизацию();
	Если РезультатСинхронизации Тогда
		
		Обработка.УстановитьПометкиУНайденныхСтрок();
		
		Если ПоказатьЧтоМожноСоздать Тогда
			ПоказатьИнформацияПоВозможнымПравиламДляСоздания(ДанныеРезультатовПоиска, "ПКЗ", ТаблицаВидовСвойствДляПоиска, 
				Обработка.ТаблицаРезультат.Строки, СтрокаПКО, СсылкаНаПравило);
		КонецЕсли;
		
		Если НеСопоставленныеИсточники Тогда
			
			ПоказатьНесопоставленныеСвойстваИЗначения(ДанныеРезультатовПоиска, "Значения", ТаблицаВидовСвойствДляПоиска, 
				Обработка.ТаблицаРезультат.Строки, СтрокаПКО, СсылкаНаПравило, , Истина);
			
		КонецЕсли;
			
		Если НеСопоставленныеПриемники Тогда
			
			ПоказатьНесопоставленныеСвойстваИЗначения(ДанныеРезультатовПоиска, "Значения", ТаблицаВидовСвойствДляПоиска, 
				Обработка.ТаблицаРезультат.Строки, СтрокаПКО, СсылкаНаПравило, , Ложь);
			
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры

Процедура РекурсивноеСозданиеПКО(Объект, ЗадаватьВопросПользователю = Истина, 
	СписокСозданныхПКО = Неопределено, ДляПодчиненныхОбъектовСоздаватьПКСТолькоДляПолейПоиска = Истина) Экспорт
	
	// если нет источника, то и создавать автоматически ничего не получится
	Если Объект.ЭтоГруппа 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Источник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗадаватьВопросПользователю Тогда
		
		#Если Клиент Тогда
		// пользователю нужно задать вопрос о рекурсивном автоматическом создании ПКС, ПКЗ
		ОтветПользователя = Вопрос("Создать автоматически правила конвертации свойств, значений и подчиненных объектов?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			
			Возврат;
			
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
	Если СписокСозданныхПКО = Неопределено Тогда
		СписокСозданныхПКО = Новый СписокЗначений;
	КонецЕсли;
	
	АвтоматическиСоздатьПКСПКЗПоПравилу(Объект, Истина, СписокСозданныхПКО, Ложь, ДляПодчиненныхОбъектовСоздаватьПКСТолькоДляПолейПоиска);
	СписокСозданныхПКО.Добавить(Объект.Ссылка);
		
КонецПроцедуры

Процедура СоздатьРекурсивноПравилаПоДереву(Конвертация, Строки, СписокПравил, 
	РежимТолькоИнформирования = Ложь, СоздатьВсеВозможныеПравилаКонвертации = Ложь) Экспорт
	
	ЗапросПоискаПравил = Новый Запрос();
	ЗапросПоискаПравил.Текст = "ВЫБРАТЬ Первые 1
	                           |	ПравилаКонвертацииОбъектов.Ссылка
	                           |ИЗ
	                           |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	                           |ГДЕ
	                           |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
	                           |	И ПравилаКонвертацииОбъектов.Источник = &Источник
	                           |	И ПравилаКонвертацииОбъектов.Приемник = &Приемник";

	Для каждого Строка из Строки Цикл
		
		Если Строка.Родитель <> Неопределено 
			И Строка.Пометка Тогда

			// перед тем как создавать найдем может есть такое правило
			ЗапросПоискаПравил.УстановитьПараметр("Владелец", Конвертация);
			ЗапросПоискаПравил.УстановитьПараметр("Источник", Строка.Источник);
			ЗапросПоискаПравил.УстановитьПараметр("Приемник", Строка.Приемник);
			
			ТаблицаДанных = ЗапросПоискаПравил.Выполнить().Выгрузить();
			
			Если ТаблицаДанных.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если РежимТолькоИнформирования Тогда
				
				Сообщить("Возможно создание ПКО: " + Строка(Строка.Источник) + " -> " + Строка(Строка.Приемник));
				
			Иначе
				
				НовоеПравило = Справочники.ПравилаКонвертацииОбъектов.СоздатьЭлемент();
				
				НовоеПравило.Владелец       = Конвертация;
								
				НовоеПравило.Источник       = Строка.Источник;
				НовоеПравило.Приемник       = Строка.Приемник;
					
				НовоеПравило.Наименование   = глНаименованиеПКО(НовоеПравило);
					
				НовоеПравило.Записать();
					
				РекурсивноеСозданиеНеобходимыхОбъектовДляПКО(НовоеПравило, Ложь, СписокПравил, НЕ СоздатьВсеВозможныеПравилаКонвертации);
				
			КонецЕсли;			
            			            			
		КонецЕсли;

		СоздатьРекурсивноПравилаПоДереву(Конвертация, Строка.Строки, СписокПравил, РежимТолькоИнформирования, СоздатьВсеВозможныеПравилаКонвертации);
		
	КонецЦикла;

КонецПроцедуры // СохранитьПравила()

Процедура РекурсивноеСозданиеНеобходимыхОбъектовДляПКО(Объект, ЗадаватьВопросПользователю = истина, 
	СписокСозданныхПКО = Неопределено, ДляПодчиненныхОбъектовСоздаватьПКСТолькоДляПолейПоиска = Истина) Экспорт
	
	РекурсивноеСозданиеПКО(Объект, ЗадаватьВопросПользователю, СписокСозданныхПКО, ДляПодчиненныхОбъектовСоздаватьПКСТолькоДляПолейПоиска);
			
КонецПроцедуры

Функция АвтоСозданиеВсехВозможныхПравилОбмена(Конвертация, ЗадаватьВопросПользователю, СписокСозданныхПравил = Неопределено,
	РежимТолькоИнформирования = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Конвертация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗадаватьВопросПользователю Тогда
		
		#Если Клиент Тогда
		ОтветПользователя = Вопрос("Создать автоматически все возможные правила обмена?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		Если ОтветПользователя <> КодВозвратаДиалога.Да	Тогда
			
			Возврат Ложь;
				
		КонецЕсли;
		#КонецЕсли
			
	КонецЕсли;
	
	// пробегаем по всем метаданным источника, ищем соотвествие по имени в приемнике
	// если находим проверяем наличие правила
	// если правила нет - создаем и рекурсивно все от него возможное ...
	Обработка = Обработки.АвтонастройкаПравилКонвертацииОбъектов.Создать();
	Обработка.Конвертация = Конвертация;
	ИтоговоеДерево = Обработка.ПолучитьДеревоДляСинхронизации();
	
	Если СписокСозданныхПравил = Неопределено Тогда
		СписокСозданныхПравил = Новый СписокЗначений;
	КонецЕсли;
	
	СоздатьРекурсивноПравилаПоДереву(Конвертация, ИтоговоеДерево.Строки, СписокСозданныхПравил, РежимТолькоИнформирования, Истина);
	
	Возврат Истина;
				
КонецФункции

// Функция убирает из текста сообщения служебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // ()

Функция ТаблицаСортировкиГруппОбъектовМетаданных() Экспорт
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Наименование",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаСортировки.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(2, 0)));
	
	ТаблицаСортировкиНоваяСтрока("Константы",               01, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Справочники",             02, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Документы",               03, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("ЖурналыДокументов",       04, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Перечисления",            05, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Отчеты",                  06, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Обработки",               07, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("ПланыВидовХарактеристик", 08, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("ПланыСчетов",             09, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("ПланыВидовРасчета",       10, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("РегистрыСведений",        11, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("РегистрыНакопления",      12, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("РегистрыБухгалтерии",     13, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("РегистрыРасчета",         14, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("БизнесПроцессы",          15, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Задачи",                  16, ТаблицаСортировки);
	
	// общие
	ТаблицаСортировкиНоваяСтрока("ПланыОбмена",             17, ТаблицаСортировки);
	
	//
	ТаблицаСортировкиНоваяСтрока("Булево",                  99, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Дата",                    99, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("КонстантыНабор",          99, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Строка",                  99, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("ХранилищеЗначения",       99, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("УникальныйИдентификатор", 99, ТаблицаСортировки);
	ТаблицаСортировкиНоваяСтрока("Число",                   99, ТаблицаСортировки);
	
	Возврат ТаблицаСортировки;
КонецФункции

Процедура ТаблицаСортировкиНоваяСтрока(Наименование, ПорядокСортировки, ТаблицаСортировки)
	
	НоваяСтрока = ТаблицаСортировки.Добавить();
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.ПорядокСортировки = ПорядокСортировки;
	
КонецПроцедуры

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "", Статус = Неопределено) Экспорт

	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);

	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	#Иначе
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()

#Если Клиент Тогда
	
Процедура АктивизироватьСтраницуСобытия(ЭтотОбъект, МассивОбработчиков, ПанельАлгоритмов, ЭлементыФормы) Экспорт
	
	Для каждого ИмяОбработчика из МассивОбработчиков Цикл
		
		Если НЕ ПустаяСтрока(ЭлементыФормы[ИмяОбработчика].ПолучитьТекст()) Тогда
			
			ПанельАлгоритмов.ТекущаяСтраница = ПанельАлгоритмов.Страницы[ИмяОбработчика];
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПанельАлгоритмов.ТекущаяСтраница = ПанельАлгоритмов.Страницы[МассивОбработчиков[0]];	
	
КонецПроцедуры

Процедура ОбновитьПиктограммыАлгоритмов(МассивОбработчиков, ПанельАлгоритмов, ЭлементыФормы) Экспорт
	
	Для каждого ИмяОбработчика из МассивОбработчиков Цикл
		
		Если ПустаяСтрока(ЭлементыФормы[ИмяОбработчика].ПолучитьТекст()) Тогда
			
			ПанельАлгоритмов.Страницы[ИмяОбработчика].КартинкаЗаголовка = Новый Картинка;
			
		Иначе
			
			ПанельАлгоритмов.Страницы[ИмяОбработчика].КартинкаЗаголовка = БиблиотекаКартинок.СинтаксическийКонтроль;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПиктограммыАлгоритмов()

#КонецЕсли

// Проверяет имя на корректность.
//
// Параметры: 
//  Имя            - Строка, содержащая имя для проверки.
//
// Возвращаемое значение:
//  Истина - имя корректно, иначе Ложь.
//
Функция глИмяКорректно(Знач Имя) Экспорт

	ИмяПроверки = СокрП(Имя);
	
    СтруктураДляПроверки = Новый Структура;
	Попытка
		СтруктураДляПроверки.Вставить(ИмяПроверки);
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

#Если Клиент Тогда
	
Процедура ОбъектыМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, 
		Знач ИмяКолонкиДляУстановки = "Картинка") Экспорт
	
	Если ДанныеСтроки = Неопределено 
		ИЛИ ДанныеСтроки.ПометкаУдаления = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеДляУстановки = ОформлениеСтроки.Ячейки[ИмяКолонкиДляУстановки];
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		
		Если ДанныеСтроки.Имя = "ПланыОбмена" ИЛИ ДанныеСтроки.Имя = "Планы обмена" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланОбмена);
			
		ИначеЕсли ДанныеСтроки.Имя = "Справочники" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Справочник);
			
		ИначеЕсли ДанныеСтроки.Имя = "Документы" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Документ);
			
		ИначеЕсли ДанныеСтроки.Имя = "Перечисления" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
			
		ИначеЕсли ДанныеСтроки.Имя = "ПланыВидовХарактеристик" ИЛИ ДанныеСтроки.Имя = "Планы видов характеристик" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристик);
			
		ИначеЕсли ДанныеСтроки.Имя = "ПланыСчетов" ИЛИ ДанныеСтроки.Имя = "Планы счетов" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланСчетов);
			
		ИначеЕсли ДанныеСтроки.Имя = "ПланыВидовРасчета" ИЛИ ДанныеСтроки.Имя = "Планы видов расчета"Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчета);
			
		ИначеЕсли ДанныеСтроки.Имя = "РегистрыСведений" ИЛИ ДанныеСтроки.Имя = "Регистры сведений" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
			
		ИначеЕсли ДанныеСтроки.Имя = "РегистрыНакопления" ИЛИ ДанныеСтроки.Имя = "Регистры накопления" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
			
		ИначеЕсли ДанныеСтроки.Имя = "РегистрыБухгалтерии" ИЛИ ДанныеСтроки.Имя = "Регистры бухгалтерии" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
			
		ИначеЕсли ДанныеСтроки.Имя = "РегистрыРасчета" ИЛИ ДанныеСтроки.Имя = "Регистры расчета" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
			
		ИначеЕсли ДанныеСтроки.Имя = "БизнесПроцессы" ИЛИ ДанныеСтроки.Имя = "Бизнес-процессы" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцесс);
			
		ИначеЕсли ДанныеСтроки.Имя = "Задачи" Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Задача);
			
		КонецЕсли;
		
	Иначе
						
		Если ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Справочник Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Документ Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Перечисление Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
									
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристикОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланСчетов Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланСчетовОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчетаОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцессОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.СтартБизнесПроцесса);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Задача Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ЗадачаОбъект);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланОбмена Тогда
			
			ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланОбменаОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбъектыПриВыводеСтроки()

#КонецЕсли

Функция ОпределитьИмяГруппыДляПКО(ИмяТипаПриемника) Экспорт
	
	Если Найти(ИмяТипаПриемника, "ДокументСсылка.") > 0 Тогда
		
		Возврат "Документы";
		
	ИначеЕсли Найти(ИмяТипаПриемника, "СправочникСсылка.") > 0 Тогда
		
		Возврат "Справочники";
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПеречислениеСсылка.") > 0 Тогда
		
		Возврат "Перечисления";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланОбменаСсылка.") > 0 Тогда
		
		Возврат "Планы обмена";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланВидовХарактеристикСсылка.") > 0 Тогда
		
		Возврат "Планы видов характеристик";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланСчетовСсылка.") > 0 Тогда
		
		Возврат "Планы счетов";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланВидовРасчетаСсылка.") > 0 Тогда
		
		Возврат "Планы видов расчета";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрСведенийЗапись.") > 0 Тогда
		
		Возврат "Регистры сведений";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрНакопленияЗапись.") > 0 Тогда
		
		Возврат "Регистры накопления";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрБухгалтерииЗапись.") > 0 Тогда
		
		Возврат "Регистры бухгалтерии";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрРасчетаЗапись.") > 0 Тогда
		
		Возврат "Регистры расчета";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "БизнесПроцессСсылка.") > 0
		ИЛИ Найти(ИмяТипаПриемника, "ТочкаМаршрутаБизнесПроцессаСсылка.") > 0 Тогда
		
		Возврат "Бизнес-процессы";
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ЗадачаСсылка.") > 0 Тогда
		
		Возврат "Задачи";	
		
	КонецЕсли;
	
	Возврат "";
		
КонецФункции

Функция ОпределитьИмяГруппыДляПВД(ИмяТипаПриемника) Экспорт
	
	Если Найти(ИмяТипаПриемника, "ДокументСсылка.") > 0 Тогда
		
		Возврат "Документы";
		
	ИначеЕсли Найти(ИмяТипаПриемника, "СправочникСсылка.") > 0 Тогда
		
		Возврат "Справочники";
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПеречислениеСсылка.") > 0 Тогда
		
		Возврат "Перечисления";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланОбменаСсылка.") > 0 Тогда
		
		Возврат "ПланыОбмена";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланВидовХарактеристикСсылка.") > 0 Тогда
		
		Возврат "ПланыВидовХарактеристик";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланСчетовСсылка.") > 0 Тогда
		
		Возврат "ПланыСчетов";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ПланВидовРасчетаСсылка.") > 0 Тогда
		
		Возврат "ПланыВидовРасчета";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрСведенийЗапись.") > 0 Тогда
		
		Возврат "РегистрыСведений";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрНакопленияЗапись.") > 0 Тогда
		
		Возврат "РегистрыНакопления";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрБухгалтерииЗапись.") > 0 Тогда
		
		Возврат "РегистрыБухгалтерии";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "РегистрРасчетаЗапись.") > 0 Тогда
		
		Возврат "РегистрыРасчета";	
		
	ИначеЕсли Найти(ИмяТипаПриемника, "БизнесПроцессСсылка.") > 0 Тогда
		
		Возврат "БизнесПроцессы";
		
	ИначеЕсли Найти(ИмяТипаПриемника, "ЗадачаСсылка.") > 0 Тогда
		
		Возврат "Задачи";	
		
	КонецЕсли;
	
	Возврат "";
		
КонецФункции

Функция ПолучитьМассивИменОбработчиков(НазваниеОбъекта, ПолучитьОбработчикиТолькоДляВыгрузки = Неопределено) Экспорт
	
	МассивОбработчиков = Новый Массив();
	
	НужноВыгружатьОбработчикиВыгрузки = ПолучитьОбработчикиТолькоДляВыгрузки = Неопределено
		ИЛИ ПолучитьОбработчикиТолькоДляВыгрузки = Истина;
		
	НужноВыгружатьОбработчикиЗагрузки = ПолучитьОбработчикиТолькоДляВыгрузки = Неопределено
		ИЛИ ПолучитьОбработчикиТолькоДляВыгрузки = Ложь;
	
	Если НазваниеОбъекта = "Конвертация" Тогда
		
		Если НужноВыгружатьОбработчикиВыгрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиПравилОбмена");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойДанных");
			МассивОбработчиков.Добавить("АлгоритмПередПолучениемИзмененныхОбъектов");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиДанных");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПередКонвертациейОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПередОтправкойИнформацииОбУдалении");
		КонецЕсли;

		Если НужноВыгружатьОбработчикиЗагрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередЗагрузкойДанных");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиДанных");
			МассивОбработчиков.Добавить("АлгоритмПередЗагрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПриПолученииИнформацииОбУдалении");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиПараметров");
			МассивОбработчиков.Добавить("АлгоритмПослеПолученияИнформацииОбУзлахОбмена");
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "ГруппаСвойств" Тогда
		
		Если НужноВыгружатьОбработчикиВыгрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередОбработкойВыгрузки");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойСвойства");
			МассивОбработчиков.Добавить("АлгоритмПриВыгрузкеСвойства");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиСвойства");
	        МассивОбработчиков.Добавить("АлгоритмПослеОбработкиВыгрузки");
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "Свойства" Тогда
		
		Если НужноВыгружатьОбработчикиВыгрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойСвойства");
			МассивОбработчиков.Добавить("АлгоритмПриВыгрузкеСвойства");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиСвойства");
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "ПравилаВыгрузкиДанных" Тогда
		
		Если НужноВыгружатьОбработчикиВыгрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередОбработкойПравила");
			МассивОбработчиков.Добавить("АлгоритмПослеОбработкиПравила");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъекта");
		КонецЕсли
		
	ИначеЕсли НазваниеОбъекта = "ПравилаКонвертацииОбъектов" Тогда
		
		Если НужноВыгружатьОбработчикиВыгрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПриВыгрузкеОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъектаВФайлОбмена");
		КонецЕсли;
		
		Если НужноВыгружатьОбработчикиЗагрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередЗагрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПриЗагрузкеОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПоследовательностьПолейПоиска");
		КонецЕсли;
						
	ИначеЕсли НазваниеОбъекта = "ПравилаРегистрацииОбъектов" Тогда
		
		МассивОбработчиков.Добавить("АлгоритмПередОбработкойПравила");
		МассивОбработчиков.Добавить("АлгоритмПриОбработкеПравила");
		МассивОбработчиков.Добавить("АлгоритмПриОбработкеДополнительныйПравила");
		МассивОбработчиков.Добавить("АлгоритмПослеОбработкиПравила");
		
	ИначеЕсли НазваниеОбъекта = "ПравилаОчисткиОбъектов" Тогда
		
		Если НужноВыгружатьОбработчикиЗагрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПередОбработкойПравила");
			МассивОбработчиков.Добавить("АлгоритмПередУдалениемОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеОбработкиПравила");
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "Параметры" Тогда
		
		Если НужноВыгружатьОбработчикиЗагрузки Тогда
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиПараметра");
		КонецЕсли;
			            		
	КонецЕсли;
	
	Возврат МассивОбработчиков;
	
КонецФункции

Функция ОпределитьНужноИскатьПравило(ТипИсточника, ТипПриемника) Экспорт
	
	ЕстьСсылочныйТип = глЕстьСсылка(ТипПриемника);
	
	Возврат ЕстьСсылочныйТип;
	
КонецФункции

Функция ПолучитьТаблицуСсылочныхТиповПоИсточнику(Источник)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Объекты.Ссылка КАК ТипДанных,
				   |	Представление(Объекты.Ссылка) КАК Представление
	               |ИЗ
	               |	Справочник.Свойства.Типы КАК СвойстваТипы
				   |	Внутреннее соединение Справочник.Объекты КАК Объекты
				   |		по (Объекты.Ссылка = СвойстваТипы.Тип)
				   |			И  (Объекты.Тип В (&МассивДопустимыхТипов))
				   |ГДЕ СвойстваТипы.Ссылка = &Источник
				   | ";
				   
	Запрос.УстановитьПараметр("Источник", Источник);
		
	МассивДопустимыхТипов = ПолучитьМассивВсехСсылочныхТипов();
		
	Запрос.УстановитьПараметр("МассивДопустимыхТипов", МассивДопустимыхТипов);
		
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Индексы.Добавить("Представление");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьМассивВсехСсылочныхТипов() Экспорт
	
	МассивДопустимыхТипов = Новый Массив();
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Справочник);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Документ);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Перечисление);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ПланСчетов);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса);
	
	Возврат МассивДопустимыхТипов;
	
КонецФункции

Функция ПолучитьМассивТиповПоКоторыНуженПоискПоПолям() Экспорт
	
	МассивДопустимыхТипов = Новый Массив();
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Документ);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Справочник);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивДопустимыхТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	
	Возврат МассивДопустимыхТипов;	
	
КонецФункции

Функция НайтиСоответствияОдноименныхТипов(ВладелецПКО, Источник, Приемник, ЕдинственноеСуществующееПКО = Неопределено)
	
	ТаблицаСоответствий = Новый ТаблицаЗначений();
	ТаблицаСоответствий.Колонки.Добавить("ТипИсточника");
	ТаблицаСоответствий.Колонки.Добавить("ТипПриемника");
	
	Если Источник.Пустая() ИЛИ Приемник.Пустая() Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	ТаблицаИсточник = ПолучитьТаблицуСсылочныхТиповПоИсточнику(Источник);
	Если ТаблицаИсточник.количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	ТаблицаПриемник = ПолучитьТаблицуСсылочныхТиповПоИсточнику(Приемник);
	Если ТаблицаПриемник.количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
		
	// надо найти все соответствия одноименных типов
	Для Каждого СтрокаСписка Из ТаблицаИсточник Цикл
		
		СтрокаДругая = ТаблицаПриемник.Найти(СтрокаСписка.Представление, "Представление");
		Если СтрокаДругая <> Неопределено тогда
			
			СтрДанных = ТаблицаСоответствий.Добавить();
			СтрДанных.ТипИсточника = СтрокаСписка.ТипДанных;
			СтрДанных.ТипПриемника = СтрокаДругая.ТипДанных;
			
			ТаблицаПриемник.Удалить(СтрокаДругая);
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого СтрокаСписка Из ТаблицаПриемник Цикл
		
		СтрокаДругая = ТаблицаИсточник.Найти(СтрокаСписка.Представление, "Представление");
		Если СтрокаДругая <> Неопределено тогда
			
			СтрДанных = ТаблицаСоответствий.Добавить();
			СтрДанных.ТипИсточника = СтрокаДругая.ТипДанных;
			СтрДанных.ТипПриемника = СтрокаСписка.ТипДанных;
			
			ТаблицаИсточник.Удалить(СтрокаДругая);
			
		КонецЕсли;
					
	КонецЦикла;
	
	Если ТаблицаСоответствий.Количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	// возможно некоторые ПКо уже есть, тогда их повторно создавать не нужно
	ЗапросПравил = Новый Запрос;
	ЗапросПравил.Текст = "ВЫБРАТЬ Различные 
					  | ПравилаКонвертацииОбъектов.Источник КАК ТипИсточника,
                      |	ПравилаКонвертацииОбъектов.Приемник КАК ТипПриемника,
					  |	ПравилаКонвертацииОбъектов.Ссылка КАК ПКО
                      |ИЗ
                      |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
                      |ГДЕ
                      |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
                      |	И ПравилаКонвертацииОбъектов.Источник В (&Источник)
                      |	И ПравилаКонвертацииОбъектов.Приемник В (&Приемник)";
					  
	ЗапросПравил.УстановитьПараметр("Владелец", ВладелецПКО);
	ЗапросПравил.УстановитьПараметр("Источник", ТаблицаСоответствий.ВыгрузитьКолонку("ТипИсточника"));
	ЗапросПравил.УстановитьПараметр("Приемник", ТаблицаСоответствий.ВыгрузитьКолонку("ТипПриемника"));
	
	ТаблицаИмеющихсяПравил = ЗапросПравил.Выполнить().Выгрузить();
	
	ТаблицаИмеющихсяПравил.Индексы.Добавить("ТипИсточника,ТипПриемника");
	
	сч = ТаблицаСоответствий.Количество() - 1;
	Пока Сч >= 0 Цикл
		
		СтрокаИмеющихсяПравил = ТаблицаИмеющихсяПравил.НайтиСтроки(Новый Структура("ТипИсточника,ТипПриемника", ТаблицаСоответствий[Сч].ТипИсточника, ТаблицаСоответствий[Сч].ТипПриемника)); 	
		
		Если СтрокаИмеющихсяПравил.Количество() > 0 Тогда
			
			ТаблицаСоответствий.Удалить(Сч);
			
		КонецЕсли;
		
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Если ТаблицаИмеющихсяПравил.Количество() = 1
		И ТаблицаСоответствий.Количество() = 0
		И ТаблицаИсточник.количество() = 1
		И ТаблицаПриемник.количество() = 0 Тогда
		
		Если Источник.Типы.Количество() = 1
			И Приемник.Типы.Количество() = 1 Тогда
		
			ЕдинственноеСуществующееПКО = ТаблицаИмеющихсяПравил[0].ПКО;	
		
		КонецЕсли;
					
	КонецЕсли;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

Функция ОпределитьПоИсточникуИПриемникуМожетБытьПКОСозданоНесколькоПКО(ВладелецПКО, Источник, Приемник, 
		ТаблицаСоответствийТипов = Неопределено, ЕдинственноеПКО = Неопределено) Экспорт
	
	ТаблицаСоответствийТипов = НайтиСоответствияОдноименныхТипов(ВладелецПКО, Источник, Приемник, ЕдинственноеПКО);
	
	Возврат ТаблицаСоответствийТипов.Количество() > 0;
	
КонецФункции

Функция ИмяРеквизитаМожетБытьИзменено(НаименованиеСвойства) Экспорт
	
	Если (НаименованиеСвойства = "Номер"
			ИЛИ НаименованиеСвойства = "Дата"
			ИЛИ НаименованиеСвойства = "НомерДок"
			ИЛИ НаименованиеСвойства = "ДатаДок") Тогда
			
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
			
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАналогИмениРеквизита(НаименованиеСвойства) Экспорт
	
	Если НаименованиеСвойства = "Номер" Тогда
		НовоеНаименованиеСвойства =	"НомерДок";
	ИначеЕсли НаименованиеСвойства = "Дата" Тогда
		НовоеНаименованиеСвойства =	"ДатаДок";
	ИначеЕсли НаименованиеСвойства = "НомерДок" Тогда
		НовоеНаименованиеСвойства =	"Номер";
	ИначеЕсли НаименованиеСвойства = "ДатаДок" Тогда
		НовоеНаименованиеСвойства =	"Дата";		
	КонецЕсли;
	
	Возврат НовоеНаименованиеСвойства;
	
КонецФункции

Процедура ПоказатьИнформациюОБыстромОсвоении(ИмяРаздела) Экспорт
	
	ОбработкаБыстрогоОсвоения = Обработки.БыстроеОсвоение.Создать();
	ОбработкаБыстрогоОсвоения.РазделДляОткрытия = ИмяРаздела;
	ФормаОбработки = ОбработкаБыстрогоОсвоения.ПолучитьФорму();
	ФормаОбработки.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УНИВЕРСАЛЬНЫМИ КОЛЛЕКЦИЯМИ ЗНАЧЕНИЙ

// Создает копию переданного массива, структуры или соответствия
//
// Параметры:
//  КоллекцияИсходная: тип Массив, Структура, Соответствие - исходная коллекция
// Возвращаемое значение:
//  КоллекцияКопия:  тип Массив, Структура, Соответствие - копия исходной коллекции
//
Функция СкопироватьУниверсальнуюКоллекцию(КоллекцияИсходная) Экспорт
	
	Если ТипЗнч(КоллекцияИсходная)=Тип("Массив") Тогда
		
		КоллекцияКопия=Новый Массив;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Добавить(Элемент);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	ИначеЕсли ТипЗнч(КоллекцияИсходная)=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,Элемент.Значение);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗнч(КоллекцияИсходная)=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,Элемент.Значение);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Сообщить("Неверный тип универсальной коллекции для копирования");
		Возврат Неопределено
		
	КонецЕсли;
	
КонецФункции // СкопироватьУниверсальнуюКоллекцию()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЛЯ ПКО

Процедура УстановитьГруппуПоУмолчаниюДляПКО(Объект) Экспорт
	
	// ищем возможного родителя по приемнику...
	ИмяГруппы = ОпределитьИмяГруппыДляПКО(Объект.ТипПриемника);
	
	Если Не ПустаяСтрока(ИмяГруппы) Тогда
		
		ПредполагаемыйРодитель = Справочники.ПравилаКонвертацииОбъектов.НайтиПоКоду(ИмяГруппы, , , Объект.Владелец);
		
		Если ПредполагаемыйРодитель.Пустая() Тогда
			
			ГруппаРодителя = Справочники.ПравилаКонвертацииОбъектов.СоздатьГруппу();
			ГруппаРодителя.Владелец = Объект.Владелец;
			ГруппаРодителя.Код = ИмяГруппы;
			ГруппаРодителя.Наименование = ИмяГруппы;
			ГруппаРодителя.Записать();
			
			ПредполагаемыйРодитель = ГруппаРодителя.Ссылка;
			
		КонецЕсли;
		
		Объект.Родитель = ПредполагаемыйРодитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьГруппуПоУмолчаниюДляПВД(Объект) Экспорт
	
	// ищем возможного родителя по приемнику...
	ИмяГруппы = ОпределитьИмяГруппыДляПВД(Объект.ТипОбъектаВыборки);
	
	Если Не ПустаяСтрока(ИмяГруппы) Тогда
		
		ПредполагаемыйРодитель = Справочники.ПравилаВыгрузкиДанных.НайтиПоКоду(ИмяГруппы, , , Объект.Владелец);
		
		Если ПредполагаемыйРодитель.Пустая() Тогда
			
			ГруппаРодителя = Справочники.ПравилаВыгрузкиДанных.СоздатьГруппу();
			ГруппаРодителя.Владелец = Объект.Владелец;
			ГруппаРодителя.Код = ИмяГруппы;
			ГруппаРодителя.Наименование = ИмяГруппы;
			ГруппаРодителя.Записать();
			
			ПредполагаемыйРодитель = ГруппаРодителя.Ссылка;
			
		КонецЕсли;
		
		Объект.Родитель = ПредполагаемыйРодитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьГруппуПоУмолчаниюДляПРО(Объект) Экспорт
	
	Если Объект.ОбъектНастройки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// ключевые поля поиска группы по умолчанию
	ТипГруппы = Объект.ОбъектНастройки.Тип;
	Владелец  = Объект.Владелец;
	
	ГруппаПоУмолчанию = Справочники.ПравилаРегистрацииОбъектов.НайтиПоРеквизиту("ТипГруппы", ТипГруппы,, Владелец);
	
	Если ГруппаПоУмолчанию.Пустая() Тогда
		
		// создаем новую группу
		ГруппаПоУмолчаниюОбъект = Справочники.ПравилаРегистрацииОбъектов.СоздатьГруппу();
		
		// ключевые поля поиска группы по умолчанию
		ГруппаПоУмолчаниюОбъект.ТипГруппы    = ТипГруппы;
		ГруппаПоУмолчаниюОбъект.Владелец     = Владелец;
		
		// реквизиты
		ГруппаПоУмолчаниюОбъект.Наименование = ПолучитьМножественноеПредставлениеТипаОбъекта(ТипГруппы);
		
		// записываем новую группу
		Попытка
			ГруппаПоУмолчаниюОбъект.Записать();
			
			ГруппаПоУмолчанию = ГруппаПоУмолчаниюОбъект.Ссылка;
			
		Исключение
			ГруппаПоУмолчанию = Справочники.ПравилаРегистрацииОбъектов.ПустаяСсылка();
		КонецПопытки;
		
	КонецЕсли;
	
	// передаем ссылку на группу по умолчанию
	Объект.Родитель = ГруппаПоУмолчанию;
	
КонецПроцедуры

Функция ПолучитьМножественноеПредставлениеТипаОбъекта(ТипОбъекта)
	
	СтрокаТипОбъекта = "";
	
	Если      ТипОбъекта = Перечисления.ТипыОбъектов.Документ               Тогда СтрокаТипОбъекта = "Документы";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Справочник             Тогда СтрокаТипОбъекта = "Справочники";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрСведений        Тогда СтрокаТипОбъекта = "Регистры сведений";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда СтрокаТипОбъекта = "Планы видов характеристик";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.НаборКонстант          Тогда СтрокаТипОбъекта = "Набор констант";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовРасчета       Тогда СтрокаТипОбъекта = "Планы видов расчета";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.БизнесПроцесс          Тогда СтрокаТипОбъекта = "Бизнес процессы";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ВидРасчета             Тогда СтрокаТипОбъекта = "Виды расчетов";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ВидСубконто            Тогда СтрокаТипОбъекта = "Виды субконто";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Задача                 Тогда СтрокаТипОбъекта = "Задачи";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Календарь              Тогда СтрокаТипОбъекта = "Календари";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Перечисление           Тогда СтрокаТипОбъекта = "Перечисления";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланОбмена             Тогда СтрокаТипОбъекта = "Планы обмена";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланСчетов             Тогда СтрокаТипОбъекта = "Планы счетов";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрБухгалтерии     Тогда СтрокаТипОбъекта = "Регистры бухгалтерии";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрНакопления      Тогда СтрокаТипОбъекта = "Регистры накопления";
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрРасчета         Тогда СтрокаТипОбъекта = "Регистры расчета";
	Иначе
		// если ничего не подошло возвращаем представление в ед. числе
		СтрокаТипОбъекта = Строка(ТипОбъекта);
	КонецЕсли;
	
	Возврат СтрокаТипОбъекта;
	
КонецФункции

#Если Клиент тогда

Процедура ИсточникПриИзмененииПКО(Объект) Экспорт
	
	// надо попробовать найти приемник
	Если НЕ ЗначениеЗаполнено(Объект.Источник) 
		ИЛИ ЗначениеЗаполнено(Объект.Приемник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.Приемник = НайтиОбъектПоИмениИВладельцу(Объект.Источник.Наименование, Объект.Владелец.Приемник);
	
	Если Объект.ЭтоНовый() Тогда
		Объект.СгенерироватьУникальныйКод();
		Объект.СинхронизироватьПоИдентификатору = ОпределитьНужнаСинхронизацияПоИдентификатору(Объект);
		Объект.НеЗапоминатьВыгруженные = ОпределитьНужноНеЗапоминатьВыгруженныеОбъекты(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриемникПриИзмененииПКО(Объект) Экспорт
	
	Если Объект.ЭтоНовый() Тогда
		Объект.СгенерироватьУникальныйКод();
		Объект.СинхронизироватьПоИдентификатору = ОпределитьНужнаСинхронизацияПоИдентификатору(Объект);
		Объект.НеЗапоминатьВыгруженные = ОпределитьНужноНеЗапоминатьВыгруженныеОбъекты(Объект);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьНужноНеЗапоминатьВыгруженныеОбъекты(Объект) Экспорт
	
	// определим сохранять загруженные объекты или нет
	// сохранять если источник и приемник ссылочного типа, если и тот и другой не ссылочного - не сохранять
	ИсточникСсылка = (ЗначениеЗаполнено(Объект.Источник)) И глЕстьСсылка(Объект.Источник);
	ПриемникСсылка = (ЗначениеЗаполнено(Объект.Приемник)) И глЕстьСсылка(Объект.Приемник);
	
	Если НЕ ИсточникСсылка
		И Не ПриемникСсылка Тогда
		
		// нет смысла запоминать выгруженные объекты
		Возврат Истина;	
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция ОпределитьНужнаСинхронизацияПоИдентификатору(Объект) Экспорт
	
	Если ЭтоПриложение8(Объект.Владелец.Приемник.Приложение) И
		 ЭтоПриложение8(Объект.Владелец.Источник.Приложение) Тогда
			 
		ЭтоПеречисление = Ложь;
		ЕстьСсылка = глЕстьСсылка(Объект.Приемник, ЭтоПеречисление);
					
		Если ЕстьСсылка 
			И НЕ ЭтоПеречисление Тогда
			
			Возврат Истина;
			
		КонецЕсли;
					
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОпределитьДоступностьУстановкиФлажковПКО(Форма, Объект) Экспорт
	
	Источник8 = ЭтоПриложение8(Объект.Владелец.Источник.Приложение);
	Приемник8 = ЭтоПриложение8(Объект.Владелец.Приемник.Приложение);
	
	Если НЕ Приемник8 ИЛИ
		 НЕ Источник8 Тогда
		 
		Форма.ЭлементыФормы.СинхронизироватьПоИдентификаторам.Доступность = ЛОЖЬ;
		Форма.ЭлементыФормы.ИспользоватьБыстрыйПоискПриЗагрузке.Доступность =	ЛОЖЬ;
		Форма.ЭлементыФормы.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска.Доступность = Истина;
		Форма.ЭлементыФормы.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD.Доступность =	Ложь;
		
	Иначе
		
		Форма.ЭлементыФормы.СинхронизироватьПоИдентификаторам.Доступность = Истина;
		Форма.ЭлементыФормы.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска.Доступность =	Истина;		
		Форма.ЭлементыФормы.ИспользоватьБыстрыйПоискПриЗагрузке.Доступность = НЕ Объект.НеЗапоминатьВыгруженные;
		Форма.ЭлементыФормы.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD.Доступность = Объект.СинхронизироватьПоИдентификатору;
				
	КонецЕсли;
	
	Форма.ЭлементыФормы.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли.Доступность =	Объект.СинхронизироватьПоИдентификатору;
	Форма.ЭлементыФормы.ГенерироватьНовыйНомерИлиКодЕслиНеУказан.Доступность =	Приемник8;	
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКонвертации(Конвертация, ФормаВладелец) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Конвертация) Тогда
		Предупреждение("Конвертация не записана. Запишите конвертацию и повторите операцию.");
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверки = Обработки.ПроверкаКонвертации.Создать();
	ОбработкаПроверки.Конвертация = Конвертация;
	ФормаТестирования = ОбработкаПроверки.ПолучитьФорму("Форма", ФормаВладелец);
	ФормаТестирования.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуИзмененийКонвертации(Конвертация, ФормаВладелец) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Конвертация) Тогда
		Предупреждение("Конвертация не записана. Запишите конвертацию и повторите операцию.");
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверки = Обработки.ПроверкаКонвертации.Создать();
	ОбработкаПроверки.Конвертация = Конвертация;
	ФормаТестирования = ОбработкаПроверки.ПолучитьФорму("ФормаИзмененияПравил", ФормаВладелец);
	ФормаТестирования.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуСравненияИОбъединенияКонвертации(Конвертация, ФормаВладелец) Экспорт 	
	
	Если НЕ ЗначениеЗаполнено(Конвертация) Тогда
		Предупреждение("Конвертация не записана. Запишите конвертацию и повторите операцию.");
		Возврат;
	КонецЕсли;
	
	ОбработкаСравнения = Обработки.СравнениеИОбъединениеПравилОбмена.Создать();
	
	НоваяСтрока = ОбработкаСравнения.Конвертации.Добавить();
	НоваяСтрока.Конвертация = Конвертация;    	
	
	ФормаСравнения = ОбработкаСравнения.ПолучитьФорму("Форма", ФормаВладелец);
	ФормаСравнения.Открыть();		
	
КонецПроцедуры

Процедура ПроверитьВозможностьСозданияПКОДляОбъекта(Отказ, Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Объекты") Тогда
		
		Если Объект.Тип = Перечисления.ТипыОбъектов.ПланОбмена Тогда
			
			Предупреждение(НСтр("ru = 'Создание правил обмена для планов обмена не поддерживается.'"));
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьМассивТиповПоКоторымНеВыполняетсяСинхронизацияПКО() Экспорт
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.НаборКонстант);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Строка);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Число);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Булево);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Дата);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ХранилищеЗначения);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.УникальныйИдентификатор);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Календарь);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.Задача);
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса);
	
	Возврат МассивТипов;
	
КонецФункции

Функция ПолучитьМассивТиповПоКоторымНеВыполняетсяСозданиеПКС() Экспорт
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
	
	Возврат МассивТипов;
	
КонецФункции

// Проверяет правильность заполнения реквизитов шапки объекта.
// Если какой-то из реквизтов шапки, не заполнен, то выставляется флаг отказа
// Проверка выполняется по объекту
//
// Параметры: 
//  Объект                     - объект
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые надо проверить.
//  Отказ                      - флаг отказа
//  Заголовок                  - строка, заголовок сообщения об ошибке
//
Процедура ПроверитьЗаполнениеРеквизитовШапкиОбъекта(Объект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт

	МетаданныеРеквизиты = Объект.Метаданные().Реквизиты;

	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = Объект[КлючЗначение.Ключ];
		ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();

		Если НЕ ЗначениеЗаполнено(Значение) Тогда

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			
			СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовШапкиОбъекта()

Функция ПредставлениеОбъектаПриЗаписи(Объект) Экспорт
	
	Возврат "Запись элемента: " + СокрЛП(Объект);
	
КонецФункции // ПредставлениеОбъектаПриЗаписи()

Функция ЭтоПриложение8(Источник) Экспорт
	
	Возврат (Источник = Перечисления.Приложения.Предприятие80)
	    Или (Источник = Перечисления.Приложения.УправляемоеПриложение)
	
КонецФункции

// Определяет является ли объект ссылочным или нет
//
// Параметры:
//  Тип - ПеречислениеСсылка.ТипыОбъектов - тип объекта
// 
// Возвращаемое значение:
//  Булево - Признак является ли объект ссылочным или нет
//
Функция глЭтоСсылочныйТип(Тип) Экспорт
	
	Возврат Тип = Перечисления.ТипыОбъектов.Документ
	    ИЛИ Тип = Перечисления.ТипыОбъектов.Справочник
	    ИЛИ Тип = Перечисления.ТипыОбъектов.Перечисление
	    ИЛИ Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета
	    ИЛИ Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
	    ИЛИ Тип = Перечисления.ТипыОбъектов.ПланОбмена
	    ИЛИ Тип = Перечисления.ТипыОбъектов.ПланСчетов;
	
КонецФункции

// Определяет является ли переданный тип примитивным
//
// Параметры:
//  Тип - ПеречислениеСсылка.ТипыОбъектов - Тип который необходимо проверить
// 
// Возвращаемое значение:
//  Булево - Признак является ли переданный тип примитивным
//
Функция глЭтоПримитивныйТип(Тип) Экспорт
	
	Возврат Тип = Перечисления.ТипыОбъектов.Булево
	    ИЛИ Тип = Перечисления.ТипыОбъектов.Дата
	    ИЛИ Тип = Перечисления.ТипыОбъектов.Строка
	    ИЛИ Тип = Перечисления.ТипыОбъектов.Число;
	
КонецФункции

// Определяет соответствует ли тип объекта заданному типу
//
// Параметры:
//  Тип         - ПеречислениеСсылка.ТипыОбъектов - тип объекта
//  ЛитералТипа - Строка - литерал типа объекта. По умолчанию равен "Булево"
// 
// Возвращаемое значение:
//  Булево - признак принадлежности переданного объекта заданному типу
//
Функция глЭтоЗаданныйТип(Тип, ЛитералТипа = "Булево") Экспорт
	
	Возврат Тип = Перечисления.ТипыОбъектов[ЛитералТипа];
	
КонецФункции

// Возвращает переданное значение приведенное к заданному типу. Только для примитивных типов
//
// Параметры:
//  ЗначениеСтрокой - Строка - Значение, представленное строкой, которое необходимо преобразовать к заданному типу
//  Тип             - ПеречислениеСсылка.ТипыОбъектов - Заданный тип, к которому необходимо преобразовать переданное значение
// 
// Возвращаемое значение:
//  Возвращает переданное значение приведенное к заданному типу
//  Если выполнить преобразование невозможно, то возвращается Неопределено
//
Функция глПривестиЗначениеКТипу(ЗначениеСтрокой, Тип) Экспорт
	
	// возвращаемое значение функции
	Значение = Неопределено;
	
	Попытка
		
		Если      Тип = Перечисления.ТипыОбъектов.Булево Тогда Значение = Булево(ЗначениеСтрокой);
		ИначеЕсли Тип = Перечисления.ТипыОбъектов.Дата   Тогда Значение = Дата(ЗначениеСтрокой);
		ИначеЕсли Тип = Перечисления.ТипыОбъектов.Строка Тогда Значение = Строка(ЗначениеСтрокой);
		ИначеЕсли Тип = Перечисления.ТипыОбъектов.Число  Тогда Значение = Число(ЗначениеСтрокой);
		Иначе
			Значение = ЗначениеСтрокой;
		КонецЕсли;
		
	Исключение
		
		Значение = Неопределено;
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

// Получает список допустимых операций сравнения для заданного типа
//
// Параметры:
//  Тип - ПеречислениеСсылка.ТипыОбъектов - тип объекта, для которого получаем список видов сравнения
// 
// Возвращаемое значение:
//  СписокВыбора - СписокЗначений - список допустимых операций сравнения для заданного типа
//
Функция глПолучитьСписокДопустимыхВидовСравнения(Тип) Экспорт
	
	// возвращаемое значение функции 
	СписокВыбора = Новый СписокЗначений;
	
	Если глЭтоЗаданныйТип(Тип, "Булево") Тогда // Булево
		
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Равно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.НеРавно);
		
	ИначеЕсли глЭтоЗаданныйТип(Тип, "Строка") Тогда // Строка
		
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Равно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.НеРавно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Больше);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.БольшеИлиРавно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Меньше);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.МеньшеИлиРавно);
		
	ИначеЕсли глЭтоЗаданныйТип(Тип, "Число") Тогда // Число
		
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Равно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.НеРавно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Больше);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.БольшеИлиРавно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Меньше);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.МеньшеИлиРавно);
		
	ИначеЕсли глЭтоЗаданныйТип(Тип, "Дата") Тогда // Дата
		
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Равно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.НеРавно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Больше);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.БольшеИлиРавно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Меньше);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.МеньшеИлиРавно);
		
	ИначеЕсли глЭтоСсылочныйТип(Тип) Тогда // Любая ссылка
		
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.Равно);
		СписокВыбора.Добавить(Перечисления.ВидыСравнения.НеРавно);
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция глНайтиОбъектПоТипу(Конфигурация, ТипОбъекта) Экспорт
	
	Возврат Справочники.Объекты.НайтиПоРеквизиту("Тип", ТипОбъекта,, Конфигурация);
	
КонецФункции

Функция глОпределитьФайлСжат(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	
	ФайлСжат = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
	Возврат ФайлСжат;
	
КонецФункции

Функция глРаспаковатьZipФайл(Знач ИмяФайлаАрхива) Экспорт
	
	// возвращаемое значение функции
	ИмяФайла = "";
	
	Попытка
		Архиватор = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	Исключение
		
		Архиватор = Неопределено;
		
		СообщитьОбОшибке(ОписаниеОшибки());
		
		Возврат "";
	КонецПопытки;
	
	Попытка
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			КаталогДляРаспаковки = КаталогВременныхФайлов();
			
			#Если Клиент Тогда
			Состояние("Выполняется распаковка файла ...");
			#КонецЕсли
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			
			ИмяФайла = глПолучитьПолноеИмяФайла(КаталогДляРаспаковки, Архиватор.Элементы[0].Имя);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьОбОшибке(ОписаниеОшибки());
		
		ИмяФайла = "";
		
	КонецПопытки;
	
	Архиватор.Закрыть();
	Архиватор = Неопределено;
	
	Возврат ИмяФайла;
КонецФункции

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция глПолучитьПолноеИмяФайла(ИмяКаталога, ИмяФайла) Экспорт
	
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;
	
КонецФункции

Функция глПолучитьИмяГруппыОбъектовПоНаименованию(Знач Наименование) Экспорт
	
	Если      Наименование = "Справочники"             Тогда Возврат "Справочники";
	ИначеЕсли Наименование = "Документы"               Тогда Возврат "Документы";
	ИначеЕсли Наименование = "Перечисления"            Тогда Возврат "Перечисления";
	ИначеЕсли Наименование = "РегистрыСведений"        Тогда Возврат "Регистры сведений";
	ИначеЕсли Наименование = "ПланыОбмена"             Тогда Возврат "Планы обмена";
	ИначеЕсли Наименование = "ПланыВидовХарактеристик" Тогда Возврат "Планы видов характеристик";
	ИначеЕсли Наименование = "ПланыВидовРасчета"       Тогда Возврат "Планы видов расчета";
	ИначеЕсли Наименование = "РегистрыБухгалтерии"     Тогда Возврат "Регистры бухгалтерии";
	ИначеЕсли Наименование = "РегистрыРасчета"         Тогда Возврат "Регистры расчета";
	ИначеЕсли Наименование = "БизнесПроцессы"          Тогда Возврат "Бизнес-процессы";
	ИначеЕсли Наименование = "КонстантыНабор"          Тогда Возврат "Набор констант";
	ИначеЕсли Наименование = "Задачи"                  Тогда Возврат "Задачи";
	ИначеЕсли Наименование = "РегистрыНакопления"      Тогда Возврат "Регистры накопления";
	ИначеЕсли Наименование = "ПланыСчетов"             Тогда Возврат "Планы счетов";
	ИначеЕсли Наименование = "ХранилищеЗначения"       Тогда Возврат "Хранилище значения";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ГЛОБАЛЬНЫЕ СВОЙСТВА И КОНСТАНТЫ

Функция глЭлементОтбораСвойствоЗначениеКонстанты() Экспорт
	
	Возврат "ЗначениеКонстанты";
	
КонецФункции

Функция глЭлементОтбораСвойствоАлгоритмЗначения() Экспорт
	
	Возврат "АлгоритмЗначения";
	
КонецФункции

Функция глИмяРегистраСоответствияОбъектовИнформационныхБаз() Экспорт
	
	Возврат "РегистрСведенийЗапись.СоответствиеОбъектовИнформационныхБаз";
	
КонецФункции

Функция глИмяТипаРежимовВыгрузкиОбъектовОбмена() Экспорт
	
	Возврат "ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТЛАДКИ ОБРАБОТЧИКОВ

#Если Клиент тогда

Функция ОтладкаОбработчиковВозможна(Конвертация) Экспорт
	
	Если Конвертация.РежимСовместимости <> Перечисления.РежимСовместимости.РежимСовместимостиСБСП21 Тогда
		
		Ответ = Вопрос("Возможности отладки доступны только при отключении режима совместимости. Отключить режим совместимости?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОбъектКонвертации = Конвертация.ПолучитьОбъект();
			ОбъектКонвертации.РежимСовместимости = Перечисления.РежимСовместимости.РежимСовместимостиСБСП21;
			ОбъектКонвертации.Записать();
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузитьКодОбработчиков(Конвертация, Форма, МассивИменОбработчиков = Неопределено) Экспорт
	
	Если ОтладкаОбработчиковВозможна(Конвертация) Тогда
		
		ФормаЗагрузки = Обработки.ЗагрузкаОбработчиков.ПолучитьФорму("Форма");
		ФормаЗагрузки.ВладелецФормы = Форма;
		ФормаЗагрузки.МассивИменОбработчиков = МассивИменОбработчиков;
		ФормаЗагрузки.Конвертация = Конвертация;
		ФормаЗагрузки.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКодОбработчиков(Конвертация, ЭтоВыгрузка, Отбор = Неопределено,
	ПолнаяВыгрузка = Ложь, Форма = Неопределено) Экспорт
	
	Если ОтладкаОбработчиковВозможна(Конвертация) Тогда
		
		ОбработкаВыгрузкиДляОтладки = Обработки.Выгрузкаобработчиков.Создать();
		
		ОбработкаВыгрузкиДляОтладки.Конвертация = Конвертация;
		
		ОбработкаВыгрузкиДляОтладки.ЭтоВыгрузка = ЭтоВыгрузка;
		
		Если ПолнаяВыгрузка Тогда
			
			ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчики(Отбор);
			
		Иначе
			
			Если ТипЗнч(Отбор) = Тип("СправочникСсылка.ПравилаКонвертацииОбъектов") Тогда
				
				ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиПКО(Отбор);
				
			ИначеЕсли ТипЗнч(Отбор) = Тип("СправочникСсылка.ПравилаКонвертацииСвойств") Тогда
				
				Если Отбор.ЭтоГруппа Тогда
					
					ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиПКГС(Отбор);
					
				Иначе
					
					ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиПКС (Отбор);
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Отбор) = Тип("СправочникСсылка.ПравилаВыгрузкиДанных") Тогда
				
				ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиПВД(Отбор);
				
			ИначеЕсли ТипЗнч(Отбор) = Тип("СправочникСсылка.ПравилаОчисткиДанных") Тогда
				
				ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиПОД(Отбор);
				
			ИначеЕсли ТипЗнч(Отбор) = Тип("СправочникСсылка.Параметры") Тогда
				
				ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиПараметры(Отбор);
				
			Иначе
				
				ТекстМодуля = ОбработкаВыгрузкиДляОтладки.ВыгрузитьОбработчикиКонвертации();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			
			Форма.ЭлементыФормы.ТекстМодуля.УстановитьТекст(ТекстМодуля);
			Форма.Обновить();
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ПараметрыФормы.Вставить("ПолнаяВыгрузка", ПолнаяВыгрузка);
			
			ФормаВыгрузки = ОбработкаВыгрузкиДляОтладки.ПолучитьФорму();
			ФормаВыгрузки.ЭлементыФормы.ТекстМодуля.УстановитьТекст(ТекстМодуля);
			ФормаВыгрузки.Параметры = ПараметрыФормы;
			ФормаВыгрузки.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли