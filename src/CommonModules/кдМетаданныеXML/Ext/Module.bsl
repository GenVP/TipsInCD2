
Функция ВсеПростыеТипы()
	
	ПростыеТипы = гл_кдКэш()["ПростыеТипыXML"];
	Если ПростыеТипы = Неопределено Тогда
		ПростыеТипы = Новый Соответствие;
		ПростыеТипы.Вставить("xs:string", Тип("Строка"));
		ПростыеТипы.Вставить("xs:decimal", Тип("Число"));
		ПростыеТипы.Вставить("xs:boolean", Тип("Булево"));
		ПростыеТипы.Вставить("xs:dateTime", Тип("Дата"));
		ПростыеТипы.Вставить("v8:FixedArray", Тип("ФиксированныйМассив"));
		ПростыеТипы.Вставить("v8:FixedStructure", Тип("ФиксированнаяСтруктура"));
		ПростыеТипы.Вставить("v8:FixedMap", Тип("ФиксированноеСоответствие"));
		ПростыеТипы.Вставить("v8:ValueStorage", Тип("ХранилищеЗначения"));
		ПростыеТипы.Вставить("v8:UUID", Тип("УникальныйИдентификатор"));
		ПростыеТипы.Вставить("v8ui:FormattedString", Тип("ФорматированнаяСтрока"));
		ПростыеТипы.Вставить("v8:ValueListType", Тип("СписокЗначений"));
		ПростыеТипы.Вставить("v8:ValueTable", Тип("ТаблицаЗначений"));
		ПростыеТипы.Вставить("v8:ValueTree", Тип("ДеревоЗначений"));
		ПростыеТипы.Вставить("cfg:DynamicList", Тип("ДинамическийСписок"));
		ПростыеТипы.Вставить("xs:base64Binary", Тип("ДвоичныеДанные"));
		ПростыеТипы.Вставить("mxl:SpreadsheetDocument", Тип("ТабличныйДокумент"));
		ПростыеТипы.Вставить("fd:FormattedDocument", Тип("ФорматированныйДокумент"));
		ПростыеТипы.Вставить("d5p1:TextDocument", Тип("ТекстовыйДокумент"));
		
		гл_кдКэш()["ПростыеТипыXML"] = ПростыеТипы;
	КонецЕсли;
	
	Возврат ПростыеТипы;
	
КонецФункции

Функция ВсеСсылочныеТипы()
	
	СсылочныеТипы = гл_кдКэш()["СсылочныеТипыXML"];
	Если СсылочныеТипы = Неопределено Тогда
		СсылочныеТипы = Новый Соответствие;
		СсылочныеТипы.Вставить("cfg:ExchangePlanRef", "ПланОбмена");
		СсылочныеТипы.Вставить("cfg:CatalogRef", "Справочник");
		СсылочныеТипы.Вставить("cfg:DocumentRef", "Документ");
		СсылочныеТипы.Вставить("cfg:EnumRef", "Перечисление");
		СсылочныеТипы.Вставить("cfg:ChartOfCharacteristicTypesRef", "ПланВидовХарактеристик");
		СсылочныеТипы.Вставить("cfg:ChartOfAccountsRef", "ПланСчетов");
		СсылочныеТипы.Вставить("cfg:ChartOfCalculationTypesRef", "ПланВидовРасчета");
		СсылочныеТипы.Вставить("cfg:BusinessProcessRef", "БизнесПроцесс");
		СсылочныеТипы.Вставить("cfg:TaskRef", "Задача");
		СсылочныеТипы.Вставить("cfg:BusinessProcessRoutePointRef", "ТочкиМаршрутаБизнесПроцесса");
		
		гл_кдКэш()["СсылочныеТипыXML"] = СсылочныеТипы;
	КонецЕсли;
	
	Возврат СсылочныеТипы;
	
КонецФункции

// Проверяет, что сейчас начыинается указанный узел
Функция ЭтоУзел(ЧтениеXML, ИмяУзла)
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = ИмяУзла;
КонецФункции

// Проверяет, что сейчас заканчивается указанный узел
Функция ЭтоКонецУзла(ЧтениеXML, ИмяУзла)
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяУзла;
КонецФункции

Функция НайтиУзел(ЧтениеXML, ИмяУзла)
	
	Пока НЕ ЭтоУзел(ЧтениеXML, ИмяУзла) Цикл
		ЧтениеXML.Пропустить();
		ЧтениеXML.Прочитать();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь; // Следующий узел должен быть началом элемента
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПропуститьТекущийУзел(ЧтениеXML)
	
	ЧтениеXML.Пропустить();
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

Функция ПрочитатьОписаниеТипа(ЧтениеXML, ИмяЭлемента)
	
	ПростыеТипы = ВсеПростыеТипы();
	СсылочныеТипы = ВсеСсылочныеТипы();
	
	// Чтение описания типов
	Типы = Новый Массив;
	
	Пока НЕ ЭтоКонецУзла(ЧтениеXML, ИмяЭлемента) Цикл
		
		Если ЭтоУзел(ЧтениеXML, "v8:Type") ИЛИ ЭтоУзел(ЧтениеXML, "v8:TypeSet") Тогда
			ТипXML = ПрочитатьЗначение(ЧтениеXML);
			ПростойТип = ПростыеТипы[ТипXML];
			Если ПростойТип <> Неопределено Тогда
				Типы.Добавить(ПростойТип);
			Иначе
				МассивФрагментов = ирОбщий.СтрРазделитьЛкс(ТипXML, ".");
				КорневойТипXML = МассивФрагментов[0];
				Если КорневойТипXML = "cfg:DefinedType" ИЛИ КорневойТипXML = "cfg:Characteristic" Тогда
					Типы.Добавить(ТипXML);
				Иначе
					КорневойТип = СсылочныеТипы[КорневойТипXML];
					Если КорневойТип = Неопределено Тогда
						Сообщить("Не известный тип " + ТипXML);
					Иначе
						Типы.Добавить(КорневойТип + "." + МассивФрагментов[1]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПропуститьТекущийУзел(ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

Функция ПрочитатьЗначение(ЧтениеXML)
	
	ИмяЭлемента = ЧтениеXML.Имя;
	ЧтениеXML.Прочитать();
	Если ЭтоКонецУзла(ЧтениеXML, ИмяЭлемента) Тогда
		Значение = ""; // Пустой узел
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
	ИначеЕсли ЭтоУзел(ЧтениеXML, "v8:Type") ИЛИ ЭтоУзел(ЧтениеXML, "v8:TypeSet") Тогда
		Значение = ПрочитатьОписаниеТипа(ЧтениеXML, ИмяЭлемента);
	Иначе
		Сообщить("Найдено неизвестное описание значения " + ЧтениеXML.Имя);
		ЕстьОшибки = Истина;
		Пока ЭтоУзел(ЧтениеXML, ИмяЭлемента) Цикл
			ПропуститьТекущийУзел(ЧтениеXML);
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция ПрочитатьСвойствоСтруктуры(ЧтениеXML, ОписаниеЭлемента)
	
	ИмяЗначения = ЧтениеXML.Имя;
	Если ОписаниеЭлемента.Свойство(ИмяЗначения) Тогда
		Значение = ПрочитатьЗначение(ЧтениеXML);
		ОписаниеЭлемента.Вставить(ИмяЗначения, Значение);
	Иначе
		ПропуститьТекущийУзел(ЧтениеXML);
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьСоответствие(ЧтениеXML)
	
	СоответствиеСвойств = Новый Соответствие;
	
	ИмяЭлемента = ЧтениеXML.Имя;
	
	ЧтениеXML.Прочитать();
	Пока НЕ ЭтоКонецУзла(ЧтениеXML, ИмяЭлемента) Цикл
		ИмяСвойства = ЧтениеXML.Имя;
		ЗначениеСвойства = ПрочитатьЗначение(ЧтениеXML);
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			СоответствиеСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат СоответствиеСвойств;
	
КонецФункции

Функция ПрочитатьProperties(ЧтениеXML, СписокПолей)
	
	ОписаниеЭлемента = Новый Структура(СписокПолей);
	
	Если НайтиУзел(ЧтениеXML, "Properties") Тогда
		ЧтениеXML.Прочитать();
		
		Пока НЕ ЭтоКонецУзла(ЧтениеXML, "Properties") Цикл
			Если ЭтоУзел(ЧтениеXML, "Content") И ОписаниеЭлемента.Свойство(ЧтениеXML.Имя) Тогда
				ЧтениеXML.Прочитать();
				ЭлементыСостав = Новый Массив;
				Пока НЕ ЭтоКонецУзла(ЧтениеXML, "Content") Цикл
					ЭлементСостава = ПрочитатьСоответствие(ЧтениеXML);
					ЭлементыСостав.Добавить(ЭлементСостава);
				КонецЦикла;
				ЧтениеXML.Прочитать();
				ОписаниеЭлемента.Content = ЭлементыСостав;
			Иначе
				ПрочитатьСвойствоСтруктуры(ЧтениеXML, ОписаниеЭлемента);
			КонецЕсли;
		КонецЦикла;
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

Функция ПрочитатьAttribute(ЧтениеXML, ТаблицаМетаданных, ПолноеИмяТЧ)
	
	Если НЕ ЭтоУзел(ЧтениеXML, "Attribute") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока ЭтоУзел(ЧтениеXML, "Attribute") Цикл
		ЧтениеXML.Прочитать();
		ОписаниеЭлемента = ПрочитатьProperties(ЧтениеXML, "Name,Type");
		ЧтениеXML.Прочитать();
		
		СтрокаМетаданных = ТаблицаМетаданных.Добавить();
		СтрокаМетаданных.КорневойТип = ПолноеИмяТЧ + "Реквизит";
		СтрокаМетаданных.ПолноеИмя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Тип = ОписаниеЭлемента.Type;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьDimension(ЧтениеXML, ТаблицаМетаданных)
	
	Если НЕ ЭтоУзел(ЧтениеXML, "Dimension") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока ЭтоУзел(ЧтениеXML, "Dimension") Цикл
		ЧтениеXML.Прочитать();
		ОписаниеЭлемента = ПрочитатьProperties(ЧтениеXML, "Name,Type");
		ЧтениеXML.Прочитать();
		
		СтрокаМетаданных = ТаблицаМетаданных.Добавить();
		СтрокаМетаданных.КорневойТип = "Измерение";
		СтрокаМетаданных.ПолноеИмя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Тип = ОписаниеЭлемента.Type;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьResource(ЧтениеXML, ТаблицаМетаданных)
	
	Если НЕ ЭтоУзел(ЧтениеXML, "Resource") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока ЭтоУзел(ЧтениеXML, "Resource") Цикл
		ЧтениеXML.Прочитать();
		ОписаниеЭлемента = ПрочитатьProperties(ЧтениеXML, "Name,Type");
		ЧтениеXML.Прочитать();
		
		СтрокаМетаданных = ТаблицаМетаданных.Добавить();
		СтрокаМетаданных.КорневойТип = "Ресурс";
		СтрокаМетаданных.ПолноеИмя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Тип = ОписаниеЭлемента.Type;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьTabularSection(ЧтениеXML, ТаблицаМетаданных, ПолноеИмяОбъекта)
	
	Если НЕ ЭтоУзел(ЧтениеXML, "TabularSection") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока ЭтоУзел(ЧтениеXML, "TabularSection") Цикл
		
		ЧтениеXML.Прочитать();
		ПолноеИмяТЧ = "";
		Пока НЕ ЭтоКонецУзла(ЧтениеXML, "TabularSection") Цикл
			Если ЭтоУзел(ЧтениеXML, "Properties") Тогда
				
				ОписаниеЭлемента = ПрочитатьProperties(ЧтениеXML, "Name");
				ПолноеИмяТЧ = "ТабличнаяЧасть." + ОписаниеЭлемента.Name;
				СтрокаМетаданных = ТаблицаМетаданных.Добавить();
				СтрокаМетаданных.КорневойТип = "ТабличнаяЧасть";
				СтрокаМетаданных.ПолноеИмяРодителя = ПолноеИмяОбъекта;
				СтрокаМетаданных.ПолноеИмя = ПолноеИмяТЧ;
				СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
				
			ИначеЕсли ЭтоУзел(ЧтениеXML, "ChildObjects") Тогда
				ЧтениеXML.Прочитать();
				
				Пока НЕ ЭтоКонецУзла(ЧтениеXML, "ChildObjects") Цикл
					Если НЕ ПрочитатьAttribute(ЧтениеXML, ТаблицаМетаданных, ПолноеИмяТЧ + ".") Тогда
						ПропуститьТекущийУзел(ЧтениеXML);
					КонецЕсли;
				КонецЦикла;
				ЧтениеXML.Прочитать();
				
			Иначе
				ПропуститьТекущийУзел(ЧтениеXML);
			КонецЕсли;
		КонецЦикла;
		ЧтениеXML.Прочитать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьTemplate(ЧтениеXML, ТаблицаМетаданных)
	
	Если НЕ ЭтоУзел(ЧтениеXML, "Template") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока ЭтоУзел(ЧтениеXML, "Template") Цикл
		ИмяМакета = ПрочитатьЗначение(ЧтениеXML);
		
		СтрокаМетаданных = ТаблицаМетаданных.Добавить();
		СтрокаМетаданных.КорневойТип = "Макет";
		СтрокаМетаданных.ПолноеИмя = ИмяМакета;
		СтрокаМетаданных.Имя = ИмяМакета;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОткрытьФайлМетаданных(ПолноеИмяФайла)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.ОбъявлениеXML Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	Если ЭтоУзел(ЧтениеXML, "MetaDataObject") Тогда
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		Возврат ЧтениеXML;
	КонецЕсли;
	
	ВызватьИсключение "КД2: Некорректный формат файла " + ПолноеИмяФайла;
	
КонецФункции

Функция ОписаниеМетаданныхОбъектаПоФайлу(ПолноеИмяФайла, СписокПолей)
	
	ЧтениеXML = ОткрытьФайлМетаданных(ПолноеИмяФайла);
	ОписаниеЭлемента = ПрочитатьProperties(ЧтениеXML, СписокПолей);
	ЧтениеXML.Закрыть();
	Возврат ОписаниеЭлемента;
	
КонецФункции

Процедура ЗагрузитьПредопределенныеЗначенияОбъектаПоФайлу(ТаблицаМетаданных, ПолноеИмяФайла, ТипЭлемента)
	
	ТекстФайл = Новый Файл(ПолноеИмяФайла);
	Если НЕ ТекстФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	
	ЧтениеXML.Прочитать();
	Если НЕ ЭтоУзел(ЧтениеXML, "PredefinedData") Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	ОписаниеЭлемента = Новый Структура("Name");
	Пока НЕ ЭтоКонецУзла(ЧтениеXML, "PredefinedData") Цикл
		ЧтениеXML.Прочитать();
		Пока НЕ ЭтоКонецУзла(ЧтениеXML, "Item") Цикл
			ПрочитатьСвойствоСтруктуры(ЧтениеXML, ОписаниеЭлемента);
		КонецЦикла;
		ЧтениеXML.Прочитать();
		
		СтрокаМетаданных = ТаблицаМетаданных.Добавить();
		СтрокаМетаданных.КорневойТип = "Предопределенные";
		СтрокаМетаданных.ПолноеИмя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Имя = ОписаниеЭлемента.Name;
		СтрокаМетаданных.Тип = ирОбщий.БыстрыйМассивЛкс(ТипЭлемента);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбщиеРеквизиты(Настройки, ТаблицаМетаданных, ПолноеИмяОбъекта)
	
	ОбщиеРеквизитыОбъектов = ПолучитьВсеОбщиеРеквизиты(Настройки);
	Если ОбщиеРеквизитыОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из ОбщиеРеквизитыОбъектов Цикл
		Если (СтрокаРеквизита.АвтоИсп И СтрокаРеквизита.Состав.Найти(ПолноеИмяОбъекта) = Неопределено)
		 ИЛИ (НЕ СтрокаРеквизита.АвтоИсп И НЕ СтрокаРеквизита.Состав.Найти(ПолноеИмяОбъекта) = Неопределено) Тогда
			СтрокаМетаданных = ТаблицаМетаданных.Добавить();
			СтрокаМетаданных.КорневойТип = "ОбщиеРеквизиты";
			СтрокаМетаданных.ПолноеИмя = СтрокаРеквизита.Имя;
			СтрокаМетаданных.Имя = СтрокаРеквизита.Имя;
			СтрокаМетаданных.Тип = СтрокаРеквизита.Тип;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВсеОбщиеРеквизиты(Настройки)
	
	МетаданныеРодителя = Новый Соответствие;
	МетаданныеРодителя.Вставить("Конфигурация", Настройки.Конфигурация);
	МетаданныеРодителя.Вставить("ПолноеИмя", "ОбщийРеквизит.#All");
	
	Возврат кдМетаданные.ПолучитьТаблицуМетаданныхИзФайла(Настройки, МетаданныеРодителя, "ОбщийРеквизит");
	
КонецФункции

Функция ИмяФайлаПоМетаданным(Настройки, ПолноеИмя) Экспорт
	
	Если Найти(ПолноеИмя, ".") = 0 Тогда
		ИмяФайла = "Configuration";
	Иначе
		МассивФрагментов = ирОбщий.СтрРазделитьЛкс(ПолноеИмя);
		ИмяФайла = Настройки.КорневыеТипы.Найти(МассивФрагментов[0], "Ед").МнEng + ПолучитьРазделительПути() + МассивФрагментов[1];
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ЗаполнитьМетаданныеПоФайлу(Настройки, ИмяФайла, ПолноеИмяОбъекта) Экспорт
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("КорневойТип"); // Вид объекта - "Справочник", "Реквизит", "ТабличнаяЧасть", "ТабличнаяЧасть.<имя ТЧ>.Реквизит"
	ТаблицаМетаданных.Колонки.Добавить("ПолноеИмяРодителя"); // Метаданные родителя для подчиненных коллекций (реквизитов ТЧ, измерений, ...) - "ТабличнаяЧасть.<имя ТЧ>"
	ТаблицаМетаданных.Колонки.Добавить("ПолноеИмя"); // Полное имя - "Справочник.Валюты", "<имя реквизита>", "ТабличнаяЧасть.<имя ТЧ>", "<имя реквизита ТЧ>"
	ТаблицаМетаданных.Колонки.Добавить("Имя"); // имя - "Валюты", "<имя реквизита>", "<имя ТЧ>", "<имя реквизита ТЧ>"
	ТаблицаМетаданных.Колонки.Добавить("Тип"); // Массив типов. Элементы: для простых типов - Тип, для ссылочных - строка
	
	Разделитель = ПолучитьРазделительПути();
	
	ПолноеИмяФайла = Настройки.КаталогИсходныхФайлов + Разделитель + ИмяФайла + ".xml";
	
	ЧтениеXML = ОткрытьФайлМетаданных(ПолноеИмяФайла);
	
	Если ИмяФайла = "Configuration" Тогда
		
		Если НайтиУзел(ЧтениеXML, "ChildObjects") Тогда
			ЧтениеXML.Прочитать();
			
			СтрокаКорневогоТипа = Настройки.КорневыеТипы.Найти(ПолноеИмяОбъекта, "Ед");
			Если СтрокаКорневогоТипа <> Неопределено Тогда
				Если НайтиУзел(ЧтениеXML, СтрокаКорневогоТипа.ЕдEng) Тогда
					Пока ЭтоУзел(ЧтениеXML, СтрокаКорневогоТипа.ЕдEng) Цикл
						ИмяОбъекта = ПрочитатьЗначение(ЧтениеXML);
						КорневойТип = СтрокаКорневогоТипа.Ед;
						//ТЕСТ
						Если КорневойТип = "ОбщийМодуль" Тогда
							ИмяФайлаОбъекта = Настройки.КаталогИсходныхФайлов + Разделитель +
								СтрокаКорневогоТипа.МнEng + Разделитель + ИмяОбъекта + ".xml";
							Если ОписаниеМетаданныхОбъектаПоФайлу(ИмяФайлаОбъекта, "Global").Global Тогда
								Продолжить; // глобальные модули не добавляются в метаданные
							КонецЕсли;
						КонецЕсли;
						//ТЕСТ
						
						СтрокаМетаданных = ТаблицаМетаданных.Добавить();
						СтрокаМетаданных.КорневойТип = КорневойТип;
						СтрокаМетаданных.ПолноеИмя = КорневойТип + "." + ИмяОбъекта;
						СтрокаМетаданных.Имя = ИмяОбъекта;
						
						Если КорневойТип = "ПараметрСеанса"
						 ИЛИ КорневойТип = "ПланВидовХарактеристик"
						// ИЛИ КорневойТип = "ОпределяемыйТип"
						Тогда
							// Прочитать тип метаданных
							ИмяФайлаОбъекта = Настройки.КаталогИсходныхФайлов + Разделитель +
								СтрокаКорневогоТипа.МнEng + Разделитель + ИмяОбъекта + ".xml";
							СтрокаМетаданных.Тип = ОписаниеМетаданныхОбъектаПоФайлу(ИмяФайлаОбъекта, "Type").Type;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НайтиУзел(ЧтениеXML, "ChildObjects") Тогда
			ЧтениеXML.Прочитать();
			
			Пока НЕ ЭтоКонецУзла(ЧтениеXML, "ChildObjects") Цикл
				Если НЕ ПрочитатьAttribute(ЧтениеXML, ТаблицаМетаданных, "")
				   И НЕ ПрочитатьDimension(ЧтениеXML, ТаблицаМетаданных)
				   И НЕ ПрочитатьResource(ЧтениеXML, ТаблицаМетаданных)
				   И НЕ ПрочитатьTabularSection(ЧтениеXML, ТаблицаМетаданных, ПолноеИмяОбъекта)
				   И НЕ ПрочитатьTemplate(ЧтениеXML, ТаблицаМетаданных)
				Тогда
					ПропуститьТекущийУзел(ЧтениеXML);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МассивФрагментов = ирОбщий.СтрРазделитьЛкс(ПолноеИмяОбъекта);
		СтрокаКорневогоТипа = Настройки.КорневыеТипы.Найти(МассивФрагментов[0], "Ед");
		
		Если СтрокаКорневогоТипа.ЕстьПредопределенные Тогда
			ИмяФайлаОбъекта = Настройки.КаталогИсходныхФайлов + Разделитель +
				СтрокаКорневогоТипа.МнEng + Разделитель + МассивФрагментов[1] + Разделитель + "Ext" + Разделитель + "Predefined.xml";
			ЗагрузитьПредопределенныеЗначенияОбъектаПоФайлу(ТаблицаМетаданных, ИмяФайлаОбъекта, ПолноеИмяОбъекта);
		КонецЕсли;
		
		Если СтрокаКорневогоТипа.ЕстьОбщийРеквизит Тогда
			ДобавитьОбщиеРеквизиты(Настройки, ТаблицаМетаданных, ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Возврат ТаблицаМетаданных;
	
КонецФункции

Функция ЗаполнитьОбщиеРеквизитыПоФайлам(Настройки) Экспорт
	
	Разделитель = ПолучитьРазделительПути();
	
	ТаблицаОбщихРеквизитов = Новый ТаблицаЗначений;
	ТаблицаОбщихРеквизитов.Колонки.Добавить("Имя");
	ТаблицаОбщихРеквизитов.Колонки.Добавить("Тип");
	ТаблицаОбщихРеквизитов.Колонки.Добавить("АвтоИсп");
	ТаблицаОбщихРеквизитов.Колонки.Добавить("Состав");
	
	МетаданныеРодителя = Новый Соответствие;
	МетаданныеРодителя.Вставить("Конфигурация", Настройки.Конфигурация);
	
	СтрокаКорневогоТипа = Настройки.КорневыеТипы.Найти("ОбщийРеквизит", "Ед");
	НайденныеОбъекты = кдМетаданные.ПолучитьКоллекциюОбъектов(МетаданныеРодителя, "ОбщийРеквизит", Настройки);
	Для Каждого СтрокаКоллекции Из НайденныеОбъекты Цикл
		ИмяФайла = Настройки.КаталогИсходныхФайлов + Разделитель +
			СтрокаКорневогоТипа.МнEng + Разделитель + СтрокаКоллекции .Имя + ".xml";
		ОписаниеРеквизита = ОписаниеМетаданныхОбъектаПоФайлу(ИмяФайла, "Type,AutoUse,Content");
		
		СтрокаРеквизита = ТаблицаОбщихРеквизитов.Добавить();
		СтрокаРеквизита.Имя = СтрокаКоллекции.Имя;
		СтрокаРеквизита.Тип = ОписаниеРеквизита.Type;
		СтрокаРеквизита.АвтоИсп = ОписаниеРеквизита.AutoUse = "Use";
		СтрокаРеквизита.Состав = Новый Массив;
		
		Для Каждого ЭлементСостава Из ОписаниеРеквизита.Content Цикл
			Если (СтрокаРеквизита.АвтоИсп И ЭлементСостава["xr:Use"] = "DontUse")
			 ИЛИ (НЕ СтрокаРеквизита.АвтоИсп И ЭлементСостава["xr:Use"] = "Use") Тогда
				МассивФрагментов = ирОбщий.СтрРазделитьЛкс(ЭлементСостава["xr:Metadata"], ".");
				СтрокаКорневогоТипаСостава = Настройки.КорневыеТипы.Найти(МассивФрагментов[0], "ЕдEng");
				Если СтрокаКорневогоТипаСостава = Неопределено Тогда
					Сообщить("Не найден корневой тип элемента состава " + МассивФрагментов[0]);
				Иначе
					СтрокаРеквизита.Состав.Добавить(СтрокаКорневогоТипаСостава.Ед + "." + МассивФрагментов[1]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОбщихРеквизитов;
	
КонецФункции


