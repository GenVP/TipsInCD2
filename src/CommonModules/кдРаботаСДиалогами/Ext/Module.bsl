Функция КонтекстнаяПодсказкаДоступна() Экспорт
	
	Возврат Истина;
	
КонецФункции

//+УНИВЕРСАЛЬНАЯ ПОДМЕНА ОБРАБОТЧИКОВ

Функция ПолучитьСтруктуруПараметров(ФормаВладелец) Экспорт
	
	СтруктураПараметров = ФормаВладелец.Панель.Страницы[0].Значение;
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
		ФормаВладелец.Панель.Страницы[0].Значение = СтруктураПараметров;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметров()

Процедура УстановитьДействиеФормы(ФормаВладелец, ЭлементФормы, ИмяСобытияЭлемента, Аргументы = "") Экспорт
	
	Перем СоответствиеОбработчиков;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	Если НЕ СтруктураПараметров.Свойство("кдСоответствиеОбработчиков", СоответствиеОбработчиков) Тогда
		СоответствиеОбработчиков = Новый Соответствие;
		СтруктураПараметров.Вставить("кдСоответствиеОбработчиков", СоответствиеОбработчиков);
	КонецЕсли;
	
	ИмяСобытия = ирОбщий.ПоследнийФрагментЛкс(ИмяСобытияЭлемента,".");
	
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
		СтароеДействие = ЭлементФормы.Действие;
	Иначе
		СтароеДействие = ЭлементФормы.ПолучитьДействие(ИмяСобытия);
	КонецЕсли;
	
	НовоеДействие = Новый Действие("кд" + СтрЗаменить(ИмяСобытияЭлемента, ".", ""));
	
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
		ЭлементФормы.Действие = НовоеДействие;
	Иначе
		ЭлементФормы.УстановитьДействие(ИмяСобытия, НовоеДействие);
	КонецЕсли;
	
	Если СтароеДействие = Неопределено Тогда
		СоответствиеОбработчиков.Удалить(ИмяСобытияЭлемента);
	Иначе
		СоответствиеОбработчиков.Вставить(ИмяСобытияЭлемента, Строка(СтароеДействие) + "(" + Аргументы + ")");
	КонецЕсли;
	
КонецПроцедуры // УстановитьДействиеФормы()

Функция ПолучитьСтароеДействиеФормы(ФормаВладелец, ИмяСобытияЭлемента) Экспорт
	
	Перем СоответствиеОбработчиков;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	Если СтруктураПараметров.Свойство("кдСоответствиеОбработчиков", СоответствиеОбработчиков) Тогда
		СтарыйОбработчик = СоответствиеОбработчиков[ИмяСобытияЭлемента];
		Если СтарыйОбработчик <> Неопределено Тогда
			Возврат СтарыйОбработчик;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьСтароеДействиеФормы()

//-УНИВЕРСАЛЬНАЯ ПОДМЕНА ОБРАБОТЧИКОВ

Функция ПолучитьСтруктуруКонфигурации(ФормаВладелец, ИмяЭкземпляра, Конфигурация)
	
	Если Конфигурация = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураКонфигурации = Новый Структура("Конфигурация,ОбработкаОбъект,ТаблицаЛокальногоКонтекста");
	СтруктураКонфигурации.Конфигурация   = Конфигурация;
	
	СтруктураКонфигурации.ОбработкаОбъект = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	СтруктураКонфигурации.ОбработкаОбъект.кдИнициализировать(ИмяЭкземпляра, Конфигурация, ФормаВладелец);
	
	Возврат СтруктураКонфигурации;
	
КонецФункции // ПолучитьСтруктуруКонфигурации()

Процедура ИнициализацияТаблицыЭкземпляров(ФормаВладелец, КонфигурацияИсточник, КонфигурацияПриемник = Неопределено, КонвертацияСсылка = Неопределено) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	СтруктураПараметров.Вставить("Источник", ПолучитьСтруктуруКонфигурации(ФормаВладелец, "Источник", КонфигурацияИсточник));
	СтруктураПараметров.Вставить("Приемник", ПолучитьСтруктуруКонфигурации(ФормаВладелец, "Приемник", КонфигурацияПриемник));
	
	ЗаполнитьТаблицуЛокальногоКонтекстаКонвертации(ФормаВладелец, КонвертацияСсылка);
	
	ТаблицаЭкземпляров = Новый ТаблицаЗначений;
	ТаблицаЭкземпляров.Колонки.Добавить("ИмяСобытия");
	ТаблицаЭкземпляров.Колонки.Добавить("ИмяНадписьИмяОбработчика");
	ТаблицаЭкземпляров.Колонки.Добавить("ИмяПолеВводаИмяОбработчика");
	ТаблицаЭкземпляров.Колонки.Добавить("ВидЭкземпляра");
	ТаблицаЭкземпляров.Колонки.Добавить("КоманднаяПанель");
	ТаблицаЭкземпляров.Колонки.Добавить("ПолеТекстовогоДокумента");
	ТаблицаЭкземпляров.Колонки.Добавить("ТаблицаЛокальногоКонтекста");
	
	ТаблицаЭкземпляров.Индексы.Добавить("ВидЭкземпляра");
	
	СтруктураПараметров.Вставить("ТаблицаЭкземпляров", ТаблицаЭкземпляров);
	СтруктураПараметров.Вставить("ТекущийЭкземпляр"  , Неопределено);
	
КонецПроцедуры // ИнициализацияТаблицыЭкземпляров()

Процедура ДобавитьЭкземплярВТаблицу(ФормаВладелец, ИмяСобытия, ВидЭкземпляра, ИмяНадписьИмяОбработчика = Неопределено, ИмяПолеВводаИмяОбработчика = Неопределено) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	Экземпляр = СтруктураПараметров.ТаблицаЭкземпляров.Добавить();
	Экземпляр.ИмяСобытия    = ИмяСобытия;
	Экземпляр.ИмяНадписьИмяОбработчика = ?(ИмяНадписьИмяОбработчика = Неопределено, СтрЗаменить(ИмяСобытия, "Алгоритм", "НадписьИмяОбработчика"), ИмяНадписьИмяОбработчика);
	Экземпляр.ИмяПолеВводаИмяОбработчика = ?(ИмяПолеВводаИмяОбработчика = Неопределено, СтрЗаменить(ИмяСобытия, "Алгоритм", "ИмяОбработчика"), ИмяПолеВводаИмяОбработчика);
	Экземпляр.ВидЭкземпляра = ВидЭкземпляра;
	
КонецПроцедуры // ДобавитьЭкземплярВТаблицу()

Процедура ПриИзмененииЭкземпляраКонтекстнойПодсказки(ФормаВладелец, НовыйЭкземпляр) Экспорт
	
	Перем ТекущийЭкземпляр;
	
	Если НовыйЭкземпляр = Неопределено Тогда
		// Смена страницы панели до инициализации экземпляров на форме
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	Если НЕ СтруктураПараметров.Свойство("ТекущийЭкземпляр", ТекущийЭкземпляр) Тогда
		// Текущий экземпляр устанавливается после инициализации на форме
		ТекущийЭкземпляр = Неопределено;
	КонецЕсли;
	
	НоваяСтруктураКонфигурации = СтруктураПараметров[НовыйЭкземпляр.ВидЭкземпляра];
	НоваяОбработкаОбъект       = НоваяСтруктураКонфигурации.ОбработкаОбъект;
	
	Если ТекущийЭкземпляр <> НовыйЭкземпляр Тогда
		
		// Данная процедура устанавливает сочетания клавиш у кнопок командной панели
		// на текущей странице, а на предыдущей сбрасывает. Т.к. программой стандартно
		// обрабатываются сочетания клавиш первыми установленными на форме
		
		Если ТекущийЭкземпляр <> Неопределено Тогда
			
			// Сброс сочетания клавиш у панели предыдущего экземпляра
			КнопкиКоманднойПанели = ТекущийЭкземпляр.КоманднаяПанель.Кнопки;
			ПустоеСочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
			Для Каждого Кнопка Из КнопкиКоманднойПанели Цикл
				Если Кнопка.СочетаниеКлавиш <> Неопределено Тогда
					Кнопка.СочетаниеКлавиш = ПустоеСочетаниеКлавиш;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НовыйЭкземпляр.КоманднаяПанель.Доступность Тогда
			
			// Установка сочетания клавиш у панели для нового экземпляра по макетам кнопок
			ФормаКласса = ирКэш.Получить().ПолучитьМакетКомпоненты(НоваяОбработкаОбъект);
			
			КнопкиМакета = ФормаКласса.ЭлементыФормы.КоманднаяПанель0.Кнопки;
			ЗаполнитьСочетанияКлавишКнопок(НоваяОбработкаОбъект, НовыйЭкземпляр.КоманднаяПанель, КнопкиМакета);
			
			КнопкиМакета = ФормаКласса.ЭлементыФормы.КоманднаяПанельОбщая.Кнопки;
			ЗаполнитьСочетанияКлавишКнопок(НоваяОбработкаОбъект, НовыйЭкземпляр.КоманднаяПанель, КнопкиМакета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяОбработкаОбъект.КоманднаяПанель         = НовыйЭкземпляр.КоманднаяПанель;
	НоваяОбработкаОбъект.ПолеТекстовогоДокумента = НовыйЭкземпляр.ПолеТекстовогоДокумента;
	НоваяОбработкаОбъект.ПолеТекстовогоДокумента.КонтекстноеМеню = НовыйЭкземпляр.КоманднаяПанель;
	
	Если НовыйЭкземпляр.ТаблицаЛокальногоКонтекста <> Неопределено Тогда
		УстановитьТаблицуЛокальногоКонтекста(НоваяСтруктураКонфигурации.ОбработкаОбъект, НовыйЭкземпляр.ТаблицаЛокальногоКонтекста);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТекущийЭкземпляр", НовыйЭкземпляр)
	
КонецПроцедуры // ПриИзмененииЭкземпляраКонтекстнойПодсказки()

Процедура УничтожитьКонтекстнуюПодсказкуНаФорме(ФормаВладелец) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	СтруктураКонфигурацииИсточник = СтруктураПараметров.Источник;
	СтруктураКонфигурацииПриемник = СтруктураПараметров.Приемник;
	
	Если СтруктураКонфигурацииИсточник <> Неопределено Тогда
		СтруктураКонфигурацииИсточник.ОбработкаОбъект.Уничтожить();
		СтруктураКонфигурацииИсточник.ОбработкаОбъект = Неопределено;
	КонецЕсли;
	Если СтруктураКонфигурацииПриемник <> Неопределено Тогда
		СтруктураКонфигурацииПриемник.ОбработкаОбъект.Уничтожить();
		СтруктураКонфигурацииПриемник.ОбработкаОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущийЭкземплярОбработки(ФормаВладелец) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	СтруктураКонфигурации = СтруктураПараметров[СтруктураПараметров.ТекущийЭкземпляр.ВидЭкземпляра];
	
	Возврат СтруктураКонфигурации.ОбработкаОбъект;
	
КонецФункции // ПолучитьТекущийЭкземплярОбработки()

Процедура ИнициализироватьКонтекстнуюПодсказкуНаФорме(ФормаВладелец, ПанельАлгоритмы) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	ПустоеСочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
	СтараяТекущаяСтраница = ПанельАлгоритмы.ТекущаяСтраница;
	
	Для Каждого Экземпляр Из СтруктураПараметров.ТаблицаЭкземпляров Цикл
		
		СтруктураКонфигурации = СтруктураПараметров[Экземпляр.ВидЭкземпляра];
		ОбработкаОбъект       = СтруктураКонфигурации.ОбработкаОбъект;
		ИмяСобытия            = Экземпляр.ИмяСобытия;
		
		ПанельАлгоритмы.ТекущаяСтраница = ПанельАлгоритмы.Страницы[ИмяСобытия];
		
		Если Экземпляр.КоманднаяПанель = Неопределено Тогда
			
			// Создание командной панели
			
			Экземпляр.КоманднаяПанель = ФормаВладелец.ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "КоманднаяПанель" + ИмяСобытия, Ложь, ПанельАлгоритмы);
			
			Если Экземпляр.ПолеТекстовогоДокумента = Неопределено Тогда
				Экземпляр.ПолеТекстовогоДокумента = ФормаВладелец.ЭлементыФормы[ИмяСобытия];
				//Экземпляр.ПолеТекстовогоДокумента.КонтекстноеМеню = Экземпляр.КоманднаяПанель;
			КонецЕсли;
			
			ТекПолеТекстовогоДокумента = Экземпляр.ПолеТекстовогоДокумента;
			ТекКоманднаяПанель         = Экземпляр.КоманднаяПанель;
			
			// Создание кнопок на командной панели
			
			ФормаКласса = ирКэш.Получить().ПолучитьМакетКомпоненты(ОбработкаОбъект);
			КнопкиМакета = ФормаКласса.ЭлементыФормы.КоманднаяПанель0.Кнопки;
			ирОбщий.ДобавитьКнопкиКоманднойПанелиКомпонентыЛкс(ОбработкаОбъект, КнопкиМакета, ТекКоманднаяПанель);
			
			КнопкиМакета = ФормаКласса.ЭлементыФормы.КоманднаяПанельОбщая.Кнопки;
			ирОбщий.ДобавитьКнопкиКоманднойПанелиКомпонентыЛкс(ОбработкаОбъект, КнопкиМакета, ТекКоманднаяПанель);
			
			// Удаление кнопок с командной панели, которые невозможно использовать
			
			УдаляемыеКнопки = ирОбщий.БыстрыйМассивЛкс("Выполнить","КонструкторЗапросов");
			
			КнопкиКоманднойПанели = ТекКоманднаяПанель.Кнопки;
			Для Каждого ИмяКнопки Из УдаляемыеКнопки Цикл
				КнопкаКоменднойпанели = КнопкиКоманднойПанели.Найти(ирОбщий.СформироватьИмяЭлементаУправленияЭкземпляраЛкс(ОбработкаОбъект, ИмяКнопки));
				Если КнопкаКоменднойПанели <> Неопределено Тогда
					КнопкиКоманднойПанели.Удалить(КнопкаКоменднойпанели);
				КонецЕсли;
			КонецЦикла;
			
			// Очистка сочетания клавиш у всех командных панелей контекстной подсказки. Сочетания клавиш
			// текущей командной панели будут устанавливаться при смене экземпляра. Иначе будут всегда
			// использоваться сочетания клавиш у первой добавленной и существующей панели (фича ?!)
			Для Каждого Кнопка Из ТекКоманднаяПанель.Кнопки Цикл
				Если Кнопка.СочетаниеКлавиш <> Неопределено Тогда
					Кнопка.СочетаниеКлавиш = ПустоеСочетаниеКлавиш;
				КонецЕсли;
			КонецЦикла;
			
			ЭлементНадпись = ФормаВладелец.ЭлементыФормы[Экземпляр.ИмяНадписьИмяОбработчика];
			ЭлементПолеВвода = ФормаВладелец.ЭлементыФормы[Экземпляр.ИмяПолеВводаИмяОбработчика];
			
			ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаВладелец.Панель, ГраницаЭлементаУправления.Низ, Неопределено, Неопределено);
			ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементНадпись, ГраницаЭлементаУправления.Верх, Неопределено, Неопределено);
			ЭлементПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаВладелец.Панель, ГраницаЭлементаУправления.Низ, Неопределено, Неопределено);
			ЭлементПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементПолеВвода, ГраницаЭлементаУправления.Верх, Неопределено, Неопределено);
			
			// Уменьшение высоты поля текстового документа для коммандной панели
			ТекПолеТекстовогоДокумента.Высота = ТекПолеТекстовогоДокумента.Высота - 28;
			
			// Размещение командной панели под текстовым документом
			ТекКоманднаяПанель.ПрозрачныйФон = Истина;
			ТекКоманднаяПанель.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
			//ТекКоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право; // глючит прорисовка панели при переключении страниц на 8.2.17.517
			ТекКоманднаяПанель.Видимость = Истина;
			
			ТекКоманднаяПанель.Лево   = ТекПолеТекстовогоДокумента.Лево;
			ТекКоманднаяПанель.Верх   = ТекПолеТекстовогоДокумента.Верх + ТекПолеТекстовогоДокумента.Высота + 2;
			ТекКоманднаяПанель.Ширина = ТекПолеТекстовогоДокумента.Ширина;
			
			ТекКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаВладелец.Панель, ГраницаЭлементаУправления.Низ, Неопределено, Неопределено);
			ТекКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ  , ТекКоманднаяПанель  , ГраницаЭлементаУправления.Верх , Неопределено, Неопределено);
			ТекКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаВладелец.Панель, ГраницаЭлементаУправления.Право, Неопределено, Неопределено);
			ТекПолеТекстовогоДокумента.УстановитьПривязку(ГраницаЭлементаУправления.Низ , ТекКоманднаяПанель, ГраницаЭлементаУправления.Верх  , Неопределено, Неопределено);
			
		КонецЕсли;
		
		// Сохранение экземпляра обработки в дополнительном значении страницы
		ПанельАлгоритмы.ТекущаяСтраница.Значение = Экземпляр;
		
		Если СтруктураКонфигурации.Конфигурация = Неопределено Тогда
			// Контекстная подсказка доступна только для поддерживаемых конфигураций
			ТекКоманднаяПанель.Доступность = Ложь;
		Иначе
			// Заполнение и сохранение таблицы локального контекста текущего экземпляра
			УстановитьТаблицуЛокальногоКонтекста(ОбработкаОбъект, СтруктураКонфигурации.ТаблицаЛокальногоКонтекста);
			ФормаВладелец.кдОбновитьЛокальныйКонтекст(СтруктураКонфигурации, Экземпляр);
			Экземпляр.ТаблицаЛокальногоКонтекста = ПолучитьТаблицуЛокальногоКонтекста(ОбработкаОбъект);
			ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
		КонецЕсли;
		
	КонецЦикла;
	
	// Переключение на страницу панели алгоритмов, которая была текущей
	// вначале чтобы заполнить таблицу локального контекста для неё
	ПанельАлгоритмы.ТекущаяСтраница = СтараяТекущаяСтраница;
	
КонецПроцедуры // ИнициализироватьКонтекстнуюПодсказкуНаФорме()

Процедура ИнициализироватьКонтекстнуюПодсказкуНаФормеДляАлгоритмов(ФормаВладелец, ПолеТекстовогоДокумента, ТекущийВидЭкземпляра) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	ПустоеСочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
	
	ТекКоманднаяПанель = Неопределено;
	
	Для Каждого Экземпляр Из СтруктураПараметров.ТаблицаЭкземпляров Цикл
		
		СтруктураКонфигурации = СтруктураПараметров[Экземпляр.ВидЭкземпляра];
		ОбработкаОбъект       = СтруктураКонфигурации.ОбработкаОбъект;
		ИмяСобытия            = Экземпляр.ИмяСобытия;
		
		Если Экземпляр.КоманднаяПанель = Неопределено Тогда
			
			// Создание командной панели
			
			Экземпляр.КоманднаяПанель = ФормаВладелец.ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "КоманднаяПанель" + ИмяСобытия, Ложь);
			Экземпляр.ПолеТекстовогоДокумента = ПолеТекстовогоДокумента;
			
			ТекПолеТекстовогоДокумента = Экземпляр.ПолеТекстовогоДокумента;
			ТекКоманднаяПанель         = Экземпляр.КоманднаяПанель;
			
			// Создание кнопок на командной панели
			
			ФормаКласса = ирКэш.Получить().ПолучитьМакетКомпоненты(ОбработкаОбъект);
			КнопкиМакета = ФормаКласса.ЭлементыФормы.КоманднаяПанель0.Кнопки;
			ирОбщий.ДобавитьКнопкиКоманднойПанелиКомпонентыЛкс(ОбработкаОбъект, КнопкиМакета, ТекКоманднаяПанель);
			
			КнопкиМакета = ФормаКласса.ЭлементыФормы.КоманднаяПанельОбщая.Кнопки;
			ирОбщий.ДобавитьКнопкиКоманднойПанелиКомпонентыЛкс(ОбработкаОбъект, КнопкиМакета, ТекКоманднаяПанель);
			
			// Удаление кнопок с командной панели, которые невозможно использовать
			
			УдаляемыеКнопки = ирОбщий.БыстрыйМассивЛкс("Выполнить","КонструкторЗапросов");
			
			КнопкиКоманднойПанели = ТекКоманднаяПанель.Кнопки;
			Для Каждого ИмяКнопки Из УдаляемыеКнопки Цикл
				КнопкаКоменднойпанели = КнопкиКоманднойПанели.Найти(ирОбщий.СформироватьИмяЭлементаУправленияЭкземпляраЛкс(ОбработкаОбъект, ИмяКнопки));
				Если КнопкаКоменднойПанели <> Неопределено Тогда
					КнопкиКоманднойПанели.Удалить(КнопкаКоменднойпанели);
				КонецЕсли;
			КонецЦикла;
			
			// Очистка сочетания клавиш у всех командных панелей контекстной подсказки. Сочетания клавиш
			// текущей командной панели будут устанавливаться при смене экземпляра. Иначе будут всегда
			// использоваться сочетания клавиш у первой добавленной и существующей панели (фича ?!)
			Для Каждого Кнопка Из ТекКоманднаяПанель.Кнопки Цикл
				Если Кнопка.СочетаниеКлавиш <> Неопределено Тогда
					Кнопка.СочетаниеКлавиш = ПустоеСочетаниеКлавиш;
				КонецЕсли;
			КонецЦикла;
			
			// Размещение командной панели под полем текстового документа
			
			ТекКоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право;
			ТекКоманднаяПанель.Видимость = Истина;
			ТекКоманднаяПанель.ПрозрачныйФон = Истина;
			
			ТекКоманднаяПанель.Лево   = ТекПолеТекстовогоДокумента.Лево;
			ТекКоманднаяПанель.Ширина = ТекПолеТекстовогоДокумента.Ширина;
			ТекКоманднаяПанель.Верх   = ТекПолеТекстовогоДокумента.Верх + ТекПолеТекстовогоДокумента.Высота - ТекКоманднаяПанель.Высота - 2;
			
			ТекКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх , ФормаВладелец.Панель, ГраницаЭлементаУправления.Низ  , Неопределено, Неопределено);
			ТекКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаВладелец.Панель, ГраницаЭлементаУправления.Право, Неопределено, Неопределено);
			ТекКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ  , ТекКоманднаяПанель  , ГраницаЭлементаУправления.Верх , Неопределено, Неопределено);
			
			ТекКоманднаяПанель.Видимость = Ложь;
		КонецЕсли;
		
		Если СтруктураКонфигурации.Конфигурация = Неопределено Тогда
			// Контекстная подсказка доступна только для поддерживаемых конфигураций
			ТекКоманднаяПанель.Доступность = Ложь;
		Иначе
			// Заполнение и сохранение таблицы локального контекста текущего экземпляра
			УстановитьТаблицуЛокальногоКонтекста(ОбработкаОбъект, СтруктураКонфигурации.ТаблицаЛокальногоКонтекста);
			ФормаВладелец.кдОбновитьЛокальныйКонтекст(СтруктураКонфигурации, Экземпляр);
			Экземпляр.ТаблицаЛокальногоКонтекста = ПолучитьТаблицуЛокальногоКонтекста(ОбработкаОбъект);
			ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
		КонецЕсли;
		
	КонецЦикла;
	
	// Уменьшение высоты поля текстового документа
	Если ТекКоманднаяПанель <> Неопределено Тогда
		ТекПолеТекстовогоДокумента.Высота = ТекПолеТекстовогоДокумента.Высота - ТекКоманднаяПанель.Высота - 3;
	КонецЕсли;
	
	// Переключение на страницу панели алгоритмов, которая была текущей
	// вначале чтобы заполнить таблицу локального контекста для неё
	ПриИзмененииЭкземпляраКонтекстнойПодсказкиДляАлгоритмов(ФормаВладелец, ТекущийВидЭкземпляра);
	
КонецПроцедуры // ИнициализироватьКонтекстнуюПодсказкуНаФормеДляАлгоритмов()

Процедура ЗаполнитьСочетанияКлавишКнопок(ОбработкаОбъект, КоманднаяПанель, КнопкиМакета)
	
	КнопкиКоманднойПанели = КоманднаяПанель.Кнопки;
	
	Для Каждого КнопкаМакета Из КнопкиМакета Цикл
		Если КнопкаМакета.СочетаниеКлавиш <> Неопределено Тогда
			ИмяКнопки = ирОбщий.СформироватьИмяЭлементаУправленияЭкземпляраЛкс(ОбработкаОбъект, КнопкаМакета.Имя);
			Кнопка = КнопкиКоманднойПанели.Найти(ИмяКнопки);
			Если Кнопка <> Неопределено Тогда
				Кнопка.СочетаниеКлавиш = КнопкаМакета.СочетаниеКлавиш
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииКонфигурацииЭкземпляров(ФормаВладелец, ВидЭкземпляра, НоваяКонфигурация, КонвертацияСсылка) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	СтруктураКонфигурации = СтруктураПараметров[ВидЭкземпляра];
	СтруктураКонфигурации.Конфигурация = НоваяКонфигурация;
	
	Если СтруктураКонфигурации.Конфигурация = НоваяКонфигурация Тогда
		// Изменение метаданных не произошло. Значит не требуется
		// обновлять обработку и таблицы локального контекста экземпляров
		Возврат;
	КонецЕсли;
	
	СтруктураКонфигурации.ОбработкаОбъект.кдИнициализировать(ВидЭкземпляра, НоваяКонфигурация, ФормаВладелец);
	
	ЗаполнитьТаблицуЛокальногоКонтекстаКонвертации(ФормаВладелец, КонвертацияСсылка, ВидЭкземпляра);
	
	ОбновитьКонтекстнуюПодсказкуНаФорме(ФормаВладелец, ВидЭкземпляра);
	
КонецПроцедуры // ПриИзмененииКонфигурацииЭкземпляров()

Процедура ПриИзмененииЭкземпляраКонтекстнойПодсказкиДляАлгоритмов(ФормаВладелец, НовыйВидЭкземпляра) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	ТаблицаЭкземпляров = СтруктураПараметров.ТаблицаЭкземпляров;
	ТекущийЭкземпляр   = СтруктураПараметров.ТекущийЭкземпляр;
	
	НовыйЭкземпляр = ТаблицаЭкземпляров.Найти(НовыйВидЭкземпляра, "ВидЭкземпляра");
	
	кдРаботаСДиалогами.ПриИзмененииЭкземпляраКонтекстнойПодсказки(ФормаВладелец, НовыйЭкземпляр);
	
	Если ТекущийЭкземпляр <> Неопределено Тогда
		ТекущийЭкземпляр.КоманднаяПанель.Видимость = Ложь;
	КонецЕсли;
	НовыйЭкземпляр.КоманднаяПанель.Видимость = Истина;
	
КонецПроцедуры // ПриИзмененииЭкземпляраКонтекстнойПодсказки()

Процедура ОбновитьКонтекстнуюПодсказкуНаФорме(ФормаВладелец, ВидЭкземпляра) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	СтруктураКонфигурации = СтруктураПараметров[ВидЭкземпляра];
	ОбработкаОбъект = СтруктураКонфигурации.ОбработкаОбъект;
	
	ИзмененныеЭкземпляры = СтруктураПараметров.ТаблицаЭкземпляров.НайтиСтроки(Новый Структура("ВидЭкземпляра", ВидЭкземпляра));
	Для Каждого Экземпляр Из ИзмененныеЭкземпляры Цикл
		
		Если СтруктураКонфигурации.Конфигурация = Неопределено Тогда
			// Контекстная подсказка доступна только для поддерживаемых конфигураций
			Экземпляр.КоманднаяПанель.Доступность = Ложь;
			Экземпляр.ТаблицаЛокальногоКонтекста = Неопределено;
		Иначе
			Экземпляр.КоманднаяПанель.Доступность = Истина;
			// Заполнение и сохранение таблицы локального контекста текущего экземпляра
			УстановитьТаблицуЛокальногоКонтекста(ОбработкаОбъект, СтруктураКонфигурации.ТаблицаЛокальногоКонтекста);
			ФормаВладелец.кдОбновитьЛокальныйКонтекст(СтруктураКонфигурации, Экземпляр);
			Экземпляр.ТаблицаЛокальногоКонтекста = ПолучитьТаблицуЛокальногоКонтекста(ОбработкаОбъект);
			ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
		КонецЕсли;
		
	КонецЦикла;
	
	ПриИзмененииЭкземпляраКонтекстнойПодсказки(ФормаВладелец, СтруктураПараметров.ТекущийЭкземпляр);
	
КонецПроцедуры // ОбновитьКонтекстнуюПодсказкуНаФорме()

Процедура ДобавитьСловоЛокальногоКонтекстаКонвертации(СтруктураКонфигурацииИсточник, СтруктураКонфигурацииПриемник, ИмяГруппы, РезультатЗапроса)
	
	СтруктураИсточник = Новый Структура;
	СтруктураПриемник = Новый Структура;
	
	ИзменятьИсточник = СтруктураКонфигурацииИсточник <> Неопределено И СтруктураКонфигурацииИсточник.Конфигурация <> Неопределено;
	ИзменятьПриемник = СтруктураКонфигурацииПриемник <> Неопределено И СтруктураКонфигурацииПриемник.Конфигурация <> Неопределено;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ИзменятьИсточник И Выборка.ИспользуетсяПриВыгрузке Тогда
			//СтруктураИсточник.Вставить(Выборка.Имя, кдМетаданные.ПреобразоватьТипКД(Выборка.ТипПриВыгрузке, СтруктураКонфигурацииИсточник.КонфигурацияМД));
			СтруктураИсточник.Вставить(Выборка.Имя, Неопределено);
		КонецЕсли;
		Если ИзменятьПриемник И Выборка.ИспользуетсяПриЗагрузке Тогда
			//СтруктураПриемник.Вставить(Выборка.Имя, кдМетаданные.ПреобразоватьТипКД(Выборка.ТипПриЗагрузке, СтруктураКонфигурацииПриемник.КонфигурацияМД));
			СтруктураПриемник.Вставить(Выборка.Имя, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзменятьИсточник Тогда
		СтруктураКонфигурацииИсточник.ОбработкаОбъект.ДобавитьСловоЛокальногоКонтекста(ИмяГруппы, "Свойство", Новый ОписаниеТипов("Структура"), СтруктураИсточник);
	КонецЕсли;
	Если ИзменятьПриемник Тогда
		СтруктураКонфигурацииПриемник.ОбработкаОбъект.ДобавитьСловоЛокальногоКонтекста(ИмяГруппы, "Свойство", Новый ОписаниеТипов("Структура"), СтруктураПриемник);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСловоЛокальногоКонтекстаКонвертации()

Процедура ЗаполнитьТаблицуЛокальногоКонтекстаКонвертации(ФормаВладелец, КонвертацияСсылка, ВидЭкземпляра = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КонвертацияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(ФормаВладелец);
	
	СтруктураКонфигурацииИсточник = ?(ВидЭкземпляра = Неопределено ИЛИ ВидЭкземпляра = "Источник", СтруктураПараметров.Источник, Неопределено);
	СтруктураКонфигурацииПриемник = ?(ВидЭкземпляра = Неопределено ИЛИ ВидЭкземпляра = "Приемник", СтруктураПараметров.Приемник, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Параметры.Код КАК Имя,
	|	Параметры.ТипОбъекта КАК ТипПриВыгрузке,
	|	ЕСТЬNULL(Параметры.ПравилоКонвертации.Приемник, НЕОПРЕДЕЛЕНО) КАК ТипПриЗагрузке,
	|	ВЫБОР
	|		КОГДА (НЕ Параметры.ИспользуетсяПриЗагрузке)
	|				ИЛИ Параметры.ПередаватьПараметрПриВыгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяПриВыгрузке,
	|	ВЫБОР
	|		КОГДА Параметры.ИспользуетсяПриЗагрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяПриЗагрузке
	|ИЗ
	|	Справочник.Параметры КАК Параметры
	|ГДЕ
	|	Параметры.Владелец = &Конвертация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Алгоритмы.Код КАК Имя,
	|	ВЫБОР
	|		КОГДА Алгоритмы.ИспользуетсяПриЗагрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяПриЗагрузке,
	|	ВЫБОР
	|		КОГДА Алгоритмы.ИспользуетсяПриЗагрузке
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользуетсяПриВыгрузке,
	|	""Строка"" КАК ТипПриВыгрузке,
	|	""Строка"" КАК ТипПриЗагрузке
	|ИЗ
	|	Справочник.Алгоритмы КАК Алгоритмы
	|ГДЕ
	|	Алгоритмы.Владелец = &Конвертация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запросы.Код КАК Имя,
	|	ВЫБОР
	|		КОГДА Запросы.ИспользуетсяПриЗагрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяПриЗагрузке,
	|	ВЫБОР
	|		КОГДА Запросы.ИспользуетсяПриЗагрузке
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользуетсяПриВыгрузке,
	|	""Запрос"" КАК ТипПриВыгрузке,
	|	""Запрос"" КАК ТипПриЗагрузке
	|ИЗ
	|	Справочник.Запросы КАК Запросы
	|ГДЕ
	|	Запросы.Владелец = &Конвертация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработки.Код КАК Имя,
	|	ВЫБОР
	|		КОГДА Обработки.ИспользуетсяПриЗагрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяПриЗагрузке,
	|	ВЫБОР
	|		КОГДА Обработки.ИспользуетсяПриВыгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяПриВыгрузке,
	|	НЕОПРЕДЕЛЕНО КАК ТипПриВыгрузке,
	|	НЕОПРЕДЕЛЕНО КАК ТипПриЗагрузке
	|ИЗ
	|	Справочник.Обработки КАК Обработки
	|ГДЕ
	|	Обработки.Владелец = &Конвертация";
	
	Запрос.УстановитьПараметр("Конвертация", КонвертацияСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если СтруктураКонфигурацииИсточник <> Неопределено Тогда
		СтруктураКонфигурацииИсточник.ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
	КонецЕсли;
	Если СтруктураКонфигурацииПриемник <> Неопределено Тогда
		СтруктураКонфигурацииПриемник.ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
	КонецЕсли;
	
	// Заполнение таблиц локального контекста конфигураций источника и приемника
	ДобавитьСловоЛокальногоКонтекстаКонвертации(СтруктураКонфигурацииИсточник, СтруктураКонфигурацииПриемник, "Параметры"   , Результат[0]);
	ДобавитьСловоЛокальногоКонтекстаКонвертации(СтруктураКонфигурацииИсточник, СтруктураКонфигурацииПриемник, "Алгоритмы"   , Результат[1]);
	ДобавитьСловоЛокальногоКонтекстаКонвертации(СтруктураКонфигурацииИсточник, СтруктураКонфигурацииПриемник, "Запросы"     , Результат[2]);
	ДобавитьСловоЛокальногоКонтекстаКонвертации(СтруктураКонфигурацииИсточник, СтруктураКонфигурацииПриемник, "ДопОбработки", Результат[3]);
	
	// Сохранение таблиц локального контекста источника и приемника
	Если СтруктураКонфигурацииИсточник <> Неопределено Тогда
		СтруктураКонфигурацииИсточник.ТаблицаЛокальногоКонтекста = ПолучитьТаблицуЛокальногоКонтекста(СтруктураКонфигурацииИсточник.ОбработкаОбъект);
		СтруктураКонфигурацииИсточник.ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
	КонецЕсли;
	Если СтруктураКонфигурацииПриемник <> Неопределено Тогда
		СтруктураКонфигурацииПриемник.ТаблицаЛокальногоКонтекста = ПолучитьТаблицуЛокальногоКонтекста(СтруктураКонфигурацииПриемник.ОбработкаОбъект);
		СтруктураКонфигурацииПриемник.ОбработкаОбъект.ОчиститьТаблицуСловЛокальногоКонтекста();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуЛокальногоКонтекстаПоКонвертации()

Процедура ВыборКаталога(Элемент, ПроверятьСуществование = Ложь) Экспорт
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок                   = "Выберите каталог";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // ВыборКаталога()

Функция ПолучитьТаблицуЛокальногоКонтекста(ОбработкаОбъект)
	
	Если ОбработкаОбъект.ТаблицаЛокальногоКонтекста.Количество() = 0 Тогда
		ТаблицаРезультат = Неопределено;
	Иначе
		ТаблицаРезультат = ОбработкаОбъект.ТаблицаЛокальногоКонтекста.Скопировать();
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ПолучитьТаблицуЛокальногоКонтекста()

Процедура УстановитьТаблицуЛокальногоКонтекста(ОбработкаОбъект, НоваяТаблицаЛокальногоКонтекста)
	
	Если НоваяТаблицаЛокальногоКонтекста = Неопределено Тогда
		ОбработкаОбъект.ТаблицаЛокальногоКонтекста.Очистить();
	Иначе
		ОбработкаОбъект.ТаблицаЛокальногоКонтекста = НоваяТаблицаЛокальногоКонтекста.Скопировать();
	КонецЕсли;
	
КонецПроцедуры // УстановитьТаблицуЛокальногоКонтекста()

Процедура ДобавитьСвойствоЛокальногоКонтекстаПоЗначению(СтруктураКонфигурации, ИмяСлова, ТипСлова, ОбщийТип) Экспорт
	
	Если ТипСлова.Пустая() Тогда
		
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Объекты.Имя,
		|	Объекты.Тип
		|ИЗ
		|	Справочник.Объекты КАК Объекты
		|ГДЕ
		|	Объекты.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ТипСлова);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Индекс = Перечисления.ТипыОбъектов.Индекс(Выборка.Тип);
			КорневойТип = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[Индекс].Имя;
			СтрокаОбщегоТипа = ирКэш.Получить().ТаблицаОбщихТипов.Найти(КорневойТип + ОбщийТип, "БазовыйТип");
			Если СтрокаОбщегоТипа = Неопределено Тогда
				// Это простой тип
				СтруктураКонфигурации.ОбработкаОбъект.ДобавитьСловоЛокальногоКонтекста(ИмяСлова, "Свойство", Новый ОписаниеТипов(КорневойТип));
			Иначе
				пМетаданные = Новый Соответствие;
				пМетаданные.Вставить("Конфигурация", СтруктураКонфигурации.Конфигурация);
				пМетаданные.Вставить("ПолноеИмя", КорневойТип + "." + Выборка.Имя);
				
				СтруктураКонфигурации.ОбработкаОбъект.ДобавитьСловоЛокальногоКонтекста(ИмяСлова, "Свойство", Неопределено, пМетаданные , , , , СтрокаОбщегоТипа.Слово);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

