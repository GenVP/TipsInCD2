
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		
		// проверим правильность заполнения шапки элемента
		Заголовок = ПредставлениеОбъектаПриЗаписи(ЭтотОбъект);
		
		// структура реквизитов для проверки заполнения
		СтруктураОбязательныхПолей = Новый Структура("ОбъектНастройки");
		
		// вызываем общую процедуру проверки заполнения шапки элемента
		ПроверитьЗаполнениеРеквизитовШапкиОбъекта(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// если наименование не заполнено, то получаем значение по умолчанию
		Если ПустаяСтрока(Наименование) Тогда
			
			Наименование = глНаименованиеПРО(ЭтотОбъект);
			
		КонецЕсли;
		
		// определяем группу элемента по умолчанию
		Если Родитель.Пустая() Тогда
			
			УстановитьГруппуПоУмолчаниюДляПРО(ЭтотОбъект);
			
		КонецЕсли;
		
		// ОПРЕДЕЛЯЕМ ПРИЗНАК ВАЛИДНОСТИ ПРАВИЛА
		
		// поля для проверки правила на валидность
		МассивПолей = Новый Массив;
		МассивПолей.Добавить("СвойствоОбъекта");
		МассивПолей.Добавить("СвойствоПланаОбмена");
		МассивПолей.Добавить("ВидСравнения");
		МассивПолей.Добавить("ТипСвойстваОбъекта");
		
		// получаем признак валидности ПРОП
		Валидное1 = ПолучитьПризнакВалидностиПравила(ОтборПоСвойствамПланаОбмена.Получить(), МассивПолей);
		
		// поля для проверки правила на валидность
		МассивПолей = Новый Массив;
		МассивПолей.Добавить("СвойствоОбъекта");
		МассивПолей.Добавить("ЗначениеКонстанты");
		МассивПолей.Добавить("ВидСравнения");
		МассивПолей.Добавить("ТипСвойстваОбъекта");
		
		// получаем признак валидности ПРОБ
		Валидное2 = ПолучитьПризнакВалидностиПравила(ОтборПоСвойствамОбъекта.Получить(), МассивПолей);
		
		Валидное = Валидное1 И Валидное2;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПризнакВалидностиПравила(ДеревоЗначенийИзРеквизита, МассивПолей)
	
	// возвращаемое значение функции
	ВалидноеПравило = Истина;
	
	Если ТипЗнч(ДеревоЗначенийИзРеквизита) = Тип("ДеревоЗначений") Тогда
		
		ВалидноеПравило = ПроверитьСвойстваПравилаНаВалидность(ДеревоЗначенийИзРеквизита, МассивПолей);
		
	Иначе
		
		ВалидноеПравило = Ложь;
		
	КонецЕсли;
	
	Возврат ВалидноеПравило;
	
КонецФункции

Функция ПроверитьСвойстваПравилаНаВалидность(ДеревоЗначений, МассивПолей)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				
				ВалидноеПравило = Ложь; // пустую группу считаем невалидной
				
			Иначе
				
				ВалидноеПравило = ПроверитьСвойстваПравилаНаВалидность(СтрокаДерева, МассивПолей);
				
			КонецЕсли;
			
			Если Не ВалидноеПравило Тогда
				
				Возврат Ложь; // выходим при первой невалидной ветке дерева
				
			КонецЕсли;
			
		Иначе
			
			ВалидноеПравило = Истина;
			
			Для Каждого ИмяПоля ИЗ МассивПолей Цикл
				
				// поля могут содержать как наименование свойства объекта (Строка),
				// так и значение константы примитивного типа.
				// Поэтому для проверки заполненности значения проверяем на пустую строку.
				
				ВалидноеПравило = ВалидноеПравило И Не ПустаяСтрока(Строка(СтрокаДерева[ИмяПоля]));
				
			КонецЦикла;
			
			Если Не ВалидноеПравило Тогда
				
				Возврат Ложь; // выходим при первом невалидном элементе отбора
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// если дошли до конца функции, то элементы отбора в текущей ветке дерева валидные
	Возврат Истина;
	
КонецФункции

// Инициализирует дерево значений для отбора по свойствам объекта
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ДереваОтбора - ДеревоЗначений - дерево значений для отбора по свойствам объекта
//
Функция ИнициализацияДереваОтбораПоСвойствамОбъекта() Экспорт
	
	// инициализируем дерево значений для отбора по свойствам объекта
	ДереваОтбора = Новый ДеревоЗначений;
	
	ДереваОтбора.Колонки.Добавить("ЗначениеКонстанты"); // произвольный тип
	ДереваОтбора.Колонки.Добавить("СвойствоОбъекта",       Новый ОписаниеТипов("Строка"));
	ДереваОтбора.Колонки.Добавить("ТипСвойстваОбъекта",    Новый ОписаниеТипов("СправочникСсылка.Объекты"));
	ДереваОтбора.Колонки.Добавить("ВидСравнения",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСравнения"));
	ДереваОтбора.Колонки.Добавить("ЭтоГруппа",             Новый ОписаниеТипов("Булево"));
	ДереваОтбора.Колонки.Добавить("БулевоЗначениеГруппы",  Новый ОписаниеТипов("ПеречислениеСсылка.БулевыОперации"));
	ДереваОтбора.Колонки.Добавить("ВидЭлементаОтбора",     Новый ОписаниеТипов("Строка"));
	
	ДереваОтбора.Колонки.Добавить("ТаблицаСвойствОбъекта", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// колонки-пустышки для универсальной работы обработчиков событий табличных полей формы
	ДереваОтбора.Колонки.Добавить("СвойствоПланаОбмена",  Новый ОписаниеТипов("Строка"));
	ДереваОтбора.Колонки.Добавить("ЭтоСтрокаКонстанты",   Новый ОписаниеТипов("Булево"));
	
	Возврат ДереваОтбора;
КонецФункции

// Инициализирует дерево значений для отбора по свойствам плана обмена
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ДереваОтбора - ДеревоЗначений - дерево значений для отбора по свойствам плана обмена
//
Функция ИнициализацияДереваОтбораПоСвойствамПланаОбмена() Экспорт
	
	// инициализируем дерево значений для отбора по свойствам плана обмена
	ДереваОтбора = Новый ДеревоЗначений;
	ДереваОтбора.Колонки.Добавить("СвойствоОбъекта");     // произвольный тип в каждой строке таблицы
	ДереваОтбора.Колонки.Добавить("ЭтоСтрокаКонстанты",        Новый ОписаниеТипов("Булево"));
	ДереваОтбора.Колонки.Добавить("СвойствоПланаОбмена",       Новый ОписаниеТипов("Строка"));
	ДереваОтбора.Колонки.Добавить("ТипСвойстваОбъекта",        Новый ОписаниеТипов("СправочникСсылка.Объекты"));
	ДереваОтбора.Колонки.Добавить("ВидСравнения",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСравнения"));
	ДереваОтбора.Колонки.Добавить("ЭтоГруппа",                 Новый ОписаниеТипов("Булево"));
	ДереваОтбора.Колонки.Добавить("БулевоЗначениеГруппы",      Новый ОписаниеТипов("ПеречислениеСсылка.БулевыОперации"));
	
	ДереваОтбора.Колонки.Добавить("ТаблицаСвойствОбъекта",     Новый ОписаниеТипов("ТаблицаЗначений"));
	ДереваОтбора.Колонки.Добавить("ТаблицаСвойствПланаОбмена", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// колонки-пустышки для универсальной работы обработчиков событий табличных полей формы
	ДереваОтбора.Колонки.Добавить("ЗначениеКонстанты",    Новый ОписаниеТипов("Строка"));
	ДереваОтбора.Колонки.Добавить("ВидЭлементаОтбора",    Новый ОписаниеТипов("Строка"));
	
	Возврат ДереваОтбора;
КонецФункции
