////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ

Перем одТипСтрока;
Перем одТипБулево;
Перем одТипЧисло;
Перем одТипДата;
Перем одТипХранилищеЗначения;

Перем одТипУзлаXML_КонецЭлемента;
Перем одТипУзлаXML_НачалоЭлемента;
Перем одТипУзлаXML_Текст;

Перем мКонвертация Экспорт;

Перем мТаблицаПравилКонвертацииСвойств;
Перем мТаблицаПравилКонвертацииЗначений;
Перем мТаблицаНастроекВариантовПоиска;

Перем мПКОДляПКС;

Перем мВсеПравилаКонвертации;

Перем мОбновление;

Перем мОбщееКоличествоЗагруженныхПКО;
Перем мОбщееКоличествоЗаписанныхПКО;
Перем мОбщееКоличествоСопоставленныхСтрокПКО;

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",")

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(СокрЛП(Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции // МассивИзСтроки() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ПРАВИЛ ОБМЕНА

// Осуществляет загрузку правил конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаКонвертации(ПравилаОбмена)

	ТабПКО.Строки.Очистить();
	мОбщееКоличествоЗагруженныхПКО = 0;

	СтрокиДЗ = ТабПКО.Строки;

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Правило" Тогда
   			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПКО(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
            СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПКГО(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "ПравилаКонвертацииОбъектов") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПравилаКонвертации() 

// Осуществляет загрузку правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилаВыгрузки(ПравилаОбмена)

	ТабПВД.Строки.Очистить();

	СтрокиДЗ = ТабПВД.Строки;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Правило" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПВД(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПВГД(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "ПравилаВыгрузкиДанных") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);

КонецПроцедуры // ЗагрузитьПравилаВыгрузки()

// Осуществляет загрузку группы правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая группу правил выгрузки данных
// 
Процедура ЗагрузитьПКГО(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПКО(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПКГО(ПравилаОбмена, СтрокаДЗ);
			
		// Выход
		
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
	мОбщееКоличествоЗагруженныхПКО = мОбщееКоличествоЗагруженныхПКО + 1;
	Если мОбщееКоличествоЗагруженныхПКО%10 = 0 Тогда
		Состояние("Прочитано ПКО: " + Строка(мОбщееКоличествоЗагруженныхПКО));
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьГруппуПВД()

// Осуществляет загрузку правила конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПКО(ПравилаОбмена, НоваяСтрока)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если      ИмяУзла = "Код" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.Имя = Значение;
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
		ИначеЕсли ИмяУзла = "СпособВыгрузки" Тогда
			НоваяСтрока.СпособВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "НеЗапоминатьВыгруженные" Тогда
			НоваяСтрока.НеЗапоминатьВыгруженные = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "СинхронизироватьПоИдентификатору" Тогда
			НоваяСтрока.СинхронизироватьПоИдентификатору = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли" Тогда
			НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);	
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСвойствПоСсылкам" Тогда
			НоваяСтрока.НеВыгружатьОбъектыСвойствПоСсылкам = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "НеСоздаватьЕслиНеНайден" Тогда
			НоваяСтрока.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "ИспользоватьБыстрыйПоискПриЗагрузке" Тогда
			НоваяСтрока.ИспользоватьБыстрыйПоискПриЗагрузке = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "ГенерироватьНовыйНомерИлиКодЕслиНеУказан" Тогда
			НоваяСтрока.ГенерироватьНовыйНомерИлиКодЕслиНеУказан = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки" Тогда
			НоваяСтрока.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD" Тогда
			НоваяСтрока.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике" Тогда
			НоваяСтрока.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "РегистрироватьОбъектНаУзлеОтправителе" Тогда // не используется
			одПропустить(ПравилаОбмена);
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);			
		ИначеЕсли ИмяУзла = "ПриоритетОбъектовОбмена" Тогда
			НоваяСтрока.ПриоритетОбъектовОбмена = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		//настройки вариантов поиска		
		ИначеЕсли ИмяУзла = "НастройкаВариантовПоискаОбъектов" Тогда
			НоваяСтрока.НастройкаВариантовПоискаОбъектов = мТаблицаНастроекВариантовПоиска.Скопировать();
			ЗагрузитьНастройкиВариантовПоиска(ПравилаОбмена, НоваяСтрока.НастройкаВариантовПоискаОбъектов);			

		// Свойства
		
		ИначеЕсли ИмяУзла = "Свойства" Тогда
			НоваяСтрока.Свойства		= мТаблицаПравилКонвертацииСвойств.Скопировать();
			ЗагрузитьСвойства(ПравилаОбмена, НоваяСтрока.Свойства);
			
		// Значения
		
		ИначеЕсли ИмяУзла = "Значения" Тогда
            НоваяСтрока.Значения		= мТаблицаПравилКонвертацииЗначений.Скопировать();
			ЗагрузитьЗначения(ПравилаОбмена, НоваяСтрока.Значения, НоваяСтрока.Источник);
			
		// Обработчики событий
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиВФайл" Тогда
			НоваяСтрока.ПослеВыгрузкиВФайл = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузкиВФайл  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузкиВФайл);
		ИначеЕсли ИмяУзла = "ПередЗагрузкой" Тогда
			НоваяСтрока.ПередЗагрузкой               = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередЗагрузкой = Не ПустаяСтрока(НоваяСтрока.ПередЗагрузкой);
		ИначеЕсли ИмяУзла = "ПриЗагрузке" Тогда
			НоваяСтрока.ПриЗагрузке               = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриЗагрузке = Не ПустаяСтрока(НоваяСтрока.ПриЗагрузке);
		ИначеЕсли ИмяУзла = "ПослеЗагрузки" Тогда
			НоваяСтрока.ПослеЗагрузки               = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеЗагрузки = Не ПустаяСтрока(НоваяСтрока.ПослеЗагрузки);
		ИначеЕсли ИмяУзла = "ПоследовательностьПолейПоиска" Тогда
			НоваяСтрока.ПоследовательностьПолейПоиска               = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПоследовательностейПолейПоиска = Не ПустаяСтрока(НоваяСтрока.ПоследовательностьПолейПоиска);
						
		// Выход
		ИначеЕсли (ИмяУзла = "Правило") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
	мОбщееКоличествоЗагруженныхПКО = мОбщееКоличествоЗагруженныхПКО + 1;
	Если мОбщееКоличествоЗагруженныхПКО%10 = 0 Тогда
		Состояние("Прочитано ПКО: " + Строка(мОбщееКоличествоЗагруженныхПКО));
	КонецЕсли;

КонецПроцедуры // ЗагрузитьПравилоКонвертации() 

// Осуществляет загрузку группы правил очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая группу правил очистки данных
// 
Процедура ЗагрузитьГруппуПОД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отключить = Число(одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
			
		// Выход
		
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьГруппуПОД()

// Осуществляет загрузку правила очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая правило очистки данных
// 
Процедура ЗагрузитьПОД(ПравилаОбмена, НоваяСтрока)
	
	НоваяСтрока.Отключить = Число(одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.Имя = Значение;

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			НоваяСтрока.ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "УдалятьЗаПериод" Тогда
			НоваяСтрока.УдалятьЗаПериод = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Непосредственно" Тогда
			НоваяСтрока.Непосредственно = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);

		
		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередУдалениемОбъекта" Тогда
			НоваяСтрока.ПередУдалением = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

			
		// Выход
		
		ИначеЕсли (ИмяУзла = "Правило") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПОД()

// Осуществляет загрузку правил очистки данных
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаОчистки(ПравилаОбмена)

	ТаблицаПравилОчистки.Строки.Очистить();

	СтрокиДЗ = ТаблицаПравилОчистки.Строки;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Правило" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "ПравилаОчисткиДанных") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);

КонецПроцедуры // ЗагрузитьПравилаОчистки() 

// Осуществляет загрузку правил конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьСвойства(ПравилаОбмена, ТаблицаСвойств)

	СтрокиДЗ = ТаблицаСвойств.Строки;

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Свойство" Тогда
            СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
            СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Свойства") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСвойства()

Процедура ЗагрузитьНастройкуВариантовПоиска(ПравилаОбмена, НоваяСтрока)
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "ИмяНастройкиДляАлгоритма" Тогда
			НоваяСтрока.ИмяНастройкиДляАлгоритма = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ИмяНастройкиДляПользователя" Тогда
			НоваяСтрока.ИмяНастройкиДляПользователя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ОписаниеНастройкиДляПользователя" Тогда
			НоваяСтрока.ОписаниеНастройкиДляПользователя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли (ИмяУзла = "ВариантПоиска") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиВариантовПоиска(ПравилаОбмена, ТаблицаНастроек)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "ВариантПоиска" Тогда
			
            СтрокаНастройки = ТаблицаНастроек.Добавить();
			ЗагрузитьНастройкуВариантовПоиска(ПравилаОбмена, СтрокаНастройки);
			
		ИначеЕсли (ИмяУзла = "НастройкаВариантовПоискаОбъектов") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСвойства()

// Осуществляет загрузку правила конвертации группы свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
// 
Процедура ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа     = Истина;
	НоваяСтрока.ПравилаГруппы = мТаблицаПравилКонвертацииСвойств.Скопировать();
	НоваяСтрока.Отключить     = одАтрибут(ПравилаОбмена, одТипБулево, "Отключить");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Свойство" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПКС(ПравилаОбмена, НоваяСтрока.ПравилаГруппы, СтрокаДЗ);

		ИначеЕсли ИмяУзла = "ПередОбработкойВыгрузки" Тогда
			НоваяСтрока.ПередОбработкойВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередОбработкойВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПередОбработкойВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиВыгрузки" Тогда
			НоваяСтрока.ПослеОбработкиВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеОбработкиВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПослеОбработкиВыгрузки);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);

		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "ВыгружатьГруппуЧерезФайл" Тогда
			НоваяСтрока.ВыгружатьГруппуЧерезФайл = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПКГС() 

// Осуществляет загрузку правила конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, НоваяСтрока)

	НоваяСтрока.Поиск     = одАтрибут(ПравилаОбмена, одТипБулево, "Поиск");
	НоваяСтрока.Отключить = одАтрибут(ПравилаОбмена, одТипБулево, "Отключить");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);

		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "ПриводитьКДлине" Тогда
			
			ДлинаЭлемента = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			НоваяСтрока.ПриводитьКДлине = Истина;
			
		ИначеЕсли ИмяУзла = "ИмяПараметраДляПередачи" Тогда
			
			НоваяСтрока.ИмяПараметраДляПередачи = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПоискПоДатеНаРавенство" Тогда
			
			НоваяСтрока.ПоискПоДатеНаРавенство = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли (ИмяУзла = "Свойство") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПКС() 

// Осуществляет загрузку правил конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьЗначения(ПравилаОбмена, ТаблицаЗначений, ТипИсточника);

	СтрокиДЗ = ТаблицаЗначений.Строки;

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Значение" Тогда
            СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПКЗ(ПравилаОбмена, ТаблицаЗначений, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
            СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПКГЗ(ПравилаОбмена, ТаблицаЗначений, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Значения") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьПКГЗ(ПравилаОбмена, ТаблицаЗначений, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Описание" Тогда
			НоваяСтрока.Описание = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
		ИначеЕсли ИмяУзла = "Значение" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПКЗ(ПравилаОбмена, ТаблицаЗначений, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПКЗ() 

// Осуществляет загрузку правила конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьПКЗ(ПравилаОбмена, ТаблицаЗначений, НоваяСтрока)

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Описание" Тогда
			НоваяСтрока.Описание = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
		ИначеЕсли (ИмяУзла = "Значение") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПКЗ() 

// Осуществляет загрузку группы правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая группу правил выгрузки данных
// 
Процедура ЗагрузитьПВГД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отключить = одАтрибут(ПравилаОбмена, одТипБулево, "Отключить");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "Код" Тогда
			
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Порядок" Тогда
			
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);

		ИначеЕсли ИмяУзла = "Описание" Тогда
			
			НоваяСтрока.Описание = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Правило") Тогда
			
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПВД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли ИмяУзла = "Группа" И ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
            ЗагрузитьПВГД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли ИмяУзла = "Группа" И ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
		
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПВГД()

// Осуществляет загрузку правила выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая правило выгрузки данных
// 
Процедура ЗагрузитьПВД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.Отключить = одАтрибут(ПравилаОбмена, одТипБулево, "Отключить");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);

		ИначеЕсли ИмяУзла = "Описание" Тогда
			НоваяСтрока.Описание = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ВыбиратьДанныеДляВыгрузкиОднимЗапросом" Тогда
			НоваяСтрока.ВыбиратьДанныеДляВыгрузкиОднимЗапросом = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);			
			
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСозданныеВБазеПриемнике" Тогда
			НоваяСтрока.НеВыгружатьОбъектыСозданныеВБазеПриемнике = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			НоваяСтрока.ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

			
		// Выход
		
		ИначеЕсли (ИмяУзла = "Правило") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПВД()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ АЛГОРИТМОВ И ЗАПРОСОВ

// Осуществляет загрузку алгоритмов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьАлгоритмы(ПравилаОбмена)

	ТабАлгоритмы.Строки.Очистить();
	СтрокиДЗ = ТабАлгоритмы.Строки;

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Алгоритм" Тогда
            СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьАлгоритм(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьАлгоритмГруппа(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Алгоритмы") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьАлгоритмы() 

// Осуществляет загрузку групп алгоритмов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьАлгоритмГруппа(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;

	НоваяСтрока.Код = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если       ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Алгоритм" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьАлгоритм(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьАлгоритмГруппа(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьАлгоритмГруппа()

// Осуществляет загрузку алгоритма в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьАлгоритм(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.Код = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	НоваяСтрока.ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Текст" Тогда
			НоваяСтрока.Алгоритм = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Параметры" Тогда
			НоваяСтрока.Параметры = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Алгоритм") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьАлгоритм() 

// Осуществляет загрузку запросов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьЗапросы(ПравилаОбмена)

	ТабЗапросы.Строки.Очистить();
	СтрокиДЗ = ТабЗапросы.Строки;

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Запрос" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьЗапрос(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли ИмяУзла = "Группа" Тогда
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьЗапросГруппа(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Запросы") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьЗапросы() 

// Осуществляет загрузку групп запросов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьЗапросГруппа(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;

	НоваяСтрока.Код = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если       ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Запрос" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьЗапрос(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьЗапросГруппа(ПравилаОбмена, СтрокаДЗ);
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьЗапросГруппа()

// Осуществляет загрузку запроса в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьЗапрос(ПравилаОбмена, НоваяСтрока)

	//Для обхода ошибки загрузки запросов, неправильно выгруженных в версии 8.02.0.3
	ИмяЗапроса = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	НайденныеСтроки = ТабЗапросы.Строки.НайтиСтроки(Новый Структура("Код", ИмяЗапроса), Истина);
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Родитель = Неопределено Тогда
			ТабЗапросы.Строки.Удалить(НайденнаяСтрока);
		Иначе
			НайденнаяСтрока.Родитель.Строки.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока.Код = ИмяЗапроса;
	НоваяСтрока.ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Текст" Тогда
			НоваяСтрока.ТекстЗапроса = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			НоваяСтрока.Комментарий = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Запрос") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьЗапрос() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ОБРАБОТОК

// Осуществляет загрузку обработок в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьОбработки(ПравилаОбмена)

	ТабОбработки.Очистить();
	СтрокиОбработки = ТабОбработки;

	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Обработка" Тогда
            СтрокаОбработка = СтрокиОбработки.Добавить();
			ЗагрузитьОбработку(ПравилаОбмена, СтрокаОбработка);
		ИначеЕсли (ИмяУзла = "Обработки") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку обработки в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьОбработку(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.Код                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	НоваяСтрока.Наименование            = одАтрибут(ПравилаОбмена, одТипСтрока, "Наименование");
	НоваяСтрока.Параметры               = одАтрибут(ПравилаОбмена, одТипСтрока, "Параметры");
	НоваяСтрока.Комментарий             = одАтрибут(ПравилаОбмена, одТипСтрока, "Комментарий");
    НоваяСтрока.ИспользуетсяПриВыгрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриВыгрузке");
	НоваяСтрока.ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
	НоваяСтрока.ЭтоОбработкаНастройки   = одАтрибут(ПравилаОбмена, одТипБулево, "ЭтоОбработкаНастройки");
	НоваяСтрока.Обработка               = одЗначениеЭлемента(ПравилаОбмена, одТипХранилищеЗначения);

КонецПроцедуры // ЗагрузитьОбработку() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ПАРАМЕТРОВ

// Осуществляет загрузку параметров в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПараметры(ПравилаОбмена)

	ТабПараметры.Очистить();
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;

		Если ИмяУзла = "Параметр" И ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			
			//Загрузка по версии правил 2.01
			НоваяСтрока                       = ТабПараметры.Добавить();
			НоваяСтрока.Код                   = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.Наименование          = одАтрибут(ПравилаОбмена, одТипСтрока, "Наименование");
			НоваяСтрока.УстанавливатьВДиалоге = одАтрибут(ПравилаОбмена, одТипБулево, "УстанавливатьВДиалоге");
			НоваяСтрока.ТипОбъекта            = Строка(ПравилаОбмена.ПолучитьАтрибут("ТипЗначения"));
			НоваяСтрока.ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
			НоваяСтрока.ПередаватьПараметрПриВыгрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ПередаватьПараметрПриВыгрузке");
			НоваяСтрока.АлгоритмПослеЗагрузкиПараметра  = одАтрибут(ПравилаОбмена, одТипСтрока, "ПослеЗагрузкиПараметра");
			НоваяСтрока.ПравилоКонвертации = одАтрибут(ПравилаОбмена, одТипСтрока, "ПравилоКонвертации");

		ИначеЕсли (ТипУзла = одТипУзлаXML_Текст) Тогда
			
			// Для совместимости с версией правил 2.0 используем загрузку из строки
			СтрокаПараметров = ПравилаОбмена.Значение;
			Для каждого Пар Из МассивИзСтроки(СтрокаПараметров) Цикл
				НоваяСтрока                       = ТабПараметры.Добавить();
				НоваяСтрока.Код                   = Пар;
				НоваяСтрока.Наименование          = Пар;
				НоваяСтрока.УстанавливатьВДиалоге = ЛОЖЬ;
				НоваяСтрока.ТипОбъекта            = "";
				НоваяСтрока.ИспользуетсяПриЗагрузке = Истина;
				НоваяСтрока.ПередаватьПараметрПриВыгрузке = ЛОЖЬ;
				НоваяСтрока.ПравилоКонвертации = "";
				НоваяСтрока.АлгоритмПослеЗагрузкиПараметра = "";
			КонецЦикла;
			
		ИначеЕсли (ИмяУзла = "Параметры") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьОбработки() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя)

	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СтрЗначение);
	Иначе
		Если      Тип = одТипСтрока Тогда
			Возврат ""; 
		ИначеЕсли Тип = одТипБулево Тогда
			Возврат Ложь;
		ИначеЕсли Тип = одТипЧисло Тогда
			Возврат 0;
		ИначеЕсли Тип = одТипДата Тогда
			Возврат Дата("01.01.0001 00:00:00");
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // одАтрибут() 

// Возвращает объект ОписаниеТипов, содержащий указанный тип
//
// Параметры:
//  ЗначениеТипа   - Строка с именем типа или значение типа Тип
//  
// Возвращаемое значение:
//  ОписаниеТипов
//  
Функция одОписаниеТипа(ЗначениеТипа)

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = одТипСтрока Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли; 
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // одОписаниеТипа()

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществлется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству="")

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		Если ТипУзла = одТипУзлаXML_Текст Тогда
			Значение = СокрП(Объект.Значение);
		ИначеЕсли (ИмяУзла = Имя) И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат XMLЗначение(Тип, Значение);	
	
КонецФункции // одЗначениеЭлемента() 

// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя="")

	КолвоВложений = 0; // количество одноименных вложений

	Если Имя = "" Тогда
		Имя = Объект.ЛокальноеИмя;	
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		Если ИмяУзла = Имя Тогда
			Если ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
				Если КолвоВложений = 0 Тогда
					Прервать;
				Иначе
					КолвоВложений = КолвоВложений - 1;
				КонецЕсли; 
			ИначеЕсли ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
				КолвоВложений = КолвоВложений + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Осуществляет загрузку правил обмена в соответствии с форматом
//
// Параметры:
//  Источник       - Объект, из которого осуществляется загрузка правил обмена;
//  ТипИсточника   - Строка, указывающая тип источника: "XMLФайл", "ЧтениеXML", "Строка"
// 
Процедура ЗагрузитьПравилаОбмена(Источник="", ТипИсточника="XMLФайл") Экспорт

	ФайлЗапакован = Ложь;
	
	мТаблицаПравилКонвертацииСвойств = Новый ДеревоЗначений;
	ИнициализацияТаблицыПКС(мТаблицаПравилКонвертацииСвойств);

	мТаблицаПравилКонвертацииЗначений = Новый ДеревоЗначений;
	ИнициализацияТаблицыПКЗ(мТаблицаПравилКонвертацииЗначений);
	
	мТаблицаНастроекВариантовПоиска = Новый ТаблицаЗначений;
	ИнициализацияТаблицуНастроекВариантовПоиска(мТаблицаНастроекВариантовПоиска);

	Если ПустаяСтрока(Источник) Тогда
		
		Источник = ИмяФайлаПравилОбмена;
		
		Если ТипИсточника = "XMLФайл" Тогда
		
			ФайлЗапакован = ОпределитьФайлСжат(Источник);
		
			Если ФайлЗапакован Тогда
				
				Источник = РаспаковатьФайлДанных(Источник);		
								
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;

	Если ПустаяСтрока(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипИсточника="XMLФайл" Тогда
		
		Файл = Новый Файл(Источник);
		Если НЕ Файл.Существует() Тогда
			СообщитьОбОшибке("Не найден файл с именем: " + Источник);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.ЭтоФайл() Тогда
			СообщитьОбОшибке("Файл с именем: " + Источник + " является каталогом.");
			Возврат;
		КонецЕсли;
						
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.ОткрытьФайл(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="Строка" Тогда
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.УстановитьСтроку(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="ЧтениеXML" Тогда
		
		ПравилаОбмена = Источник;
		
	КонецЕсли; 

	Если ПравилаОбмена.ЛокальноеИмя <> "ПравилаОбмена" 
		И ПравилаОбмена.ТипУзла <> одТипУзлаXML_НачалоЭлемента Тогда
		
		Возврат;
		
	КонецЕсли;

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		ОбработкаПрерыванияПользователя();
		
		
		// Реквизиты конвертации		
		Если      ИмяУзла = "ВерсияФормата" Тогда
			мКонвертация.Вставить("ВерсияФормата",        одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));			
			РежимСовместимости = ПравилаОбмена.ПолучитьАтрибут ("РежимСовместимости");
			Если РежимСовместимости <> Неопределено Тогда
				мКонвертация.Вставить("РежимСовместимости", РежимСовместимости)
			КонецЕсли;
		ИначеЕсли ИмяУзла = "Ид" Тогда
			мКонвертация.Вставить("Ид",                   одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			мКонвертация.Вставить("Наименование",         одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
		ИначеЕсли ИмяУзла = "ДатаВремяСоздания" Тогда
			мКонвертация.Вставить("ДатаВремяСоздания",    одЗначениеЭлемента(ПравилаОбмена, одТипДата));
		ИначеЕсли ИмяУзла = "УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике" Тогда
			мКонвертация.Вставить("УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике",    одЗначениеЭлемента(ПравилаОбмена, одТипБулево));		
		ИначеЕсли ИмяУзла = "Источник" Тогда
			Если одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияПлатформы") = "7.7" Тогда
				мКонвертация.Вставить("ИсточникВерсияПлатформы", Перечисления.Приложения.Предприятие77);
			ИначеЕсли одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияПлатформы") = "8.0" Тогда
				мКонвертация.Вставить("ИсточникВерсияПлатформы", Перечисления.Приложения.Предприятие80);
			ИначеЕсли одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияПлатформы") = "УП" Тогда
				мКонвертация.Вставить("ИсточникВерсияПлатформы", Перечисления.Приложения.УправляемоеПриложение);
			КонецЕсли;
			
			ВерсияКонфигурации = одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияКонфигурации");
			мКонвертация.Вставить("ИсточникВерсияКонфигурации", ВерсияКонфигурации);
			
			СинонимКонфигурации = одАтрибут(ПравилаОбмена, одТипСтрока, "СинонимКонфигурации");
			мКонвертация.Вставить("ИсточникСинонимКонфигурации", СинонимКонфигурации);
						
			мКонвертация.Вставить("Источник",             одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			
            Если      одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияПлатформы") = "7.7" Тогда
				мКонвертация.Вставить("ПриемникВерсияПлатформы", Перечисления.Приложения.Предприятие77);
			ИначеЕсли одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияПлатформы") = "8.0" Тогда
				мКонвертация.Вставить("ПриемникВерсияПлатформы", Перечисления.Приложения.Предприятие80);
			ИначеЕсли одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияПлатформы") = "УП" Тогда
				мКонвертация.Вставить("ПриемникВерсияПлатформы", Перечисления.Приложения.УправляемоеПриложение);
			КонецЕсли;
			
			ВерсияКонфигурации = одАтрибут(ПравилаОбмена, одТипСтрока, "ВерсияКонфигурации");
			мКонвертация.Вставить("ПриемникВерсияКонфигурации", ВерсияКонфигурации);
			
			СинонимКонфигурации = одАтрибут(ПравилаОбмена, одТипСтрока, "СинонимКонфигурации");
			мКонвертация.Вставить("ПриемникСинонимКонфигурации", СинонимКонфигурации);
			
			мКонвертация.Вставить("Приемник",             одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "РежимСовместимости" Тогда
			мКонвертация.Вставить("РежимСовместимости", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
		ИначеЕсли ИмяУзла = "Параметры" Тогда
			ЗагрузитьПараметры(ПравилаОбмена);
		ИначеЕсли ИмяУзла = "Ответственный" Тогда
			одПропустить(ПравилаОбмена);
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "ОсновнойПланОбмена" Тогда
			одПропустить(ПравилаОбмена);

		// События конвертации
		
		ИначеЕсли ИмяУзла = "" Тогда
		
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиПравилОбмена" Тогда
			мКонвертация.Вставить("ПослеЗагрузкиПравилОбмена",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойДанных" Тогда
			мКонвертация.Вставить("ПередВыгрузкойДанных",     одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиДанных" Тогда
			мКонвертация.Вставить("ПослеВыгрузкиДанных",      одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередЗагрузкойДанных" Тогда
            мКонвертация.Вставить("ПередЗагрузкойДанных",     одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиДанных" Тогда
			мКонвертация.Вставить("ПослеЗагрузкиДанных",      одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
            мКонвертация.Вставить("ПередВыгрузкойОбъекта",    одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередКонвертациейОбъекта" Тогда
			мКонвертация.Вставить("ПередКонвертациейОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			мКонвертация.Вставить("ПослеВыгрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередЗагрузкойОбъекта" Тогда
			мКонвертация.Вставить("ПередЗагрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиОбъекта" Тогда
			мКонвертация.Вставить("ПослеЗагрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередОтправкойИнформацииОбУдалении" Тогда
			мКонвертация.Вставить("ПередОтправкойИнформацииОбУдалении",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПриПолученииИнформацииОбУдалении" Тогда
			мКонвертация.Вставить("ПриПолученииИнформацииОбУдалении",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередПолучениемИзмененныхОбъектов" Тогда
			мКонвертация.Вставить("ПередПолучениемИзмененныхОбъектов",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПослеПолученияИнформацииОбУзлахОбмена" Тогда
			мКонвертация.Вставить("ПослеПолученияИнформацииОбУзлахОбмена",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));						
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиПараметров" Тогда
			мКонвертация.Вставить("ПослеЗагрузкиПараметров",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));			
			
		ИначеЕсли ИмяУзла = "ПравилаВыгрузкиДанных" Тогда
			ЗагрузитьПравилаВыгрузки(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "ПравилаКонвертацииОбъектов" Тогда
			ЗагрузитьПравилаКонвертации(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "ПравилаРегистрацииОбъектов" Тогда
			одПропустить(ПравилаОбмена); // правила регистрации загружаем отдельной обработкой
			
		ИначеЕсли ИмяУзла = "ПравилаОчисткиДанных" Тогда
			ЗагрузитьПравилаОчистки(ПравилаОбмена);
        		
		ИначеЕсли ИмяУзла = "Алгоритмы" Тогда
			ЗагрузитьАлгоритмы(ПравилаОбмена);
		ИначеЕсли ИмяУзла = "Запросы" Тогда
			ЗагрузитьЗапросы(ПравилаОбмена);
        ИначеЕсли ИмяУзла = "Обработки" Тогда
			ЗагрузитьОбработки(ПравилаОбмена);
		ИначеЕсли (ИмяУзла = "ПравилаОбмена") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			ПравилаОбмена.Закрыть();
			Прервать;
 			// Ошибка формата
		Иначе
			СообщитьОбОшибке("Ошибка формата файла обмена. Не возможности обработать узел: " + ИмяУзла);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ФайлЗапакован Тогда
		
		УдалитьФайлы(Источник);
		
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьФайлСжат(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	АрхивироватьФайл = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
	Возврат АрхивироватьФайл;
	
КонецФункции

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция ПолучитьПолноеИмяФайла(ИмяКаталога, ИмяФайла) Экспорт

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;	
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции

Функция РаспаковатьФайлДанных(ИсходноеИмяФайла)
	
	Попытка
		
		КаталогДляРаспаковки = КаталогВременныхФайлов();
		
		ИмяФайлаЗагрузкиДанных = СтрЗаменить(ИсходноеИмяФайла, ".zip", ".xml");
		
		Состояние("Выполняется распаковка файла ...");
				
		Архиватор = Новый ЧтениеZipФайла(ИсходноеИмяФайла);
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ИмяФайлаЗагрузкиДанных = ПолучитьПолноеИмяФайла(КаталогДляРаспаковки, Архиватор.Элементы[0].Имя);
			
		Иначе
			
			ИмяФайлаЗагрузкиДанных = "";	
			
		КонецЕсли;

		Архиватор.Закрыть();
	
	Исключение
		
		СообщитьОбОшибке("Ошибка при распаковке файла правил: " + ОписаниеОшибки());
		ИмяФайлаЗагрузкиДанных = "";
							
	КонецПопытки;
	
	Возврат ИмяФайлаЗагрузкиДанных;	
	
КонецФункции

// Читает реквизиты конвертации из XML-файла.
// Используется для идентификации конвертации, источника и приемника.
//
// Параметры:
//  ИмяФайла       - имя XML-файла
//
// Возвращаемое значение:
//  Соответствие, содержащее реквизиты конвертации
//
Функция ПолучитьРеквизитыКонвертации(ИмяФайла) Экспорт

	Результат = Новый Соответствие;

	Если ПустаяСтрока(ИмяФайла) Тогда
    	Возврат Результат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		СообщитьОбОшибке("Не найден файл с именем: " + ИмяФайла);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ Файл.ЭтоФайл() Тогда
		СообщитьОбОшибке("Файл с именем: " + ИмяФайла + " является каталогом.");
		Возврат Результат;
	КонецЕсли;
	
	ФайлЗапакован = ОпределитьФайлСжат(ИмяФайла);
	
	Если ФайлЗапакован Тогда		
		ИмяФайлаДляЧтенияДанных = РаспаковатьФайлДанных(ИмяФайла);		
		Если ПустаяСтрока(ИмяФайлаДляЧтенияДанных) Тогда 
			Возврат Результат;
		КонецЕсли;
	Иначе
		ИмяФайлаДляЧтенияДанных = ИмяФайла;
	КонецЕсли;
	
	ПравилаОбмена = Новый ЧтениеXML();
	ПравилаОбмена.ОткрытьФайл(ИмяФайлаДляЧтенияДанных);
	ПравилаОбмена.Прочитать();
	
	Стек = Новый Массив;
	
	Если Не ((ПравилаОбмена.ЛокальноеИмя = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_НачалоЭлемента)) Тогда
		Возврат Результат;
	Иначе
		Стек.Добавить(ПравилаОбмена.ЛокальноеИмя);
	КонецЕсли;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если      ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Стек.Добавить(ИмяУзла);
			Если      (ИмяУзла = "Наименование") И (Стек[Стек.Количество() - 2] = "ПравилаОбмена") Тогда
				Результат.Вставить("Наименование", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
				Стек.Удалить(Стек.Количество() - 1);
			ИначеЕсли (ИмяУзла = "Источник") И (Стек[Стек.Количество() - 2] = "ПравилаОбмена") Тогда
				Результат.Вставить("Источник", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
				Стек.Удалить(Стек.Количество() - 1);
			ИначеЕсли (ИмяУзла = "Приемник") И (Стек[Стек.Количество() - 2] = "ПравилаОбмена") Тогда
				Результат.Вставить("Приемник", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
				Стек.Удалить(Стек.Количество() - 1);



			КонецЕсли;
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Стек.Удалить(Стек.Количество() - 1);
		КонецЕсли;

		Если Результат.Количество() = 3 Тогда
        	Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПравилаОбмена.Закрыть();
	
	Если ФайлЗапакован Тогда
		
		УдалитьФайлы(ИмяФайлаДляЧтенияДанных);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПолучитьРеквизитыКонвертации()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ ПРАВИЛ ОБМЕНА

Процедура ИнициализацияТаблицуНастроекВариантовПоиска(Таб)
	
	Колонки = Таб.Колонки;

	Колонки.Добавить("ИмяНастройкиДляАлгоритма");
	Колонки.Добавить("ИмяНастройкиДляПользователя");
	Колонки.Добавить("ОписаниеНастройкиДляПользователя");	
	
КонецПроцедуры

// Инициализирует колонки таблицы правил конвертации объектов
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПКО()

	Колонки = ТабПКО.Колонки;

	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СпособВыгрузки");

	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");

	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");
	Колонки.Добавить("ПослеВыгрузкиВФайл");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузкиВФайл",одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПередЗагрузкой");
	Колонки.Добавить("ПриЗагрузке");
	Колонки.Добавить("ПослеЗагрузки");
	
	Колонки.Добавить("ЕстьОбработчикПередЗагрузкой", одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриЗагрузке",    одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеЗагрузки",  одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПоследовательностейПолейПоиска",  одОписаниеТипа("Булево"));
		
	Колонки.Добавить("Свойства", одОписаниеТипа("ДеревоЗначений"));
	
	Колонки.Добавить("Значения", одОписаниеТипа("ДеревоЗначений"));
	
	Колонки.Добавить("НастройкаВариантовПоискаОбъектов", одОписаниеТипа("ТаблицаЗначений"));
	
	Колонки.Добавить("ВыгружатьПредставлениеИсточника",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать",					      одОписаниеТипа("Булево"));
	Колонки.Добавить("НеЗапоминатьВыгруженные",           одОписаниеТипа("Булево"));
    Колонки.Добавить("СинхронизироватьПоИдентификатору", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", одОписаниеТипа("Булево"));
    Колонки.Добавить("НеВыгружатьОбъектыСвойствПоСсылкам", одОписаниеТипа("Булево"));
	Колонки.Добавить("НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска", одОписаниеТипа("Булево"));	
	Колонки.Добавить("ИспользоватьБыстрыйПоискПриЗагрузке", одОписаниеТипа("Булево"));
	Колонки.Добавить("ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки", одОписаниеТипа("Булево"));
	Колонки.Добавить("ГенерироватьНовыйНомерИлиКодЕслиНеУказан", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD", одОписаниеТипа("Булево"));
	Колонки.Добавить("НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике", одОписаниеТипа("Булево"));
		
	Колонки.Добавить("ПоследовательностьПолейПоиска");
	Колонки.Добавить("ПриоритетОбъектовОбмена");
			
	Колонки.Добавить("ВсеОбъектыВыгружены",         одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

// Инициализирует колонки таблицы правил конвертации свойств объектов
//
// Параметры:
//  Таб            - ТаблицаЗначений. инициализируемая таблица правил конвертации свойств
// 
Процедура ИнициализацияТаблицыПКС(Таб) Экспорт

	Колонки = Таб.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("ЭтоГруппа", 			одОписаниеТипа("Булево"));
    Колонки.Добавить("ПравилаГруппы");

	Колонки.Добавить("ВидИсточника");
	Колонки.Добавить("ВидПриемника");

	Колонки.Добавить("ТипИсточника");
	Колонки.Добавить("ТипПриемника");
	
	Колонки.Добавить("СтрокаТипИсточника");
	Колонки.Добавить("СтрокаТипПриемника");
	
	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");
	
	Колонки.Добавить("СтрокаИсточник");
	Колонки.Добавить("СтрокаПриемник");

	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПолучитьИзВходящихДанных", одОписаниеТипа("Булево"));
	Колонки.Добавить("ВыгружатьГруппуЧерезФайл", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать", одОписаниеТипа("Булево"));
	Колонки.Добавить("Поиск", 	   одОписаниеТипа("Булево"));
	Колонки.Добавить("Отключить",  одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");

	Колонки.Добавить("ПередОбработкойВыгрузки");
	Колонки.Добавить("ПослеОбработкиВыгрузки");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",			одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",				одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",				одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкойВыгрузки",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеОбработкиВыгрузки",	одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПриводитьКДлине",	одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ИмяПараметраДляПередачи");
	Колонки.Добавить("ПоискПоДатеНаРавенство",	одОписаниеТипа("Булево"));
			
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертацииСвойств()

// Инициализирует колонки таблицы правил конвертации значений объектов
//
// Параметры:
//  Таб            - ТаблицаЗначений. инициализируемая таблица правил конвертации значений
// 
Процедура ИнициализацияТаблицыПКЗ(Таб) Экспорт

	Колонки = Таб.Колонки;

	Колонки.Добавить("ЭтоГруппа", одОписаниеТипа("Булево"));
    Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");
	Колонки.Добавить("Комментарий");
	Колонки.Добавить("Описание");
	Колонки.Добавить("Порядок");

КонецПроцедуры // ИнициализацияТаблицыПравилКонвертацииСвойств()

// Инициализирует колонки таблицы правил выгрузки данных
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияТаблицыПВД()

	Колонки = ТабПВД.Колонки;

	Колонки.Добавить("ЭтоГруппа",					одОписаниеТипа("Булево"));

	Колонки.Добавить("Отключить",					одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок", 	                одОписаниеТипа("Число"));
	Колонки.Добавить("Описание");
	Колонки.Добавить("Комментарий");

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	
	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");

	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПослеВыгрузки");
	
	Колонки.Добавить("ВыбиратьДанныеДляВыгрузкиОднимЗапросом",    одОписаниеТипа("Булево"));
	Колонки.Добавить("НеВыгружатьОбъектыСозданныеВБазеПриемнике", одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПВД()

// Инициализирует колонки таблицы правил очистки данных
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилОчистки()

	Колонки = ТаблицаПравилОчистки.Колонки;

	Колонки.Добавить("ЭтоГруппа", одОписаниеТипа("Булево"));
	Колонки.Добавить("Отключить", одОписаниеТипа("Булево"));	
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок",	одОписаниеТипа("Число"));

	Колонки.Добавить("Комментарий");
	Колонки.Добавить("Описание");

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");

	Колонки.Добавить("УдалятьЗаПериод");
	Колонки.Добавить("Непосредственно", одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");
	Колонки.Добавить("ПередУдалением");

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ АЛГОРИТМОВ И ЗАПРОСОВ

// Инициализирует колонки таблицы алгоритмов
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыАлгоритмов()

	Колонки = ТабАлгоритмы.Колонки;

	Колонки.Добавить("Код");
	Колонки.Добавить("Алгоритм");
	Колонки.Добавить("Параметры");
	Колонки.Добавить("Комментарий");
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ИспользуетсяПриЗагрузке",	одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

// Инициализирует колонки таблицы запросов
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыЗапросов()

	Колонки = ТабЗапросы.Колонки;

	Колонки.Добавить("Код");
	Колонки.Добавить("ТекстЗапроса");
	Колонки.Добавить("Комментарий");
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ИспользуетсяПриЗагрузке",	одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

// Инициализирует колонки таблицы параметров
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПараметров()

	Колонки = ТабПараметры.Колонки;

	Колонки.Добавить("Код");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("УстанавливатьВДиалоге");
	Колонки.Добавить("ТипОбъекта",);
	Колонки.Добавить("ИспользуетсяПриЗагрузке");
	Колонки.Добавить("ПередаватьПараметрПриВыгрузке");
	Колонки.Добавить("АлгоритмПослеЗагрузкиПараметра");
	Колонки.Добавить("ПравилоКонвертации");
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ ОБРАБОТОК

// Инициализирует колонки таблицы обработок
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыОбработок()

	Колонки = ТабОбработки.Колонки;

	Колонки.Добавить("Код");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Параметры");
	Колонки.Добавить("Комментарий");
	Колонки.Добавить("ИспользуетсяПриВыгрузке",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ИспользуетсяПриЗагрузке",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЭтоОбработкаНастройки",	одОписаниеТипа("Булево"));
	Колонки.Добавить("Обработка");
	
КонецПроцедуры // ИнициализацияТаблицыОбработок()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТОВ, СВОЙСТВ И ЗНАЧЕНИЙ

// Осуществляет групповую инициализацию строк таблицы ПКО.
// Строковым идентификаторам источника и приемника ставится в соответствие ссылка на элемент справочника.
//
// Параметры:
//  КонфигурацияИсточник - ссылка на конфигурацию источник
//  КонфигурацияПриемник - ссылка на конфигурацию приемник
// 
Процедура ИнициализацияОбъектов(КонфигурацияИсточник, КонфигурацияПриемник) Экспорт

	ИнициализацияПКО(ТабПКО, КонфигурацияИсточник, КонфигурацияПриемник);

КонецПроцедуры // ИнициализацияОбъектов()

// Осуществляет инициализацию строк таблицы ПКО.
// Строковым идентификаторам источника и приемника ставится в соответствие ссылка на элемент справочника.
//
// Параметры:
//  СтрокиПКО            - коллекция строк ПКО
//  КонфигурацияИсточник - ссылка на конфигурацию источник
//  КонфигурацияПриемник - ссылка на конфигурацию приемник
// 
Процедура ИнициализацияПКО(СтрокиПКО, КонфигурацияИсточник, КонфигурацияПриемник)

	Для каждого Строка из СтрокиПКО.Строки Цикл
		
		ИсточникИПриемникСовпадают = (Строка.Источник = Строка.Приемник);

		Строка.Источник = ПолучитьОбъект(Строка.Источник, Справочники.Объекты, КонфигурацияИсточник);
		
		Если КонфигурацииИсточникаИПриемникаСовпадают
			И ИсточникИПриемникСовпадают Тогда
			
			Строка.Приемник = Строка.Источник;
			
		Иначе
			
			Строка.Приемник = ПолучитьОбъект(Строка.Приемник, Справочники.Объекты, КонфигурацияПриемник);
			
		КонецЕсли;
		

		ИнициализацияСвойств(Строка.Свойства, КонфигурацияИсточник, КонфигурацияПриемник, Строка.Источник, Строка.Приемник);
		ИнициализацияЗначений(Строка.Значения, КонфигурацияИсточник, КонфигурацияПриемник, Строка.Источник, Строка.Приемник);

		ИнициализацияПКО(Строка, КонфигурацияИсточник, КонфигурацияПриемник);
		
		мОбщееКоличествоСопоставленныхСтрокПКО = мОбщееКоличествоСопоставленныхСтрокПКО + 1;
		Если мОбщееКоличествоСопоставленныхСтрокПКО%5 = 0 Тогда
			Состояние("Сопоставлено объектам конфигурации: " + Строка(мОбщееКоличествоСопоставленныхСтрокПКО) + " из " + Строка(мОбщееКоличествоЗагруженныхПКО));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализацияПКО()

// Осуществляет инициализацию строк таблицы ПКС.
// Строковым идентификаторам источника и приемника ставится в соответствие ссылка на элемент справочника.
//
// Параметры:
//  СтрокаСвойство       - коллекция строк ПКС
//  КонфигурацияИсточник - ссылка на конфигурацию источник
//  КонфигурацияПриемник - ссылка на конфигурацию приемник
//  ОбъектИсточник       - ссылка на объект источник
//  ОбъектПриемник       - ссылка на объект приемник
// 
Процедура ИнициализацияСвойств(СтрокаСвойство, КонфигурацияИсточник, КонфигурацияПриемник, ОбъектИсточник, ОбъектПриемник)

	ИсточникИПриемникСовпадают = (ОбъектИсточник = ОбъектПриемник);
	
	Для каждого Строка из СтрокаСвойство.Строки Цикл

		Строка.СтрокаТипИсточника = Строка.ТипИсточника;
		Строка.СтрокаТипПриемника = Строка.ТипПриемника;
		
		Строка.СтрокаИсточник = Строка.Источник;
		Строка.СтрокаПриемник = Строка.Приемник;
		
		Строка.ТипИсточника = ПолучитьОбъект(Строка.ТипИсточника, Справочники.Объекты, КонфигурацияИсточник);
				
		Если ИсточникИПриемникСовпадают Тогда
			Строка.ТипПриемника = Строка.ТипИсточника;
		Иначе
		    Строка.ТипПриемника = ПолучитьОбъект(Строка.ТипПриемника, Справочники.Объекты, КонфигурацияПриемник);
		КонецЕсли;

		Строка.Источник = ПолучитьОбъект(Строка.Источник, Справочники.Свойства, ОбъектИсточник, Строка.ТипИсточника, Строка.ВидИсточника, Строка.ЭтоГруппа, ?(Строка.Родитель = Неопределено, Справочники.Свойства.ПустаяСсылка(), Строка.Родитель.Источник));
		
		Если ИсточникИПриемникСовпадают Тогда
			Строка.Приемник = Строка.Источник;
		Иначе
			Строка.Приемник = ПолучитьОбъект(Строка.Приемник, Справочники.Свойства, ОбъектПриемник, Строка.ТипПриемника, Строка.ВидПриемника, Строка.ЭтоГруппа, ?(Строка.Родитель = Неопределено, Справочники.Свойства.ПустаяСсылка(), Строка.Родитель.Приемник));
		КонецЕсли;
		
		ИнициализацияСвойств(Строка, КонфигурацияИсточник, КонфигурацияПриемник, ОбъектИсточник, ОбъектПриемник);
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализацияСвойств()

// Осуществляет инициализацию строк таблицы ПКЗ.
// Строковым идентификаторам источника и приемника ставится в соответствие ссылка на элемент справочника.
//
// Параметры:
//  СтрокаЗначение       - коллекция строк ПКЗ
//  КонфигурацияИсточник - ссылка на конфигурацию источник
//  КонфигурацияПриемник - ссылка на конфигурацию приемник
//  ОбъектИсточник       - ссылка на объект источник
//  ОбъектПриемник       - ссылка на объект приемник
// 
Процедура ИнициализацияЗначений(СтрокаЗначение, КонфигурацияИсточник, КонфигурацияПриемник, ОбъектИсточник, ОбъектПриемник)

	ИсточникИПриемникСовпадают = (ОбъектИсточник = ОбъектПриемник);
	
	Для каждого Строка из СтрокаЗначение.Строки Цикл

		Строка.Источник = ПолучитьОбъект(Строка.Источник, Справочники.Значения, ОбъектИсточник);
		
		Если ИсточникИПриемникСовпадают Тогда
			Строка.Приемник = Строка.Источник;
		Иначе
			Строка.Приемник = ПолучитьОбъект(Строка.Приемник, Справочники.Значения, ОбъектПриемник);
		КонецЕсли;

		ИнициализацияЗначений(Строка, КонфигурацияИсточник, КонфигурацияПриемник, ОбъектИсточник, ОбъектПриемник);
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализацияЗначений()

Функция НайтиОбъектРодительПоИмени(НаименованиеОбъекта, Владелец)
	
	Родитель = СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, НаименованиеОбъекта);
		
	Возврат Родитель;
	
КонецФункции

// Осуществляет поиск объекта в соответствующем справочнике по имени.
// Если не находит, тогда создает новый в соответствии с переданными параметрами.
//
// Параметры:
//  Имя             - строковое наименование объекта
//  Справочник      - значение типа "СправочникМенеджер" инициализируемого объекта
//  Владелец        - ссылка на владельца инициализируемого объекта
//  Тип             - ссылка на объект, соответствующий типу инициализируемого объекта
//  Вид             - значение Перечисления "ВидыСвойств"
//  ЭтоГруппа       - булево, объект является группой
//  Родитель        - родитель
//  ИскатьВИерархии - булево, если родитель не указан, то по этому флагу можно искать объекты только верхнего уровня
//  
// Возвращаемое значение:
//  Ссылка на полученный объект
// 
Функция ПолучитьОбъект(Имя, Справочник, Владелец, Тип = 0, Вид = 0, ЭтоГруппа = 0, Родитель = Неопределено)

	Если ПустаяСтрока(Имя) Тогда
		
		Возврат Справочник.ПустаяСсылка();
		
	КонецЕсли;
	
	ИмяОбъекта = Имя;
	
	Если Справочник = Справочники.Свойства Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1
		               |	Свойства.Ссылка
		               |ИЗ
		               |	Справочник.Свойства КАК Свойства
		               |ГДЕ
		               |	Свойства.Наименование = &Наименование
		               |	И Свойства.Владелец = &Владелец
		               |	И Свойства.ЭтоГруппа = &ЭтоГруппа
					   |	И Свойства.Родитель = &Родитель";
					   
		Если ЗначениеЗаполнено(Вид) Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС +  "И Свойства.Вид = &Вид";
		КонецЕсли;
					   
		Запрос.УстановитьПараметр("Наименование", Имя);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Родитель", Родитель);
		
		Если ЗначениеЗаполнено(Вид) Тогда
			Запрос.УстановитьПараметр("Вид", Перечисления.ВидыСвойств[Вид]);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ссылка = NULL Тогда
				НайденныйОбъект = Справочники.Свойства.ПустаяСсылка();
			Иначе
				НайденныйОбъект = Выборка.ссылка;
			КонецЕсли;
		Иначе
			НайденныйОбъект = Справочники.Свойства.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
	
		НайденныйОбъект = Справочник.НайтиПоНаименованию(Имя, Истина, Родитель, Владелец);
		
	КонецЕсли;

	Если НЕ НайденныйОбъект.Пустая() Тогда
		Возврат НайденныйОбъект;
	КонецЕсли;
		
	Если ЭтоГруппа Тогда
		
		НовыйОбъект = Справочник.СоздатьГруппу();
		
	Иначе
		
		НовыйОбъект = Справочник.СоздатьЭлемент();
		
	КонецЕсли;

	НовыйОбъект.Владелец = Владелец;
	
	Если Тип(Справочник) = Тип("СправочникМенеджер.Объекты") Тогда
		
		НовыйОбъект.Имя = Имя;
		
		Если      Имя = "Строка" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = ИмяОбъекта;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Строка;
			
		ИначеЕсли Имя = "Число" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = ИмяОбъекта;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Число;
			
		ИначеЕсли Имя = "Булево" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = ИмяОбъекта;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Булево;
			
		ИначеЕсли Имя = "Дата" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = ИмяОбъекта;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Дата;
			
		ИначеЕсли Имя = "ХранилищеЗначения" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = ИмяОбъекта;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.ХранилищеЗначения;
			
		ИначеЕсли Имя = "УникальныйИдентификатор" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = ИмяОбъекта;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.УникальныйИдентификатор;
			
		ИначеЕсли Найти(Имя, "СправочникСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Справочник;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("Справочники", Владелец);
			
		ИначеЕсли Найти(Имя, "ДокументСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Документ;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("Документы", Владелец);
			
		ИначеЕсли Найти(Имя, "ПеречислениеСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Перечисление;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("Перечисления", Владелец);
			
		ИначеЕсли Найти(Имя, "ПланВидовХарактеристикСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.ПланВидовХарактеристик;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("ПланыВидовХарактеристик", Владелец);
			
		ИначеЕсли Найти(Имя, "ПланВидовРасчетаСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.ПланВидовРасчета;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("ПланыВидовРасчета", Владелец);
			
		ИначеЕсли Найти(Имя, "ПланСчетов") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.ПланСчетов;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("ПланыСчетов", Владелец);
			
		ИначеЕсли Найти(Имя, "РегистрСведенийЗапись") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрСведений;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("РегистрыСведений", Владелец);
			
		ИначеЕсли Найти(Имя, "РегистрНакопленияЗапись") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрНакопления;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("РегистрыНакопления", Владелец);
			
		ИначеЕсли Найти(Имя, "РегистрБухгалтерииЗапись") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрБухгалтерии;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("РегистрыБухгалтерии", Владелец);
			
		ИначеЕсли Найти(Имя, "РегистрРасчетаЗапись") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрРасчета;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("РегистрыРасчета", Владелец);
			
		ИначеЕсли Найти(Имя, "БизнесПроцессСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.БизнесПроцесс;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("БизнесПроцессы", Владелец);
			
		ИначеЕсли Найти(Имя, "ТочкаМаршрутаБизнесПроцессаСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("БизнесПроцессы", Владелец);
			
		ИначеЕсли Найти(Имя, "ЗадачаСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.Задача;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("Задачи", Владелец);
			
		ИначеЕсли Найти(Имя, "ПланОбменаСсылка") Тогда
			
			НовыйОбъект.Имя      = глОтделитьРазделителем(ИмяОбъекта);
			НовыйОбъект.Синоним  = НовыйОбъект.Имя;
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.ПланОбмена;
			НовыйОбъект.Родитель = НайтиОбъектРодительПоИмени("Планы обмена", Владелец);
			
		ИначеЕсли Имя = "КонстантыНабор" Тогда
			
			НовыйОбъект.Имя      = ИмяОбъекта;
			НовыйОбъект.Синоним  = "Набор констант";
			НовыйОбъект.Тип      = Перечисления.ТипыОбъектов.НаборКонстант;
			
		КонецЕсли;
		
	ИначеЕсли Тип(Справочник) = Тип("СправочникМенеджер.Свойства") Тогда

		Если НЕ ПустаяСтрока(Вид) Тогда
			
			НовыйОбъект.Вид = Перечисления.ВидыСвойств[Вид];
			
		КонецЕсли;
		
		Если Тип <> 0
			И НЕ Тип.Пустая() Тогда
			
			НовыйТип = НовыйОбъект.Типы.Добавить();
			НовыйТип.Тип = Тип;
			НовыйОбъект.ТипыСтрокой = глТипыСвойстваСтрокой(НовыйОбъект);
							
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйОбъект.Наименование = Имя;
	
	Если Родитель <> Неопределено Тогда
		
		НовыйОбъект.Родитель = Родитель;
		
	КонецЕсли;
	
	Попытка
	
		НовыйОбъект.Записать();
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	НайденныйОбъект = НовыйОбъект.Ссылка;
		
	Возврат НайденныйОбъект;
	
КонецФункции // ПолучитьОбъект()

////////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ ПРАВИЛ, АЛГОРИТМОВ, ЗАПРОСОВ

Функция НайтиИмеющеесяПКО(ПКС, ИмяПКО, СсылкаНаКонвертацию)
	
	ПКО = Справочники.ПравилаКонвертацииОбъектов.НайтиПоКоду(ИмяПКО ,,, СсылкаНаКонвертацию);
		
	Если НЕ ПКО.Пустая() Тогда
		ПКС.ПравилоКонвертации  = ПКО;
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Осуществляет сохранение конвертации, источника и приемника в соответствии с переданными параметрами.
//
// Параметры:
//  ФлагВариантЗагрузкиКонвертации - вариант загрузки конвертации
//  ФлагНовыйИсточник              - ссылка на конфигурацию источник
//  ФлагНовыйПриемник              - ссылка на конфигурацию приемник
// 
Процедура Сохранить(ФлагВариантЗагрузкиКонвертации, ФлагНовыйИсточник, ФлагНовыйПриемник) Экспорт

	Если ЗагрузкаДанныхВОднойТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	//Источник
	Если ФлагНовыйИсточник Тогда
		НовыйИсточник = Справочники.Конфигурации.СоздатьЭлемент();
		
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.Конфигурации") Тогда
			НовыйИсточник.Имя = СокрЛП(Источник.Наименование);
		Иначе
			НовыйИсточник.Имя = Источник;
		КонецЕсли;
		
		НовыйИсточник.Наименование = НовыйИсточник.Имя;
		Если мКонвертация.Свойство("ИсточникВерсияПлатформы") Тогда
			НовыйИсточник.Приложение = мКонвертация["ИсточникВерсияПлатформы"];
		КонецЕсли;
		Если мКонвертация.Свойство("ИсточникВерсияКонфигурации") Тогда
			НовыйИсточник.Версия = мКонвертация["ИсточникВерсияКонфигурации"];
		КонецЕсли;		
		Если мКонвертация.Свойство("ИсточникСинонимКонфигурации") Тогда
			НовыйИсточник.Синоним = мКонвертация["ИсточникСинонимКонфигурации"];
		КонецЕсли;
		НовыйИсточник.Записать();
		Источник = НовыйИсточник.Ссылка;
		
	КонецЕсли;

	ИнициализацияГруппОбъектов(Источник);

	Если КонфигурацииИсточникаИПриемникаСовпадают Тогда
		
		Приемник = Источник;
		
	Иначе
		
		//Приемник
		Если ФлагНовыйПриемник Тогда
			НовыйПриемник = Справочники.Конфигурации.СоздатьЭлемент();
			Если ТипЗнч(Приемник) = Тип("СправочникСсылка.Конфигурации") Тогда
				НовыйПриемник.Имя = СокрЛП(Приемник.Наименование);
			Иначе
				НовыйПриемник.Имя = Приемник;
			КонецЕсли;
			НовыйПриемник.Наименование = НовыйПриемник.Имя;
			Если мКонвертация.Свойство("ПриемникВерсияПлатформы") Тогда
				НовыйПриемник.Приложение   = мКонвертация["ПриемникВерсияПлатформы"];
			КонецЕсли;
			Если мКонвертация.Свойство("ПриемникВерсияКонфигурации") Тогда
				НовыйПриемник.Версия = мКонвертация["ПриемникВерсияКонфигурации"];
			КонецЕсли;
			Если мКонвертация.Свойство("ПриемникСинонимКонфигурации") Тогда
				НовыйПриемник.Синоним = мКонвертация["ПриемникСинонимКонфигурации"];
			КонецЕсли;
			НовыйПриемник.Записать();
			Приемник = НовыйПриемник.Ссылка;
		КонецЕсли;

		ИнициализацияГруппОбъектов(Приемник);
		
	КонецЕсли;

	//Конвертация
	Если ФлагВариантЗагрузкиКонвертации = 0 Тогда
		
		мОбновление = Ложь;
		НоваяКонвертация = Справочники.Конвертации.СоздатьЭлемент();
		НоваяКонвертация.Код = Новый УникальныйИдентификатор();
		Если ТипЗнч(ЗагружаемаяКонвертация) = Тип("СправочникСсылка.Конвертации") Тогда
			НоваяКонвертация.Наименование = СокрЛП(ЗагружаемаяКонвертация.Наименование);
		Иначе
			НоваяКонвертация.Наименование = ЗагружаемаяКонвертация;
		КонецЕсли;
        НоваяКонвертация.Источник = Источник;
		НоваяКонвертация.Приемник = Приемник;
		НоваяКонвертация.Записать();
		ЗагружаемаяКонвертация = НоваяКонвертация.Ссылка;
		
	Иначе
        
		НоваяКонвертация = ЗагружаемаяКонвертация.ПолучитьОбъект();
		НоваяКонвертация.Источник = Источник;
		НоваяКонвертация.Приемник = Приемник;
		НоваяКонвертация.Записать();
        Если      ФлагВариантЗагрузкиКонвертации = 1 Тогда
        	мОбновление = Ложь;

			ВыборкаОбработки = Справочники.Обработки.Выбрать(, НоваяКонвертация.Ссылка);
			Пока ВыборкаОбработки.Следующий() Цикл
				Обработка = ВыборкаОбработки.ПолучитьОбъект();
				Обработка.Удалить();
			КонецЦикла;

			ВыборкаПараметры = Справочники.Параметры.Выбрать(, НоваяКонвертация.Ссылка);
			Пока ВыборкаПараметры.Следующий() Цикл
				Параметр = ВыборкаПараметры.ПолучитьОбъект();
				Параметр.Удалить();
			КонецЦикла;

			ВыборкаЗапросы = Справочники.Запросы.ВыбратьИерархически(, НоваяКонвертация.Ссылка);
			Пока ВыборкаЗапросы.Следующий() Цикл
				Запрос = ВыборкаЗапросы.ПолучитьОбъект();
				Запрос.Удалить();
			КонецЦикла;

			ВыборкаАлгоритмы = Справочники.Алгоритмы.ВыбратьИерархически(, НоваяКонвертация.Ссылка);
			Пока ВыборкаАлгоритмы.Следующий() Цикл
				Алгоритм = ВыборкаАлгоритмы.ПолучитьОбъект();
				Алгоритм.Удалить();
			КонецЦикла;

			ВыборкаПОД = Справочники.ПравилаОчисткиДанных.ВыбратьИерархически(, НоваяКонвертация.Ссылка);
			Пока ВыборкаПОД.Следующий() Цикл
				ПОД = ВыборкаПОД.ПолучитьОбъект();
				ПОД.Удалить();
			КонецЦикла;

			ВыборкаПВД = Справочники.ПравилаВыгрузкиДанных.ВыбратьИерархически(, НоваяКонвертация.Ссылка);
			Пока ВыборкаПВД.Следующий() Цикл
				ПВД = ВыборкаПВД.ПолучитьОбъект();
				ПВД.Удалить();
			КонецЦикла;

			ВыборкаПКО = Справочники.ПравилаКонвертацииОбъектов.ВыбратьИерархически(, НоваяКонвертация.Ссылка);
			Пока ВыборкаПКО.Следующий() Цикл
				ПКО = ВыборкаПКО.ПолучитьОбъект();
				ПКО.Удалить();
			КонецЦикла;
			
		ИначеЕсли ФлагВариантЗагрузкиКонвертации = 2 Тогда
			
			мОбновление = Истина;

			ВыборкаОбработки = Справочники.Обработки.Выбрать(, НоваяКонвертация.Ссылка);
			Пока ВыборкаОбработки.Следующий() Цикл
				Обработка = ВыборкаОбработки.ПолучитьОбъект();
				Обработка.Удалить();
			КонецЦикла;

			ВыборкаПараметры = Справочники.Параметры.Выбрать(, НоваяКонвертация.Ссылка);
			Пока ВыборкаПараметры.Следующий() Цикл
				Параметр = ВыборкаПараметры.ПолучитьОбъект();
				Параметр.Удалить();
			КонецЦикла;
			
			ПолучитьВсеПравилаКонвертации(НоваяКонвертация.Ссылка, мВсеПравилаКонвертации);
		КонецЕсли;
		
	КонецЕсли;
	
	Если мКонвертация.Свойство("УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике") Тогда
		НоваяКонвертация.УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике  = мКонвертация["УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике"];
	Иначе
		НоваяКонвертация.УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике = Ложь;
	КонецЕсли;
	РежимСовместимости = Неопределено;
	мКонвертация.Свойство("РежимСовместимости", РежимСовместимости);
	Если РежимСовместимости <> Неопределено Тогда
		Если РежимСовместимости = "РежимСовместимостиСБСП21" Тогда
			НоваяКонвертация.РежимСовместимости = Перечисления.РежимСовместимости.РежимСовместимостиСБСП21;
		ИначеЕсли РежимСовместимости = "РежимСовместимостиСБСП20" Тогда
			НоваяКонвертация.РежимСовместимости = Перечисления.РежимСовместимости.РежимСовместимостиСБСП20;
		КонецЕсли;
	Иначе
		НоваяКонвертация.РежимСовместимости = Перечисления.РежимСовместимости.ПустаяСсылка();
	КонецЕсли;
	Если мКонвертация.Свойство("ПослеЗагрузкиПравилОбмена") Тогда
		НоваяКонвертация.АлгоритмПослеЗагрузкиПравилОбмена  = мКонвертация["ПослеЗагрузкиПравилОбмена"];
	КонецЕсли;
	Если мКонвертация.Свойство("ПередПолучениемИзмененныхОбъектов") Тогда
		НоваяКонвертация.АлгоритмПередПолучениемИзмененныхОбъектов  = мКонвертация["ПередПолучениемИзмененныхОбъектов"];
	КонецЕсли;
	Если мКонвертация.Свойство("ПослеПолученияИнформацииОбУзлахОбмена") Тогда
		НоваяКонвертация.АлгоритмПослеПолученияИнформацииОбУзлахОбмена  = мКонвертация["ПослеПолученияИнформацииОбУзлахОбмена"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПередВыгрузкойДанных") Тогда
		НоваяКонвертация.АлгоритмПередВыгрузкойДанных     = мКонвертация["ПередВыгрузкойДанных"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПослеВыгрузкиДанных") Тогда
		НоваяКонвертация.АлгоритмПослеВыгрузкиДанных      = мКонвертация["ПослеВыгрузкиДанных"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПередЗагрузкойДанных") Тогда
		НоваяКонвертация.АлгоритмПередЗагрузкойДанных     = мКонвертация["ПередЗагрузкойДанных"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПослеЗагрузкиДанных") Тогда
		НоваяКонвертация.АлгоритмПослеЗагрузкиДанных      = мКонвертация["ПослеЗагрузкиДанных"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПередВыгрузкойОбъекта") Тогда
		НоваяКонвертация.АлгоритмПередВыгрузкойОбъекта    = мКонвертация["ПередВыгрузкойОбъекта"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПередКонвертациейОбъекта") Тогда
		НоваяКонвертация.АлгоритмПередКонвертациейОбъекта = мКонвертация["ПередКонвертациейОбъекта"];
	КонецЕсли;

    Если мКонвертация.Свойство("ПослеВыгрузкиОбъекта") Тогда
		НоваяКонвертация.АлгоритмПослеВыгрузкиОбъекта = мКонвертация["ПослеВыгрузкиОбъекта"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПередЗагрузкойОбъекта") Тогда
		НоваяКонвертация.АлгоритмПередЗагрузкойОбъекта = мКонвертация["ПередЗагрузкойОбъекта"];
	КонецЕсли;
    Если мКонвертация.Свойство("ПослеЗагрузкиОбъекта") Тогда
		НоваяКонвертация.АлгоритмПослеЗагрузкиОбъекта = мКонвертация["ПослеЗагрузкиОбъекта"];
	КонецЕсли;
	
	Если мКонвертация.Свойство("ПередОтправкойИнформацииОбУдалении") Тогда
		НоваяКонвертация.АлгоритмПередОтправкойИнформацииОбУдалении = мКонвертация["ПередОтправкойИнформацииОбУдалении"];
	КонецЕсли;
	Если мКонвертация.Свойство("ПриПолученииИнформацииОбУдалении") Тогда
		НоваяКонвертация.АлгоритмПриПолученииИнформацииОбУдалении = мКонвертация["ПриПолученииИнформацииОбУдалении"];
	КонецЕсли;
	Если мКонвертация.Свойство("ПослеЗагрузкиПараметров") Тогда
		НоваяКонвертация.АлгоритмПослеЗагрузкиПараметров = мКонвертация["ПослеЗагрузкиПараметров"];
	КонецЕсли;
	
	НоваяКонвертация.Записать();	
	
	мПКОДляПКС.Очистить();
	
	Состояние("Создание объектов конфигураций источника и приемника");
	мОбщееКоличествоСопоставленныхСтрокПКО = 0;
	ИнициализацияОбъектов(Источник, Приемник);

	Состояние("Запись загруженных объектов");
	
	мОбщееКоличествоЗаписанныхПКО = 0;
	ЗаписатьПКО(ТабПКО, ЗагружаемаяКонвертация);

	Состояние("Подстановка правил конвертации объектов в ПКС");
	КоличествоПодставленныхПКО = 0;
	ОбщееКоличествоОбъектов = мПКОДляПКС.Количество();
	Для каждого ПКОДляПКС из мПКОДляПКС Цикл

		ПКО = Справочники.ПравилаКонвертацииОбъектов.НайтиПоКоду(ПКОДляПКС.Значение,,, НоваяКонвертация.ссылка);
		
		Если ПКОДляПКС.Ключ.ПравилоКонвертации <> ПКО Тогда
			ПКС = ПКОДляПКС.Ключ.ПолучитьОбъект();
			ПКС.ПравилоКонвертации  = ПКО;
			ПКС.мУстанавливатьИмяИВидИсточникаПриемника = Ложь;
			ПКС.Записать();
		КонецЕсли;
		
		КоличествоПодставленныхПКО = КоличествоПодставленныхПКО + 1;
		Если КоличествоПодставленныхПКО%20 = 0 Тогда
			Состояние("Подставлено ПКО в ПКС: " + Строка(КоличествоПодставленныхПКО) + " из " + Строка(ОбщееКоличествоОбъектов));
		КонецЕсли;

	КонецЦикла;
	
	ЗаписатьАлгоритмы(ТабАлгоритмы, ЗагружаемаяКонвертация);

	ЗаписатьЗапросы(ТабЗапросы, ЗагружаемаяКонвертация);

	ЗаписатьПВД(ТабПВД, ЗагружаемаяКонвертация);
	
	ЗаписатьПОД(ТаблицаПравилОчистки, ЗагружаемаяКонвертация);

	// Сохраняем параметры
	Для Каждого СтрокаТаблицы Из ТабПараметры Цикл
		
		НовыйПараметр                       = Справочники.Параметры.СоздатьЭлемент();
		НовыйПараметр.Владелец              = ЗагружаемаяКонвертация;
		ЗаполнитьЗначенияСвойств(НовыйПараметр, СтрокаТаблицы);
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ТипОбъекта) Тогда
			
			СпрОбъект = Справочники.Объекты.НайтиПоНаименованию(СтрокаТаблицы.ТипОбъекта, ИСТИНА, , ЗагружаемаяКонвертация.Источник);
			Если СпрОбъект <> Справочники.Объекты.ПустаяСсылка() Тогда
				НовыйПараметр.ТипОбъекта = СпрОбъект;
			КонецЕсли;
			
		КонецЕсли;	
				
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ПравилоКонвертации) Тогда
			
			ПКО = Справочники.ПравилаКонвертацииОбъектов.НайтиПоКоду(СтрокаТаблицы.ПравилоКонвертации, , , НоваяКонвертация.Ссылка);
			НовыйПараметр.ПравилоКонвертации = ПКО;
						
		КонецЕсли;
		
		НовыйПараметр.Записать();
		
	КонецЦикла;

	ЗаписатьОбработки(ТабОбработки, ЗагружаемаяКонвертация);

	Состояние("Удаление правил обмена");
	КоличествоУдаленныхПравил = 0;
	ОбщееКоличествоПравил = мВсеПравилаКонвертации.Количество();
	Для каждого СсылкаДляУдаления из мВсеПравилаКонвертации Цикл
		
		КоличествоУдаленныхПравил = КоличествоУдаленныхПравил + 1;
		Если КоличествоУдаленныхПравил%20 = 0 Тогда
			Состояние("Удалено правил обмена: " + Строка(КоличествоУдаленныхПравил) + " из " + Строка(ОбщееКоличествоПравил));
		КонецЕсли;
		
		Если СсылкаДляУдаления.Значение.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектДляУдаления = СсылкаДляУдаления.Значение.ПолучитьОбъект();
		ОбъектДляУдаления.УстановитьПометкуУдаления(Истина, Ложь);
		
	КонецЦикла;
	
	Если ЗагрузкаДанныхВОднойТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // Сохранить()

Функция НайтиИлиСоздатьПКО(ПКО, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		
		Если ЭтоГруппа Тогда
			ПКО = Справочники.ПравилаКонвертацииОбъектов.СоздатьГруппу();
		Иначе	
			ПКО = Справочники.ПравилаКонвертацииОбъектов.СоздатьЭлемент();
		КонецЕсли;
		
		ПКО.Владелец     = Владелец;
		ПКО.Код          = Строка.Имя;
	КонецЕсли;
			
	Если Родитель <> Неопределено Тогда
		ПКО.Родитель = Родитель;
	КонецЕсли;

	Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(ПКО.Ссылка);
	КонецЕсли;

	ПКО.Наименование = Строка.Наименование;
	ПКО.Порядок      = Строка.Порядок;	
		
КонецФункции

Процедура ЗаписатьПКО(СтрокиПКО, Владелец, Родитель = Неопределено)

	Перем ПКО;
	
	Для каждого Строка из СтрокиПКО.Строки Цикл
		
		СоздаватьНовый = Истина;

		Если мОбновление Тогда
			
			СсылкаПКО = Справочники.ПравилаКонвертацииОбъектов.НайтиПоКоду(Строка.Имя, , , Владелец);
			Если НЕ СсылкаПКО.Пустая() Тогда
				ПКО = СсылкаПКО.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		НайтиИлиСоздатьПКО(ПКО, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);
		
        Если Строка.ЭтоГруппа Тогда

			НоваяГруппаПКО = ПКО;
			
			НоваяГруппаПКО.мЗагрузкаДанных = Истина;
			НоваяГруппаПКО.Записать();

			ЗаписатьПКО(Строка, Владелец, НоваяГруппаПКО.Ссылка);

			ЗаписатьПКС(Строка.Свойства, НоваяГруппаПКО.Ссылка, , Владелец);
			
		Иначе

			НовоеПКО = ПКО;
			
			НовоеПКО.НеЗапоминатьВыгруженные            = Строка.НеЗапоминатьВыгруженные;
			НовоеПКО.СинхронизироватьПоИдентификатору   = Строка.СинхронизироватьПоИдентификатору;
			НовоеПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли   = Строка.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли;
            НовоеПКО.НеВыгружатьОбъектыСвойствПоСсылкам = Строка.НеВыгружатьОбъектыСвойствПоСсылкам;
			НовоеПКО.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска = Строка.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска;
			НовоеПКО.ИспользоватьБыстрыйПоискПриЗагрузке = Строка.ИспользоватьБыстрыйПоискПриЗагрузке;
			НовоеПКО.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки = Строка.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки;
			НовоеПКО.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = Строка.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
			НовоеПКО.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Строка.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;
			НовоеПКО.ГенерироватьНовыйНомерИлиКодЕслиНеУказан = Строка.ГенерироватьНовыйНомерИлиКодЕслиНеУказан;
			НовоеПКО.НеЗамещать                         = Строка.НеЗамещать;
			НовоеПКО.Источник                           = Строка.Источник;
			НовоеПКО.Приемник                           = Строка.Приемник;
			
			Если Не ПустаяСтрока(Строка.ПриоритетОбъектовОбмена) Тогда
				
				Если Строка.ПриоритетОбъектовОбмена = "Ниже" Тогда
					НовоеПКО.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже;
				ИначеЕсли Строка.ПриоритетОбъектовОбмена = "Совпадает" Тогда
					НовоеПКО.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает;
				КонецЕсли
				
			Иначе
				
				НовоеПКО.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
				
			КонецЕсли;

			Если Строка.ЕстьОбработчикПередВыгрузкой Тогда
				НовоеПКО.АлгоритмПередВыгрузкойОбъекта = Строка.ПередВыгрузкой;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПриВыгрузке Тогда
				НовоеПКО.АлгоритмПриВыгрузкеОбъекта    = Строка.ПриВыгрузке;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПослеВыгрузки Тогда
				НовоеПКО.АлгоритмПослеВыгрузкиОбъекта  = Строка.ПослеВыгрузки;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПослеВыгрузкиВФайл Тогда
				НовоеПКО.АлгоритмПослеВыгрузкиОбъектаВФайлОбмена  = Строка.ПослеВыгрузкиВФайл;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПередЗагрузкой Тогда
				НовоеПКО.АлгоритмПередЗагрузкойОбъекта = Строка.ПередЗагрузкой;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПриЗагрузке Тогда
				НовоеПКО.АлгоритмПриЗагрузкеОбъекта    = Строка.ПриЗагрузке;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПослеЗагрузки Тогда
				НовоеПКО.АлгоритмПослеЗагрузкиОбъекта  = Строка.ПослеЗагрузки;
			КонецЕсли;
			Если Строка.ЕстьОбработчикПоследовательностейПолейПоиска Тогда
				НовоеПКО.АлгоритмПоследовательностьПолейПоиска  = Строка.ПоследовательностьПолейПоиска;
			КонецЕсли;
			
			НовоеПКО.НастройкаВариантовПоискаОбъектов.Очистить();
			Если Строка.НастройкаВариантовПоискаОбъектов <> Неопределено
				И Строка.НастройкаВариантовПоискаОбъектов.Количество() > 0 Тогда
				
				Для Каждого СтрокаТаблицы Из Строка.НастройкаВариантовПоискаОбъектов Цикл
					
					СтрокаТабЧасти = НовоеПКО.НастройкаВариантовПоискаОбъектов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТаблицы);
					
				КонецЦикла;
				
			КонецЕсли;
						
			НовоеПКО.мЗагрузкаДанных = Истина;
			НовоеПКО.Записать();

			ЗаписатьПКС(Строка.Свойства, НовоеПКО.Ссылка, , Владелец);
			ЗаписатьПКЗ(Строка.Значения, НовоеПКО.Ссылка);
			
		КонецЕсли;
		
		мОбщееКоличествоЗаписанныхПКО = мОбщееКоличествоЗаписанныхПКО + 1;
		Если мОбщееКоличествоЗаписанныхПКО%5 = 0 Тогда
			Состояние("Записано: " + Строка(мОбщееКоличествоЗаписанныхПКО) + " из " + Строка(мОбщееКоличествоЗагруженныхПКО));
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаписатьПКО()

Функция НайтиИлиСоздатьПКС(ПКС, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		
		Если ЭтоГруппа Тогда
			ПКС = Справочники.ПравилаКонвертацииСвойств.СоздатьГруппу();
		Иначе
			ПКС = Справочники.ПравилаКонвертацииСвойств.СоздатьЭлемент();
		КонецЕсли;
		
		ПКС.Владелец     = Владелец;
		ПКС.Код          = Строка.Имя;
	КонецЕсли;
			
	Если Родитель <> Неопределено Тогда
		ПКС.Родитель = Родитель;
	КонецЕсли;

	Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(ПКС.Ссылка);
	КонецЕсли;

	ПКС.Наименование             = Строка.Наименование;
	ПКС.Порядок                  = Строка.Порядок;
	ПКС.Источник                 = Строка.Источник;
	ПКС.Приемник                 = Строка.Приемник;
	ПКС.ПолучитьИзВходящихДанных = Строка.ПолучитьИзВходящихДанных;
	ПКС.НеЗамещать               = Строка.НеЗамещать;
	ПКС.Отключить                = Строка.Отключить;
	
	ПКС.ВидИсточника             = Строка.ВидИсточника;
	ПКС.ВидПриемника             = Строка.ВидПриемника;
	
	ПКС.ТипИсточника 			= Строка.СтрокаТипИсточника;
	ПКС.ТипПриемника 			= Строка.СтрокаТипПриемника;
		
	ПКС.ИмяИсточника 			= Строка.СтрокаИсточник;
	ПКС.ИмяПриемника 			= Строка.СтрокаПриемник;
	
	Если Строка.ЕстьОбработчикПередВыгрузкой Тогда
		ПКС.АлгоритмПередВыгрузкойСвойства  = Строка.ПередВыгрузкой;
	КонецЕсли;
		
	Если Строка.ЕстьОбработчикПриВыгрузке Тогда
		ПКС.АлгоритмПриВыгрузкеСвойства     = Строка.ПриВыгрузке;
	КонецЕсли;

	Если Строка.ЕстьОбработчикПослеВыгрузки Тогда
		ПКС.АлгоритмПослеВыгрузкиСвойства   = Строка.ПослеВыгрузки;
	КонецЕсли;	
	
	ПКС.мУстанавливатьИмяИВидИсточникаПриемника = Ложь;
		
КонецФункции

Процедура ЗаписатьПКС(СтрокиПКС, Владелец, Родитель = Неопределено, Конвертация = Неопределено)

	Перем ПКС;
	
	Для каждого Строка из СтрокиПКС.Строки Цикл
		
		СоздаватьНовый = Истина;
			
		Если мОбновление Тогда
			СсылкаПКС = Справочники.ПравилаКонвертацииСвойств.НайтиПоКоду(Строка.Имя, , , Владелец);
			Если НЕ СсылкаПКС.Пустая() Тогда
				ПКС = СсылкаПКС.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НайтиИлиСоздатьПКС(ПКС, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);

		Если Строка.ЭтоГруппа Тогда

			НоваяГруппаПКС = ПКС;
					
			Если Строка.ЕстьОбработчикПередОбработкойВыгрузки Тогда
				НоваяГруппаПКС.АлгоритмПередОбработкойВыгрузки = Строка.ПередОбработкойВыгрузки;
			КонецЕсли;

			Если Строка.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
				НоваяГруппаПКС.АлгоритмПослеОбработкиВыгрузки  = Строка.ПослеОбработкиВыгрузки;
			КонецЕсли;

			НоваяГруппаПКС.мЗагрузкаДанных = Истина;
			
			Если НЕ ПустаяСтрока(Строка.ПравилоКонвертации) Тогда
				
				НайденоПКО = НайтиИмеющеесяПКО(НоваяГруппаПКС, Строка.ПравилоКонвертации, Конвертация);
								
			КонецЕсли;
			
			НоваяГруппаПКС.ВыгружатьГруппуЧерезФайл = Строка.ВыгружатьГруппуЧерезФайл;
						
			НоваяГруппаПКС.Записать();
			
			Если НЕ ПустаяСтрока(Строка.ПравилоКонвертации)
				И НЕ НайденоПКО Тогда
				
				мПКОДляПКС.Вставить(НоваяГруппаПКС.Ссылка, Строка.ПравилоКонвертации);
				
			КонецЕсли;

			ЗаписатьПКС(Строка, Владелец, НоваяГруппаПКС.Ссылка, Конвертация);
			
		Иначе
			
			НовоеПКС = ПКС;
									
			НовоеПКС.Поиск                    = Строка.Поиск;
			
			НовоеПКС.АвтоматическиПриводитьЗначениеКДлинеПриемника = Строка.ПриводитьКДлине;
			НовоеПКС.ИмяПараметраДляПередачи = Строка.ИмяПараметраДляПередачи;
			НовоеПКС.ПоискПоДатеНаРавенство = Строка.ПоискПоДатеНаРавенство;
						
			НовоеПКС.мЗагрузкаДанных = Истина;
			
			Если НЕ ПустаяСтрока(Строка.ПравилоКонвертации) Тогда
				
				НайденоПКО = НайтиИмеющеесяПКО(НовоеПКС, Строка.ПравилоКонвертации, Конвертация);
								
			КонецЕсли;
			
			НовоеПКС.Записать();
			
			Если НЕ ПустаяСтрока(Строка.ПравилоКонвертации)
				И НЕ НайденоПКО Тогда
				
				мПКОДляПКС.Вставить(НовоеПКС.Ссылка, Строка.ПравилоКонвертации);
				
			КонецЕсли;		
						
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗаписатьПКС()

Функция НайтиИлиСоздатьПКЗ(ПКЗ, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		
		Если ЭтоГруппа тогда
			ПКЗ = Справочники.ПравилаКонвертацииЗначений.СоздатьГруппу();
		Иначе
			ПКЗ = Справочники.ПравилаКонвертацииЗначений.СоздатьЭлемент();
		КонецЕсли;
		
		ПКЗ.Владелец     = Владелец;
		ПКЗ.Код          = Строка.Имя;
	КонецЕсли;
			
	Если Родитель <> Неопределено Тогда
		ПКЗ.Родитель = Родитель;
	КонецЕсли;

	Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(ПКЗ.Ссылка);
	КонецЕсли;

	ПКЗ.Наименование = Строка.Наименование;
	ПКЗ.Комментарий  = Строка.Комментарий;
	ПКЗ.Описание     = Строка.Описание;
	ПКЗ.Порядок      = Строка.Порядок;
		
КонецФункции

Процедура ЗаписатьПКЗ(СтрокиПКЗ, Владелец, Родитель = Неопределено)
	
	Перем ПКЗ;
	
	Для каждого Строка из СтрокиПКЗ.Строки Цикл

		СоздаватьНовый = Истина;

		Если мОбновление Тогда
			
			СсылкаПКЗ = Справочники.ПравилаКонвертацииЗначений.НайтиПоКоду(Строка.Имя, , , Владелец);
			Если НЕ СсылкаПКЗ.Пустая() Тогда
				ПКЗ = СсылкаПКЗ.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		НайтиИлиСоздатьПКЗ(ПКЗ, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);
		
		Если Строка.ЭтоГруппа Тогда

			ПКЗ.Записать();

			ЗаписатьПКЗ(Строка, Владелец, ПКЗ.Ссылка);
			
		Иначе

			ПКЗ.Источник     = Строка.Источник;
			ПКЗ.Приемник     = Строка.Приемник;
			
			ПКЗ.Записать();
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗаписатьПКЗ()

Функция НайтиИлиСоздатьПВД(ПВД, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		
		Если ЭтоГруппа Тогда
			ПВД = Справочники.ПравилаВыгрузкиДанных.СоздатьГруппу();
		Иначе
			ПВД = Справочники.ПравилаВыгрузкиДанных.СоздатьЭлемент();
		КонецЕсли;
		
		ПВД.Владелец     = Владелец;
		ПВД.Код          = Строка.Имя;
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		ПВД.Родитель = Родитель;
	КонецЕсли;

	Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(ПВД.Ссылка);
	КонецЕсли;

	ПВД.Наименование = Строка.Наименование;
	ПВД.Порядок      = Строка.Порядок;
	ПВД.Комментарий  = Строка.Комментарий;
	ПВД.Описание     = Строка.Описание;
	ПВД.Отключить    = Строка.Отключить;
	
КонецФункции

Процедура ЗаписатьПВД(СтрокиПВД, Владелец, Родитель = Неопределено)

	Перем ПВД;
	
	Для каждого Строка из СтрокиПВД.Строки Цикл
		
		СоздаватьНовый = Истина;
			
		Если мОбновление Тогда
			СсылкаПВД = Справочники.ПравилаВыгрузкиДанных.НайтиПоКоду(Строка.Имя, , , Владелец);
			Если НЕ СсылкаПВД.Пустая() Тогда
				ПВД = СсылкаПВД.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НайтиИлиСоздатьПВД(ПВД, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);

		Если Строка.ЭтоГруппа Тогда

			ПВД.мЗагрузкаДанных = Истина;
		
            ПВД.Записать();
			
			ЗаписатьПВД(Строка, Владелец, ПВД.Ссылка);
			
		Иначе
			
			НовоеПВД = ПВД;

            Если НЕ ПустаяСтрока(Строка.СпособОтбораДанных) Тогда
				НовоеПВД.СпособОтбораДанных = Перечисления.СпособыОтбораДанных[Строка.СпособОтбораДанных];
			КонецЕсли;
			
			НовоеПВД.ВыбиратьДанныеДляВыгрузкиОднимЗапросом    = Строка.ВыбиратьДанныеДляВыгрузкиОднимЗапросом;
			НовоеПВД.НеВыгружатьОбъектыСозданныеВБазеПриемнике = Строка.НеВыгружатьОбъектыСозданныеВБазеПриемнике;

			Если НЕ ПустаяСтрока(Строка.ОбъектВыборки) Тогда
				НовоеПВД.ОбъектВыборки = ПолучитьОбъект(Строка.ОбъектВыборки, Справочники.Объекты, Владелец.Источник);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Строка.ПравилоКонвертации) Тогда
				НовоеПВД.ПравилоКонвертации = Справочники.ПравилаКонвертацииОбъектов.НайтиПоКоду(Строка.ПравилоКонвертации,,, Владелец);
			КонецЕсли;

			НовоеПВД.АлгоритмПередОбработкойПравила = Строка.ПередОбработкой;
			НовоеПВД.АлгоритмПослеОбработкиПравила  = Строка.ПослеОбработки;
			НовоеПВД.АлгоритмПередВыгрузкойОбъекта  = Строка.ПередВыгрузкой;
			НовоеПВД.АлгоритмПослеВыгрузкиОбъекта   = Строка.ПослеВыгрузки;

			НовоеПВД.мЗагрузкаДанных = Истина;
			НовоеПВД.Записать();

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция НайтиИлиСоздатьПОД(ПОД, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		
		Если ЭтоГруппа Тогда
			ПОД = Справочники.ПравилаОчисткиДанных.СоздатьГруппу();
		Иначе
			ПОД = Справочники.ПравилаОчисткиДанных.СоздатьЭлемент();
		КонецЕсли;
		
		ПОД.Владелец     = Владелец;
		ПОД.Код          = Строка.Имя;
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		ПОД.Родитель = Родитель;
	КонецЕсли;

	Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(ПОД.Ссылка);
	КонецЕсли;

	ПОД.Наименование = Строка.Наименование;
	ПОД.Порядок      = Строка.Порядок;
	ПОД.Комментарий  = Строка.Комментарий;
	ПОД.Описание     = Строка.Описание;
	ПОД.Отключить    = Строка.Отключить;
	
КонецФункции

Процедура ЗаписатьПОД(СтрокиПОД, Владелец, Родитель = Неопределено)

	Перем ПВД;
	
	Для каждого Строка из СтрокиПОД.Строки Цикл

		СоздаватьНовый = Истина;
			
		Если мОбновление Тогда
			СсылкаПОД = Справочники.ПравилаОчисткиДанных.НайтиПоКоду(Строка.Имя, , , Владелец);
			Если НЕ СсылкаПОД.Пустая() Тогда
				ПОД = СсылкаПОД.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НайтиИлиСоздатьПОД(ПОД, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);
		
		Если Строка.ЭтоГруппа Тогда

			НоваяГруппаПОД = ПОД;
			
			НоваяГруппаПОД.Записать();
			
			ЗаписатьПОД(Строка, Владелец, НоваяГруппаПОД.Ссылка);
			
		Иначе
			
			НовоеПОД = ПОД;

			СоздаватьНовый = Истина;
			
			Если НЕ ПустаяСтрока(Строка.СпособОтбораДанных) Тогда
				НовоеПОД.СпособОтбораДанных = Перечисления.СпособыОтбораДанных[Строка.СпособОтбораДанных];
			КонецЕсли;

			Если НЕ ПустаяСтрока(Строка.ОбъектВыборки) Тогда
				НовоеПОД.ОбъектВыборки = ПолучитьОбъект(Строка.ОбъектВыборки, Справочники.Объекты, Владелец.Источник);
			КонецЕсли;

			НовоеПОД.Непосредственно                = Строка.Непосредственно;
			НовоеПОД.АлгоритмПередОбработкойПравила = Строка.ПередОбработкой;
			НовоеПОД.АлгоритмПослеОбработкиПравила  = Строка.ПослеОбработки;
			НовоеПОД.АлгоритмПередУдалениемОбъекта  = Строка.ПередУдалением;

			НовоеПОД.Записать();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция НайтиИлиСоздатьАлгоритм(АЛГ, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		Если ЭтоГруппа Тогда
			АЛГ = Справочники.Алгоритмы.СоздатьГруппу();
		Иначе
			АЛГ = Справочники.Алгоритмы.СоздатьЭлемент();
	    КонецЕсли;
		АЛГ.Владелец     = Владелец;
		АЛГ.Код          = Строка.Код;
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		АЛГ.Родитель = Родитель;
	КонецЕсли;

    Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(АЛГ.Ссылка);
	КонецЕсли;

	АЛГ.Комментарий = Строка.Комментарий;			
	    	
КонецФункции

Процедура ЗаписатьАлгоритмы(СтрокиАлгоритмы, Владелец, Родитель = Неопределено)
	
	Перем АЛГ;

	Для каждого Строка из СтрокиАлгоритмы.Строки Цикл
		
		СоздаватьНовый = Истина;

		Если мОбновление Тогда
			СсылкаАлгоритм = Справочники.Алгоритмы.НайтиПоКоду(Строка.Код,,, Владелец);
			
			Если НЕ СсылкаАлгоритм.Пустая() Тогда
				АЛГ = СсылкаАлгоритм.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		НайтиИлиСоздатьАлгоритм(АЛГ, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);

		Если Строка.ЭтоГруппа Тогда

			АЛГ.Записать();

			ЗаписатьАлгоритмы(Строка, Владелец, АЛГ.Ссылка);
			
		Иначе

			АЛГ.Алгоритм                = Строка.Алгоритм;
			АЛГ.ИспользуетсяПриЗагрузке = Строка.ИспользуетсяПриЗагрузке;
			АЛГ.Параметры				= Строка.Параметры;

			АЛГ.Записать();
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаписатьАлгоритмы()

Функция НайтиИлиСоздатьЗапрос(ЗПР, ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель)
	
	Если СоздаватьНовый Тогда
		Если ЭтоГруппа Тогда
			ЗПР = Справочники.Запросы.СоздатьГруппу();
		Иначе
			ЗПР = Справочники.Запросы.СоздатьЭлемент();
	    КонецЕсли;
		ЗПР.Владелец     = Владелец;
		
		ЗПР.Код          = Строка.Код;
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		ЗПР.Родитель = Родитель;
	КонецЕсли;

	Если мОбновление Тогда
		мВсеПравилаКонвертации.Удалить(ЗПР.Ссылка);
	КонецЕсли;

	ЗПР.Комментарий = Строка.Комментарий;			
		    	
КонецФункции

Процедура ЗаписатьЗапросы(СтрокиЗапросы, Владелец, Родитель = Неопределено)
	
	Перем ЗПР;

	Для каждого Строка из СтрокиЗапросы.Строки Цикл

		СоздаватьНовый = Истина;

		Если мОбновление Тогда
			СсылкаЗапросы = Справочники.Запросы.НайтиПоКоду(Строка.Код,,, Владелец);
			Если НЕ СсылкаЗапросы.Пустая() Тогда
				ЗПР = СсылкаЗапросы.ПолучитьОбъект();
				СоздаватьНовый = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НайтиИлиСоздатьЗапрос(ЗПР, Строка.ЭтоГруппа, СоздаватьНовый, Владелец, Строка, Родитель);
		
		Если Строка.ЭтоГруппа Тогда

			ЗПР.Записать();

			ЗаписатьЗапросы(Строка, Владелец, ЗПР.Ссылка);
			
		Иначе

			ЗПР.ТекстЗапроса            = Строка.ТекстЗапроса;
			ЗПР.ИспользуетсяПриЗагрузке = Строка.ИспользуетсяПриЗагрузке;

			ЗПР.Записать();
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаписатьЗапросы()

Процедура ЗаписатьОбработки(СтрокиОбработки, Владелец)

	Для каждого Строка из СтрокиОбработки Цикл

		НоваяОбработка = Справочники.Обработки.СоздатьЭлемент();
		НоваяОбработка.Владелец = Владелец;
		НоваяОбработка.Код      = Строка.Код;

		НоваяОбработка.Наименование            = Строка.Наименование;
		НоваяОбработка.Комментарий             = Строка.Комментарий;
		НоваяОбработка.ИспользуетсяПриВыгрузке = Строка.ИспользуетсяПриВыгрузке;
		НоваяОбработка.ИспользуетсяПриЗагрузке = Строка.ИспользуетсяПриЗагрузке;
		НоваяОбработка.ЭтоОбработкаНастройки   = Строка.ЭтоОбработкаНастройки;
		НоваяОбработка.ХранилищеОбработки      = Строка.Обработка;

		Параметры = Строка.Параметры;
		Пока(НЕ ПустаяСтрока(Параметры)) Цикл
			ОстатокСтроки = глОтделитьРазделителем(Параметры, ",");
			НовыйПараметр = НоваяОбработка.Параметры.Добавить();
			НовыйПараметр.Параметр = Справочники.Параметры.НайтиПоКоду(СокрЛП(Параметры),,, Владелец);
			Параметры = ОстатокСтроки;
		КонецЦикла;

		НоваяОбработка.Записать();
			
	КонецЦикла;

КонецПроцедуры // ЗаписатьОбработки()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()

	мКонвертация = Новый Структура;

	// Типы
	одТипСтрока                  = Тип("Строка");
	одТипБулево                  = Тип("Булево");
	одТипЧисло                   = Тип("Число");
	одТипДата                    = Тип("Дата");
	одТипХранилищеЗначения       = Тип("ХранилищеЗначения");

	// Типы узлов xml
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;

	мПКОДляПКС = Новый Соответствие;

КонецПроцедуры // ИнициализацияРеквизитовИМодульныхПеременных()

Функция СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, НаименованиеЭлемента, ИмяЭлемента = "", СинонимЭлемента = "", Тип = Неопределено)
	
	ЭлементКонфигурации = Справочники.Объекты.НайтиПоНаименованию(НаименованиеЭлемента, 1,, Владелец);
	
	Если ЭлементКонфигурации.Пустая() Тогда
		
		Если Тип = Неопределено Тогда
			НовыйЭлемент = Справочники.Объекты.СоздатьГруппу();
			//НовыйЭлемент.УстановитьНовыйКод();
		Иначе
			НовыйЭлемент = Справочники.Объекты.СоздатьЭлемент();
		КонецЕсли;	

        НовыйЭлемент.Владелец     = Владелец;
        НовыйЭлемент.Имя          = ?(ПустаяСтрока(ИмяЭлемента), глПолучитьИмяГруппыОбъектовПоНаименованию(НаименованиеЭлемента), ИмяЭлемента);
		НовыйЭлемент.Наименование = НаименованиеЭлемента;
		НовыйЭлемент.Синоним      = ?(ПустаяСтрока(СинонимЭлемента), ИмяЭлемента, СинонимЭлемента);
		Если Тип <> Неопределено Тогда
			НовыйЭлемент.Тип = Тип;
		КонецЕсли;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
		
	Иначе	
		
		Возврат ЭлементКонфигурации;
		
	КонецЕсли;	
	
КонецФункции

// Осуществляет инициализацию объектов, определяющих базовые типы
// Параметры:
//  Владелец       - ссылка на элемент справочника "Конфигурации",
//                   являющуюся владельцем инициализируемых объектов.
// 
Процедура ИнициализацияГруппОбъектов(Владелец)

	СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "КонстантыНабор", "КонстантыНабор", "Набор констант", Перечисления.ТипыОбъектов.НаборКонстант);
	СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "Число", "Число", "Число", Перечисления.ТипыОбъектов.Число);
	СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "Строка", "Строка", "Строка", Перечисления.ТипыОбъектов.Строка);
	СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "Дата", "Дата", "Дата", Перечисления.ТипыОбъектов.Дата);


	Если Владелец.Приложение <> Перечисления.Приложения.Предприятие77 Тогда
		
		СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "Булево", "Булево", "Булево", Перечисления.ТипыОбъектов.Булево);
		СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "ХранилищеЗначения", "ХранилищеЗначения", "Хранилище значения", Перечисления.ТипыОбъектов.ХранилищеЗначения);
		СоздатьБазовыйЭлементДляОбъектовКонфигурации(Владелец, "УникальныйИдентификатор", "УникальныйИдентификатор", "Уникальный идентификатор", Перечисления.ТипыОбъектов.УникальныйИдентификатор);
		
	КонецЕсли;	

КонецПроцедуры // ИнициализацияГруппОбъектов()

// Осуществляет выбор всех правил конвертации в сооветствие
// Параметры:
//  Конвертация           - ссылка на элемент справочника "Конвертации".
//  ВсеПравилаКонвертации - соответствие, в которое будут выгружены правила.
// 
Процедура ПолучитьВсеПравилаКонвертации(Конвертация, ВсеПравилаКонвертации)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Конвертация", Конвертация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаКонвертацииОбъектов.Ссылка
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|ГДЕ
	|	ПравилаКонвертацииОбъектов.Владелец = &Конвертация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаКонвертацииСвойств.Ссылка
	|ИЗ
	|	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	|ГДЕ
	|	ПравилаКонвертацииСвойств.Владелец.Владелец = &Конвертация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаКонвертацииЗначений.Ссылка
	|ИЗ
	|	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
	|ГДЕ
	|	ПравилаКонвертацииЗначений.Владелец.Владелец = &Конвертация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаВыгрузкиДанных.Ссылка
	|ИЗ
	|	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
	|ГДЕ
	|	ПравилаВыгрузкиДанных.Владелец = &Конвертация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаОчисткиДанных.Ссылка
	|ИЗ
	|	Справочник.ПравилаОчисткиДанных КАК ПравилаОчисткиДанных
	|ГДЕ
	|	ПравилаОчисткиДанных.Владелец = &Конвертация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Алгоритмы.Ссылка
	|ИЗ
	|	Справочник.Алгоритмы КАК Алгоритмы
	|ГДЕ
	|	Алгоритмы.Владелец = &Конвертация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Запросы.Ссылка
	|ИЗ
	|	Справочник.Запросы КАК Запросы
	|ГДЕ
	|	Запросы.Владелец = &Конвертация"
	;

	ВыборкаРезЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);

	Пока ВыборкаРезЗапроса.Следующий() Цикл
		ВсеПравилаКонвертации.Вставить(ВыборкаРезЗапроса.Ссылка, ВыборкаРезЗапроса.Ссылка);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();
ИнициализацияТаблицыПКО();
ИнициализацияТаблицыАлгоритмов();
ИнициализацияТаблицыЗапросов();
ИнициализацияТаблицыПВД();
ИнициализацияТаблицыПравилОчистки();
ИнициализацияТаблицыОбработок();
ИнициализацияТаблицыПараметров();

мВсеПравилаКонвертации = Новый Соответствие();

ЗагрузкаДанныхВОднойТранзакции = Истина;

#КонецЕсли