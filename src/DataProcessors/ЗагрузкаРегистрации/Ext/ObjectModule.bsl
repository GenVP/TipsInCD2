////////////////////////////////////////////////////////////////////////////////
//
// АББРЕВИАТУРЫ
//
// ПРО  – правила регистрации объектов
// ПРОБ – правила регистрации по свойствам объекта
// ПРОП – правила регистрации по свойствам плана обмена
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПЕРЕМЕННЫЕ

Перем ФлагОшибки Экспорт; // глобальный флаг ошибки

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем одТипСтрока;
Перем одТипБулево;
Перем одТипЧисло;
Перем одТипДата;

Перем мПустаяДата; // значение пустой даты

Перем мШаблонДереваОтборПоСвойствамПланаОбмена; // шаблон дерева значений для правил регистрации по свойствам Плана обмена
Перем мШаблонДереваОтборПоСвойствамОбъекта;     // шаблон дерева значений для правил регистрации по свойствам Объекта

Перем мШаблонДереваСвойствОбъекта;  // шаблон дерева значений для свойств объекта с учетом вложенности
Перем мШаблонТаблицыСвойствОбъекта; // шаблон таблицы значений для свойств объекта

Перем СтруктураРегистрации; // структура, содержащая параметры регистрации

Перем ПравилаРегистрацииОбъектов; // Дерево значений с правилами регистрации объектов

Перем одСообщения; // Соответствие. Ключ - код ошибки, Значение - описание ошибки

// Соответствие элементов справочника Объекты и их наименований. Ключ - Наименование объекта, Значение - ссылка на объект
// Кэш для быстрой загрузки элементов
Перем мЭлементыСправочникаОбъекты;

Перем мЗапросПоСправочникуСвойств; // запрос по таблице справочника Свойства для поиска элемента справочника по ключевым полям

Перем ПолеСоставПланаОбмена; // ТаблицаЗначений - содержит описание элементов состава плана обмена

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Пакетная процедура для выполнения всех действий для загрузки регистрации:
// - проверка заполнения обязательных реквизитов обработки
// - парсинг файла правил регистрации
// - создание объектов ИБ на основании зачитанных данных из файла
//
// Параметры:
//  Нет.
// 
Процедура ВыполнитьЗагрузкуРегистрации() Экспорт
	
	#Если Клиент Тогда
	Состояние("Выполняется загрузка правил регистрации...");
	#КонецЕсли
	
	ФлагОшибки = Ложь;
	
	// выполняем проверку заполнения обязательных полей обработки
	ВыполнитьПроверкуЗаполненияПолейОбработки();
	
	Если ФлагОшибки Тогда
		Возврат; // выходим при ошибке заполнения реквизитов
	КонецЕсли;
	
	// выполняем парсинг XML-файла с правилами регистрации
	ЗагрузитьПравилаРегистрацииОбъектов();
	
	Если ФлагОшибки Тогда
		Возврат; // выходим при ошибке парсинга файла правил
	КонецЕсли;
	
	// создаем элементы справочников на основании загруженных данных из XML-файла
	ЗагрузитьРегистрацию();
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Читает заголовок файла правил регистрации и возвращает структуру с данными регистрации
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Тип: Структура. Структура с данными регистрации из файла
//
Функция ПолучитьДанныеРегистрацииИзФайла() Экспорт
	
	ФлагОшибки = Ложь;
	
	ЗагрузитьПравилаРегистрацииОбъектов(Истина);
	
	Если ФлагОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("УникальныйИдентификаторРегистрации", СтруктураРегистрации.Ид);
	Результат.Вставить("НаименованиеРегистрации",            СтруктураРегистрации.Наименование);
	Результат.Вставить("НаименованиеКонфигурации",           СтруктураРегистрации.СинонимКонфигурации);
	
	Возврат Результат;
КонецФункции

// Выполняет парсинг XML-файла с правилами регистрации. Заполняет значения коллекций по данным файла
//
// Параметры:
//  Нет.
// 
Процедура ЗагрузитьПравилаРегистрацииОбъектов(ЗагрузитьТолькоШапку = Ложь)
	
	ИмяВременногоФайла = ПолучитьИмяФайлаДляЗагрузкиПравил();
	
	Если ПустаяСтрока(ИмяВременногоФайла) Тогда
		
		СообщитьОбОшибкеОбработки(12);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		ЗагрузитьПравилаРегистрацииИзФайла(ИмяВременногоФайла, ЗагрузитьТолькоШапку);
	Исключение
		
		СообщитьОбОшибкеОбработки(1, ОписаниеОшибки());
		
	КонецПопытки;
	
	// удаляем временный файл правил, который был прочитан
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

// Создает объекты в информационной базе на основании ранее зачитанных данных из файла правил
// Создает объекты в ИБ типа:
// Справочник.Регистрации,
// Справочник.Конфигурации,
// Справочник.Объекты,
// Справочник.Свойства,
// Справочник.ПравилаРегистрацииОбъектов
//
// Параметры:
//  Нет.
// 
Процедура ЗагрузитьРегистрацию()
	
	мЭлементыСправочникаОбъекты = Новый Соответствие;
	
	Попытка
		
		Если РежимЗагрузкиКонфигурации = "Создать" Тогда
			
			ЗагрузитьЭлементКонфигурации();
			
		КонецЕсли;
		
		Если РежимЗагрузкиРегистрации = "Создать" Тогда
			
			ЗагрузитьЭлементРегистрации();
			
			СоздатьСоставПланаОбмена();
			
		КонецЕсли;
		
		ЗагрузитьЭлементыПравилРегистрацииОбъектов(ПравилаРегистрацииОбъектов);
		
	Исключение
		
		СообщитьОбОшибкеОбработки(2, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет проверку заполнения обязательных полей обработки
//
// Параметры:
//  Нет.
// 
Процедура ВыполнитьПроверкуЗаполненияПолейОбработки()
	
	Если ПустаяСтрока(ИмяФайлаПравил) Тогда
		
		СообщитьОбОшибкеОбработки(7);
		
	КонецЕсли;
	
	Если РежимЗагрузкиРегистрации = "Создать" Тогда
		
		Если ПустаяСтрока(НаименованиеНовойРегистрации) Тогда
			
			СообщитьОбОшибкеОбработки(8);
			
		КонецЕсли;
		
	Иначе // Обновить
		
		Если Регистрация.Пустая() Тогда
			
			СообщитьОбОшибкеОбработки(10);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимЗагрузкиКонфигурации = "Создать" Тогда
		
		Если ПустаяСтрока(НаименованиеНовойКонфигурации) Тогда
			
			СообщитьОбОшибкеОбработки(9);
			
		КонецЕсли;
		
	Иначе // Обновить
		
		Если Конфигурация.Пустая() Тогда
			
			СообщитьОбОшибкеОбработки(11);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ПРАВИЛ РЕГИСТРАЦИИ ОБЪЕКТОВ ИЗ XML-ФАЙЛА

Процедура ЗагрузитьПравилаРегистрацииИзФайла(ИмяФайла, ЗагрузитьТолькоШапку)
	
	Попытка
		Правила = Новый ЧтениеXML();
		Правила.ОткрытьФайл(ИмяФайла);
		Правила.Прочитать();
	Исключение
		СообщитьОбОшибкеОбработки(3, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		ЗагрузитьПравилаРегистрацииИзОбъекта(Правила, ЗагрузитьТолькоШапку);
	Исключение
		
		СообщитьОбОшибкеОбработки(1, ОписаниеОшибки());
		
	КонецПопытки;
	
	Правила.Закрыть();
	Правила = Неопределено;
	
КонецПроцедуры

Процедура ЗагрузитьПравилаРегистрацииИзОбъекта(Правила, ЗагрузитьТолькоШапку)
	
	Если Не (Правила.ЛокальноеИмя = "ПравилаРегистрации"
		   И Правила.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
		
		// Ошибка формата правил
		СообщитьОбОшибкеОбработки(4);
		
		Возврат;
		
	КонецЕсли;
	
	ПолеСоставПланаОбмена = Неопределено;
	
	// выполняем инициализацию коллекций для правил
	СтруктураРегистрации                     = ИнициализацияРегистрации();
	ПравилаРегистрацииОбъектов               = ИнициализацияТаблицыПРО();
	мШаблонДереваОтборПоСвойствамПланаОбмена = ИнициализацияТаблицыОтборПоСвойствамПланаОбмена();
	мШаблонДереваОтборПоСвойствамОбъекта     = ИнициализацияТаблицыОтборПоСвойствамОбъекта();
	мШаблонДереваСвойствОбъекта              = ИнициализацияДереваСвойств();
	мШаблонТаблицыСвойствОбъекта             = ИнициализацияТаблицыСвойств();
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		// Реквизиты регистрации
		Если ИмяУзла = "ВерсияФормата" Тогда
			
			СтруктураРегистрации.ВерсияФормата = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Ид" Тогда
			
			СтруктураРегистрации.Ид = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			СтруктураРегистрации.Наименование = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ДатаВремяСоздания" Тогда
			
			СтруктураРегистрации.ДатаВремяСоздания = одЗначениеЭлемента(Правила, одТипДата);
			
		ИначеЕсли ИмяУзла = "ПланОбмена" Тогда
			
			// атрибуты для плана обмена
			СтруктураРегистрации.ИмяПланаОбмена = одАтрибут(Правила, одТипСтрока, "Имя");
			
			СтруктураРегистрации.ПланОбмена = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			
			СтруктураРегистрации.Комментарий = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Конфигурация" Тогда
			
			// атрибуты конфигурации
			СтруктураРегистрации.ВерсияПлатформы     = одАтрибут(Правила, одТипСтрока, "ВерсияПлатформы");
			СтруктураРегистрации.ВерсияКонфигурации  = одАтрибут(Правила, одТипСтрока, "ВерсияКонфигурации");
			СтруктураРегистрации.СинонимКонфигурации = одАтрибут(Правила, одТипСтрока, "СинонимКонфигурации");
			
			// наименование конфигурации
			СтруктураРегистрации.Конфигурация = одЗначениеЭлемента(Правила, одТипСтрока);
			
			Если ЗагрузитьТолькоШапку Тогда
				
				Прервать; // выход
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СоставПланаОбмена" Тогда
			
			ЗагрузитьСоставПланаОбмена(Правила);
			
		ИначеЕсли ИмяУзла = "ПравилаРегистрацииОбъектов" Тогда
			
			ЗагрузитьПравилаРегистрации(Правила)
			
		ИначеЕсли (ИмяУзла = "ПравилаРегистрации") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСоставПланаОбмена(Правила)
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Элемент" Тогда
			
			ЗагрузитьЭлементСоставаПланаОбмена(Правила);
			
		ИначеЕсли (ИмяУзла = "СоставПланаОбмена") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементСоставаПланаОбмена(Правила)
	
	НоваяСтрока = СоставПланаОбмена().Добавить();
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Тип" Тогда
			
			НоваяСтрока.Тип = одЗначениеЭлемента(Правила, одТипСтрока);
			
			НоваяСтрока.Наименование = ПолучитьИмяОбъектаПоНаименованию(НоваяСтрока.Тип);
			
		ИначеЕсли ИмяУзла = "Авторегистрация" Тогда
			
			НоваяСтрока.Авторегистрация = одЗначениеЭлемента(Правила, одТипБулево);
			
		ИначеЕсли (ИмяУзла = "Элемент") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правил регистрации в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилаРегистрации(Правила)
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоРегистрации(Правила, ПравилаРегистрацииОбъектов);
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			ЗагрузитьГруппуПравилРегистрации(Правила, ПравилаРегистрацииОбъектов);
			
		ИначеЕсли (ИмяУзла = "ПравилаРегистрацииОбъектов") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПравилаРегистрации()

// Осуществляет загрузку правила регистрации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилоРегистрации(Правила, ДеревоЗначений)
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отключить = одАтрибут(Правила, одТипБулево, "Отключить");;
	НоваяСтрока.Валидное  = одАтрибут(Правила, одТипБулево, "Валидное");;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Код" Тогда
			
			НоваяСтрока.Код = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ОбъектНастройки" Тогда
			
			НоваяСтрока.ОбъектНастройки = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Описание" Тогда
			
			НоваяСтрока.Описание = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			
			НоваяСтрока.Комментарий = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "РеквизитРежимаВыгрузки" Тогда
			
			НоваяСтрока.РеквизитРежимаВыгрузки = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ОтборПоСвойствамПланаОбмена" Тогда
			
			// инициализируем коллекцию свойств для текущего ПРО
			НоваяСтрока.ОтборПоСвойствамПланаОбмена = мШаблонДереваОтборПоСвойствамПланаОбмена.Скопировать();
			
			ЗагрузитьДеревоОтбораПоСвойствамПланаОбмена(Правила, НоваяСтрока.ОтборПоСвойствамПланаОбмена);
			
		ИначеЕсли ИмяУзла = "ОтборПоСвойствамОбъекта" Тогда
			
			// инициализируем коллекцию свойств для текущего ПРО
			НоваяСтрока.ОтборПоСвойствамОбъекта = мШаблонДереваОтборПоСвойствамОбъекта.Скопировать();
			
			ЗагрузитьДеревоОтбораПоСвойствамОбъекта(Правила, НоваяСтрока.ОтборПоСвойствамОбъекта);
			
			// ОБРАБОТЧИКИ СОБЫТИЙ
			
		ИначеЕсли ИмяУзла = "ПередОбработкой" Тогда
			
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПриОбработке" Тогда
			
			НоваяСтрока.ПриОбработке = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПриОбработкеДополнительный" Тогда
			
			НоваяСтрока.ПриОбработкеДополнительный = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработки" Тогда
			
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Правило") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПравилоРегистрации()

Процедура ЗагрузитьДеревоОтбораПоСвойствамПланаОбмена(Правила, ДеревоЗначений)
	
	СтрокиДЗ = ДеревоЗначений.Строки;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "ЭлементОтбора" Тогда
			
			ЗагрузитьЭлементОтбораПланаОбмена(Правила, СтрокиДЗ.Добавить());
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			ЗагрузитьГруппуЭлементовОтбораПланаОбмена(Правила, СтрокиДЗ.Добавить());
			
		ИначеЕсли (ИмяУзла = "ОтборПоСвойствамПланаОбмена") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДеревоОтбораПоСвойствамОбъекта(Правила, ДеревоЗначений)
	
	СтрокиДЗ = ДеревоЗначений.Строки;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "ЭлементОтбора" Тогда
			
			ЗагрузитьЭлементОтбораОбъекта(Правила, СтрокиДЗ.Добавить());
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			ЗагрузитьГруппуЭлементовОтбораОбъекта(Правила, СтрокиДЗ.Добавить());
			
		ИначеЕсли (ИмяУзла = "ОтборПоСвойствамОбъекта") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правила регистрации объекта по свойству
//
// Параметры:
// 
Процедура ЗагрузитьЭлементОтбораПланаОбмена(Правила, НоваяСтрока)
	
	НоваяСтрока.ЭтоГруппа = Ложь;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "СвойствоОбъекта" Тогда
			
			Если НоваяСтрока.ЭтоСтрокаКонстанты Тогда
				
				НоваяСтрока.СвойствоОбъекта = одЗначениеЭлемента(Правила, Тип(НоваяСтрока.ТипСвойстваОбъекта));
				
			Иначе
				
				НоваяСтрока.СвойствоОбъекта = одЗначениеЭлемента(Правила, одТипСтрока);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СвойствоПланаОбмена" Тогда
			
			НоваяСтрока.СвойствоПланаОбмена = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ВидСравнения" Тогда
			
			НоваяСтрока.ВидСравнения = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ЭтоСтрокаКонстанты" Тогда
			
			НоваяСтрока.ЭтоСтрокаКонстанты = одЗначениеЭлемента(Правила, одТипБулево);
			
		ИначеЕсли ИмяУзла = "ТипСвойстваОбъекта" Тогда
			
			НоваяСтрока.ТипСвойстваОбъекта = одЗначениеЭлемента(Правила, одТипСтрока);
			
		// ТАБЛИЦЫ ВЛОЖЕННЫХ СВОЙСТВ ОБЪЕКТОВ
			
		ИначеЕсли ИмяУзла = "ТаблицаСвойствОбъекта" Тогда
			
			НоваяСтрока.ТаблицаСвойствОбъекта = мШаблонДереваСвойствОбъекта.Скопировать();
			
			ЗагрузитьТаблицуСвойств(Правила, НоваяСтрока.ТаблицаСвойствОбъекта);
			
		ИначеЕсли ИмяУзла = "ТаблицаСвойствПланаОбмена" Тогда
			
			НоваяСтрока.ТаблицаСвойствПланаОбмена = мШаблонДереваСвойствОбъекта.Скопировать();
			
			ЗагрузитьТаблицуСвойств(Правила, НоваяСтрока.ТаблицаСвойствПланаОбмена);
			
		ИначеЕсли (ИмяУзла = "ЭлементОтбора") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правила регистрации объекта по свойству
//
// Параметры:
// 
Процедура ЗагрузитьЭлементОтбораОбъекта(Правила, НоваяСтрока)
	
	НоваяСтрока.ЭтоГруппа = Ложь;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "СвойствоОбъекта" Тогда
			
			НоваяСтрока.СвойствоОбъекта = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ЗначениеКонстанты" Тогда
			
			Если ПустаяСтрока(НоваяСтрока.ВидЭлементаОтбора) Тогда
				
				НоваяСтрока.ВидЭлементаОтбора = глЭлементОтбораСвойствоЗначениеКонстанты();
				
			КонецЕсли;
			
			Если НоваяСтрока.ВидЭлементаОтбора = глЭлементОтбораСвойствоЗначениеКонстанты() Тогда
				
				НоваяСтрока.ЗначениеКонстанты = одЗначениеЭлемента(Правила, Тип(НоваяСтрока.ТипСвойстваОбъекта)); // только примитивные типы
				
			ИначеЕсли НоваяСтрока.ВидЭлементаОтбора = глЭлементОтбораСвойствоАлгоритмЗначения() Тогда
				
				НоваяСтрока.ЗначениеКонстанты = одЗначениеЭлемента(Правила, одТипСтрока); // строка
				
			Иначе
				
				НоваяСтрока.ЗначениеКонстанты = одЗначениеЭлемента(Правила, одТипСтрока); // строка
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ВидСравнения" Тогда
			
			НоваяСтрока.ВидСравнения = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ТипСвойстваОбъекта" Тогда
			
			НоваяСтрока.ТипСвойстваОбъекта = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Вид" Тогда
			
			НоваяСтрока.ВидЭлементаОтбора = одЗначениеЭлемента(Правила, одТипСтрока);
			
		// ТАБЛИЦЫ ВЛОЖЕННЫХ СВОЙСТВ ОБЪЕКТОВ
			
		ИначеЕсли ИмяУзла = "ТаблицаСвойствОбъекта" Тогда
			
			НоваяСтрока.ТаблицаСвойствОбъекта = мШаблонДереваСвойствОбъекта.Скопировать();
			
			ЗагрузитьТаблицуСвойств(Правила, НоваяСтрока.ТаблицаСвойствОбъекта);
			
		ИначеЕсли (ИмяУзла = "ЭлементОтбора") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку группы правил регистрации объекта по свойству
//
// Параметры:
//  Правила  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьГруппуЭлементовОтбораПланаОбмена(Правила, НоваяСтрока)
	
	НоваяСтрока.ЭтоГруппа = Истина;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "ЭлементОтбора" Тогда
			
			ЗагрузитьЭлементОтбораПланаОбмена(Правила, НоваяСтрока.Строки.Добавить());
		
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			
			ЗагрузитьГруппуЭлементовОтбораПланаОбмена(Правила, НоваяСтрока.Строки.Добавить());
			
		ИначеЕсли ИмяУзла = "БулевоЗначениеГруппы" Тогда
			
			НоваяСтрока.БулевоЗначениеГруппы = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Осуществляет загрузку группы правил регистрации объекта по свойству
//
// Параметры:
//  Правила  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьГруппуЭлементовОтбораОбъекта(Правила, НоваяСтрока)
	
	НоваяСтрока.ЭтоГруппа = Истина;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "ЭлементОтбора" Тогда
			
			ЗагрузитьЭлементОтбораОбъекта(Правила, НоваяСтрока.Строки.Добавить());
		
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			
			ЗагрузитьГруппуЭлементовОтбораОбъекта(Правила, НоваяСтрока.Строки.Добавить());
			
		ИначеЕсли ИмяУзла = "БулевоЗначениеГруппы" Тогда
			
			НоваяСтрока.БулевоЗначениеГруппы = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьГруппуПравилРегистрации(Правила, ДеревоЗначений)
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отключить = одАтрибут(Правила, одТипБулево, "Отключить");;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоРегистрации(Правила, НоваяСтрока);
			
		ИначеЕсли ИмяУзла = "Группа" И Правила.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЗагрузитьГруппуПравилРегистрации(Правила, НоваяСтрока);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			
			НоваяСтрока.Код = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Описание" Тогда
			
			НоваяСтрока.Описание = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			
			НоваяСтрока.Комментарий = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ТипГруппы" Тогда
			
			НоваяСтрока.ТипГруппы = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Группа" И Правила.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьГруппуПравилРегистрации()

Процедура ЗагрузитьТаблицуСвойств(Правила, ДеревоЗначений)
	
	Правила.Прочитать();
	
	Если Правила.ЛокальноеИмя = "Свойство" Тогда
		
		ЗагрузитьСвойствоОбъекта(Правила, ДеревоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСвойствоОбъекта(Правила, ДеревоЗначений)
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		Если ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Тип" Тогда
			
			НоваяСтрока.Тип = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Вид" Тогда
			
			НоваяСтрока.Вид = одЗначениеЭлемента(Правила, одТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Свойство") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход из цикла
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьТаблицуСвойств(Правила, НоваяСтрока); // вызов сложной рекурсии
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ РЕГИСТРАЦИИ

Процедура ЗагрузитьЭлементКонфигурации()
	
	КонфигурацияОбъект = Справочники.Конфигурации.СоздатьЭлемент();
	
	КонфигурацияОбъект.Имя          = НаименованиеНовойКонфигурации;
	КонфигурацияОбъект.Наименование = НаименованиеНовойКонфигурации;
	КонфигурацияОбъект.Версия       = СтруктураРегистрации.ВерсияКонфигурации;
	КонфигурацияОбъект.Синоним      = СтруктураРегистрации.СинонимКонфигурации;
	
	Приложение = ?(СтруктураРегистрации.ВерсияПлатформы = "7.7", Перечисления.Приложения.Предприятие77, Перечисления.Приложения.Предприятие80);
	
	КонфигурацияОбъект.Приложение   = Приложение;
	
	// записываем новый объект
	ЗаписатьОбъект(КонфигурацияОбъект);
	
	Конфигурация = КонфигурацияОбъект.Ссылка;
	
	// создаем примитивные типы для новой конфигурации
	ПолучитьСоздатьЭлементСправочникаОбъекты("Строка",                  Конфигурация);
	ПолучитьСоздатьЭлементСправочникаОбъекты("Число",                   Конфигурация);
	ПолучитьСоздатьЭлементСправочникаОбъекты("Булево",                  Конфигурация);
	ПолучитьСоздатьЭлементСправочникаОбъекты("Дата",                    Конфигурация);
	ПолучитьСоздатьЭлементСправочникаОбъекты("ХранилищеЗначения",       Конфигурация);
	ПолучитьСоздатьЭлементСправочникаОбъекты("УникальныйИдентификатор", Конфигурация);
	ПолучитьСоздатьЭлементСправочникаОбъекты("КонстантыНабор",          Конфигурация);
	
КонецПроцедуры

Процедура ЗагрузитьЭлементРегистрации()
	
	РегистрацияОбъект = Справочники.Регистрации.СоздатьЭлемент();
	
	РегистрацияОбъект.Наименование = НаименованиеНовойРегистрации;
	РегистрацияОбъект.Конфигурация = Конфигурация;
	РегистрацияОбъект.Комментарий  = СтруктураРегистрации.Комментарий;
	РегистрацияОбъект.ПланОбмена   = ПолучитьСоздатьЭлементСправочникаОбъекты(СтруктураРегистрации.ПланОбмена, Конфигурация);
	РегистрацияОбъект.УстановитьНовыйКод();
	
	ЗаписатьОбъект(РегистрацияОбъект);
	
	Регистрация = РегистрацияОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементыПравилРегистрацииОбъектов(ДеревоЗначений, Родитель = Неопределено)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		// получаем объект для модификации; новый или имеющийся
		Элемент = НайтиСоздатьЭлементПРО(СтрокаДерева);
		
		// значения реквизитов групп и элементов (общие)
		Элемент.Родитель     = Родитель;
		Элемент.Отключить    = СтрокаДерева.Отключить;
		Элемент.Описание     = СтрокаДерева.Описание;
		Элемент.Комментарий  = СтрокаДерева.Комментарий;
		Элемент.Наименование = СтрокаДерева.Наименование;
		
		Если СтрокаДерева.ЭтоГруппа Тогда // реквизиты для групп
			
			Элемент.ТипГруппы = ПолучитьЗначениеПеречисления("ТипыОбъектов", СтрокаДерева.ТипГруппы);
			
		Иначе // реквизиты для элементов
			
			Элемент.ОбъектНастройки = ПолучитьСоздатьЭлементСправочникаОбъекты(СтрокаДерева.ОбъектНастройки, Конфигурация);
			Элемент.Валидное        = СтрокаДерева.Валидное;
			
			Тип = ПолучитьСоздатьЭлементСправочникаОбъекты(глИмяТипаРежимовВыгрузкиОбъектовОбмена(), Конфигурация);
			
			Элемент.РеквизитРежимаВыгрузкиОбъектовОбмена = ПолучитьСоздатьЭлементСправочникаСвойства(СтрокаДерева.РеквизитРежимаВыгрузки, Регистрация.ПланОбмена, Тип, Перечисления.ВидыСвойств.Реквизит);
			
			// ДЕРЕВО ОТБОРА ПО СВОЙСТВАМ ОБЪЕКТА
			
			// инициализируем дерево отбора по свойствам объекта
			ОтборПоСвойствамОбъекта = Элемент.ИнициализацияДереваОтбораПоСвойствамОбъекта();
			
			ЗаполнитьДеревоОтбораПоСвойствамОбъекта(Элемент.ОбъектНастройки, СтрокаДерева.ОтборПоСвойствамОбъекта, ОтборПоСвойствамОбъекта);
			
			Элемент.ОтборПоСвойствамОбъекта = Новый ХранилищеЗначения(ОтборПоСвойствамОбъекта);
			
			// ДЕРЕВО ОТБОРА ПО СВОЙСТВАМ ПЛАНА ОБМЕНА
			
			// инициализируем дерево отбора по свойствам плана обмена
			ОтборПоСвойствамПланаОбмена = Элемент.ИнициализацияДереваОтбораПоСвойствамПланаОбмена();
			
			ЗаполнитьДеревоОтбораПоСвойствамПланаОбмена(Элемент.ОбъектНастройки, СтрокаДерева.ОтборПоСвойствамПланаОбмена, ОтборПоСвойствамПланаОбмена);
			
			Элемент.ОтборПоСвойствамПланаОбмена = Новый ХранилищеЗначения(ОтборПоСвойствамПланаОбмена);
			
			// ОБРАБОТЧИКИ СОБЫТИЙ
			
			Элемент.АлгоритмПередОбработкойПравила            = СтрокаДерева.ПередОбработкой;
			Элемент.АлгоритмПриОбработкеПравила               = СтрокаДерева.ПриОбработке;
			Элемент.АлгоритмПриОбработкеДополнительныйПравила = СтрокаДерева.ПриОбработкеДополнительный;
			Элемент.АлгоритмПослеОбработкиПравила             = СтрокаДерева.ПослеОбработки;
			
		КонецЕсли;
		
		// записываем модифицированный объект
		ЗаписатьОбъект(Элемент);
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			// рекурсивно вызываем процедуру для загрузки элементов текущей группы
			ЗагрузитьЭлементыПравилРегистрацииОбъектов(СтрокаДерева, Элемент.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОбъект(Объект)
	
	Попытка
		
		// устанавливаем режим загрузки данных
		Объект.ОбменДанными.Загрузка = Истина;
		
		Объект.Записать();
		
	Исключение
		
		НСтрока = НСтр("ru = 'Ошибка при записи объекта: %1. Описание ошибки: %2'");
		
		СтрокаСообщения = СтроковыеФункции.ПодставитьПараметрыВСтроку(НСтрока, Строка(Объект), ОписаниеОшибки());
		
		СообщитьОбОшибкеОбработки(5, СтрокаСообщения);
		
		ВызватьИсключение СтрокаСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоОтбораПоСвойствамОбъекта(ОбъектНастройки, ДеревоЗначенийИсточник, ДеревоЗначенийПриемник)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначенийИсточник.Строки Цикл
		
		НоваяСтрока = ДеревоЗначенийПриемник.Строки.Добавить();
		
		Если СтрокаДерева.ЭтоГруппа Тогда // свойства для группы элементов отбора
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, "ЭтоГруппа");
			
			НоваяСтрока.БулевоЗначениеГруппы = ПолучитьЗначениеПеречисления("БулевыОперации", СтрокаДерева.БулевоЗначениеГруппы);
			
			// добавляем вложенные элементы отбора
			ЗаполнитьДеревоОтбораПоСвойствамОбъекта(ОбъектНастройки, СтрокаДерева, НоваяСтрока);
			
		Иначе // свойства для элемента отбора
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, "ЗначениеКонстанты, СвойствоОбъекта, ЭтоГруппа, ВидЭлементаОтбора");
			
			НоваяСтрока.ТипСвойстваОбъекта   = ПолучитьСоздатьЭлементСправочникаОбъекты(СтрокаДерева.ТипСвойстваОбъекта, Конфигурация);
			НоваяСтрока.ВидСравнения         = ПолучитьЗначениеПеречисления("ВидыСравнения", СтрокаДерева.ВидСравнения);
			
			// создаем объекты и свойства для текущего объекта настройки
			ТаблицаСвойств = мШаблонТаблицыСвойствОбъекта.Скопировать();
			
			СоздатьОбъектыИСвойстваПоТаблицеВложенныхСвойств(ОбъектНастройки, СтрокаДерева.ТаблицаСвойствОбъекта, ТаблицаСвойств);
			
			НоваяСтрока.ТаблицаСвойствОбъекта = ТаблицаСвойств;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоОтбораПоСвойствамПланаОбмена(ОбъектНастройки, ДеревоЗначенийИсточник, ДеревоЗначенийПриемник)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначенийИсточник.Строки Цикл
		
		НоваяСтрока = ДеревоЗначенийПриемник.Строки.Добавить();
		
		Если СтрокаДерева.ЭтоГруппа Тогда // свойства для группы элементов отбора
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, "ЭтоГруппа");
			
			НоваяСтрока.БулевоЗначениеГруппы = ПолучитьЗначениеПеречисления("БулевыОперации", СтрокаДерева.БулевоЗначениеГруппы);
			
			// добавляем вложенные элементы отбора
			ЗаполнитьДеревоОтбораПоСвойствамПланаОбмена(ОбъектНастройки, СтрокаДерева, НоваяСтрока);
			
		Иначе // свойства для элемента отбора
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, "СвойствоОбъекта, СвойствоПланаОбмена, ЭтоГруппа, ЭтоСтрокаКонстанты");
			
			НоваяСтрока.ТипСвойстваОбъекта   = ПолучитьСоздатьЭлементСправочникаОбъекты(СтрокаДерева.ТипСвойстваОбъекта, Конфигурация);
			НоваяСтрока.ВидСравнения         = ПолучитьЗначениеПеречисления("ВидыСравнения", СтрокаДерева.ВидСравнения);
			
			// создаем объекты и свойства для текущего объекта настройки
			ТаблицаСвойств = мШаблонТаблицыСвойствОбъекта.Скопировать();
			
			СоздатьОбъектыИСвойстваПоТаблицеВложенныхСвойств(ОбъектНастройки, СтрокаДерева.ТаблицаСвойствОбъекта, ТаблицаСвойств);
			
			НоваяСтрока.ТаблицаСвойствОбъекта = ТаблицаСвойств;
			
			// создаем объекты и свойства для ПланаОбмена регистрации
			ТаблицаСвойств = мШаблонТаблицыСвойствОбъекта.Скопировать();
			
			СоздатьОбъектыИСвойстваПоТаблицеВложенныхСвойств(Регистрация.ПланОбмена, СтрокаДерева.ТаблицаСвойствПланаОбмена, ТаблицаСвойств);
			
			НоваяСтрока.ТаблицаСвойствПланаОбмена = ТаблицаСвойств;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбъектыИСвойстваПоТаблицеВложенныхСвойств(Владелец, ДеревоЗначений, ТаблицаСвойств, Родитель = Неопределено)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		// заполняем таблицу свойств
		ЗаполнитьЗначенияСвойств(ТаблицаСвойств.Добавить(), СтрокаДерева);
		
		Вид = ПолучитьЗначениеПеречисления("ВидыСвойств", СтрокаДерева.Вид);
		
		Если Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть Тогда
			
			Наименование = СтрЗаменить(СтрЗаменить(СтрокаДерева.Наименование,"[",""),"]","");
			
			Тип = Справочники.Объекты.ПустаяСсылка();
			
			Родитель = ПолучитьСоздатьЭлементСправочникаСвойства(Наименование, Владелец, Тип, Вид, Родитель, Истина);
			
			// создаем вложенное свойство рекурсивным вызовом
			СоздатьОбъектыИСвойстваПоТаблицеВложенныхСвойств(Владелец, СтрокаДерева, ТаблицаСвойств, Родитель);
			
		Иначе
			
			Тип = ПолучитьСоздатьЭлементСправочникаОбъекты(СтрокаДерева.Тип, Конфигурация);
			
			ПолучитьСоздатьЭлементСправочникаСвойства(СтрокаДерева.Наименование, Владелец, Тип, Вид, Родитель);
			
			// создаем вложенное свойство рекурсивным вызовом
			СоздатьОбъектыИСвойстваПоТаблицеВложенныхСвойств(Тип, СтрокаДерева, ТаблицаСвойств);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьСоставПланаОбмена()
	
	// Создаем группу состава плана обмена {Состав}
	Родитель = ПолучитьСоздатьЭлементСправочникаСвойства(
					НСтр("ru = '{Состав}'"),
					Регистрация.ПланОбмена,
					Справочники.Объекты.ПустаяСсылка(),
					Перечисления.ВидыСвойств.СоставПланаОбмена,
					Неопределено,
					Истина);
	//
	
	// Создаем элементы состава плана обмена
	Для Каждого ЭлементСостава Из СоставПланаОбмена() Цикл
		
		Тип = ПолучитьСоздатьЭлементСправочникаОбъекты(ЭлементСостава.Тип, Конфигурация);
		
		ПолучитьСоздатьЭлементСправочникаСвойства(
					ЭлементСостава.Наименование,
					Регистрация.ПланОбмена,
					Тип,
					Перечисления.ВидыСвойств.ЭлементСоставаПланаОбмена,
					Родитель,
					Ложь,
					ЭлементСостава.Авторегистрация);
		//
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьЭлементПРО(СтрокаДерева)
	
	Элемент = Справочники.ПравилаРегистрацииОбъектов.НайтиПоКоду(СтрокаДерева.Код,,, Регистрация);
	
	Если Элемент.Пустая() Тогда
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			Элемент = Справочники.ПравилаРегистрацииОбъектов.СоздатьГруппу();
		Иначе
			Элемент = Справочники.ПравилаРегистрацииОбъектов.СоздатьЭлемент();
		КонецЕсли;
		
		// для новых объектов сразу назначаем ключевые реквизиты поиска
		Элемент.Владелец = Регистрация;
		Элемент.Код      = СтрокаДерева.Код;
		
		Возврат Элемент;
		
	Иначе
		
		Возврат Элемент.ПолучитьОбъект();
		
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СообщитьОбОшибкеОбработки(Код = -1, ОписаниеОшибки = "")
	
	Если одСообщения = Неопределено Тогда
		одСообщения = ИнициализацияСообщений();
	КонецЕсли;
	
	СтрокаСообщения = одСообщения[Код];
	
	СтрокаСообщения = ?(СтрокаСообщения = Неопределено, "", СтрокаСообщения);
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	СообщитьОбОшибке(СтрокаСообщения, ФлагОшибки);
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ИмяВременногоФайла)
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Инициализирует колонки коллекции вложенных свойств объекта
//
// Параметры:
//  Нет.
// 
Процедура СоздатьКолонкиКоллекцииСвойствОбъекта(Коллекция)
	
	Колонки = Коллекция.Колонки;
	
	Колонки.Добавить("Уровень",      одОписаниеТипа("Число"));
	Колонки.Добавить("Наименование", одОписаниеТипа("Строка"));
	Колонки.Добавить("Тип",          одОписаниеТипа("Строка"));
	Колонки.Добавить("Вид",          одОписаниеТипа("Строка"));
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДляЗагрузкиПравил()
	
	// возвращаемое значение функции
	ИмяФайлаДляЗагрузки = "";
	
	ФайлЗапакован = глОпределитьФайлСжат(ИмяФайлаПравил);
	
	Если ФайлЗапакован Тогда
		
		ИмяФайлаДляЗагрузки = глРаспаковатьZipФайл(ИмяФайлаПравил);
		
	Иначе
		
		// копируем файл правил в каталог временных файлов
		ИмяФайлаДляЗагрузки = ПолучитьИмяВременногоФайла("xml");
		
		Попытка
			КопироватьФайл(ИмяФайлаПравил, ИмяФайлаДляЗагрузки);
		Исключение
			
			СообщитьОбОшибкеОбработки(6, ОписаниеОшибки());
			
			ИмяФайлаДляЗагрузки = "";
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ИмяФайлаДляЗагрузки;
КонецФункции

// Осуществляет поиск элемента справочника Объекты по ключевым полям. Если объект не найден, то создает новый элемент
//
// Параметры:
//  Наименование - Строка - наименование элемента. Например: "СправочникСсылка.Номенклатура"
//  Владелец     - СправочникСсылка.Конфигурации - владелец элемента
//  Родитель     - СправочникСсылка.Объекты, Неопределено - родитель элемента (необязательный).
//  ЭтоГруппа    - Булево - признак группы элемента (необязательный).
// 
// Возвращаемое значение:
//  СправочникСсылка.Объекты - найденный или созданный элемент справочника Объекты.
//
Функция ПолучитьСоздатьЭлементСправочникаОбъекты(Наименование, Владелец, Родитель = Неопределено, ЭтоГруппа = Ложь)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Справочники.Объекты.ПустаяСсылка();
	КонецЕсли;
	
	// получаем элемент из соответствия ранее найденных элементов
	Элемент = мЭлементыСправочникаОбъекты[Наименование];
	
	Если Элемент <> Неопределено Тогда
		Возврат Элемент;
	КонецЕсли;
	
	Элемент = Справочники.Объекты.НайтиПоНаименованию(Наименование, Истина, Родитель, Владелец);
	
	Если Не Элемент.Пустая() Тогда
		
		// заполняем соответствие найденных объектов
		мЭлементыСправочникаОбъекты.Вставить(Наименование, Элемент);
		
		Возврат Элемент; // возвращаем найденное значение ссылки
		
	КонецЕсли;
	
	// ссылку не нашли; создаем новый объект
	Если ЭтоГруппа Тогда
		
		ЭлементОбъект = Справочники.Объекты.СоздатьГруппу();
		
	Иначе
		
		ЭлементОбъект = Справочники.Объекты.СоздатьЭлемент();
		
	КонецЕсли;
	
	// назначаем ключевые свойства объекта для поиска ссылки
	ЭлементОбъект.Наименование = Наименование;
	ЭлементОбъект.Родитель     = Родитель;
	ЭлементОбъект.Владелец     = Владелец;
	
	Если ЭтоГруппа Тогда
		
		Имя = глПолучитьИмяГруппыОбъектовПоНаименованию(Наименование);
		
		ЭлементОбъект.Имя     = Имя;
		ЭлементОбъект.Синоним = Имя;
		
	Иначе
		
		Если Найти(Наименование, "СправочникСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Справочник;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("Справочники", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ДокументСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Документ;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("Документы", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ПеречислениеСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Перечисление;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("Перечисления", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ПланВидовХарактеристикСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.ПланВидовХарактеристик;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("ПланыВидовХарактеристик", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ПланВидовРасчетаСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.ПланВидовРасчета;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("ПланыВидовРасчета", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ПланСчетов") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.ПланСчетов;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("ПланыСчетов", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "РегистрСведенийЗапись") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрСведений;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("РегистрыСведений", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "РегистрНакопленияЗапись") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрНакопления;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("РегистрыНакопления", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "РегистрБухгалтерииЗапись") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрБухгалтерии;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("РегистрыБухгалтерии", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "РегистрРасчетаЗапись") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.РегистрРасчета;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("РегистрыРасчета", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "БизнесПроцессСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.БизнесПроцесс;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("БизнесПроцессы", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ТочкаМаршрутаБизнесПроцессаСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("БизнесПроцессы", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ЗадачаСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Задача;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("Задачи", Владелец,, Истина);
			
		ИначеЕсли Найти(Наименование, "ПланОбменаСсылка") Тогда
			
			Имя = ПолучитьИмяОбъектаПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Имя;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.ПланОбмена;
			ЭлементОбъект.Родитель = ПолучитьСоздатьЭлементСправочникаОбъекты("ПланыОбмена", Владелец,, Истина);
			
			
		// ПРИМИТИВНЫЕ ТИПЫ
			
		ИначеЕсли Наименование = "Строка" Тогда
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Наименование;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Строка;
			
		ИначеЕсли Наименование = "Число" Тогда
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Наименование;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Число;
			
		ИначеЕсли Наименование = "Булево" Тогда
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Наименование;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Булево;
			
		ИначеЕсли Наименование = "Дата" Тогда
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Наименование;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.Дата;
			
		ИначеЕсли Наименование = "ХранилищеЗначения" Тогда
			
			Имя = глПолучитьИмяГруппыОбъектовПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.ХранилищеЗначения;
			
		ИначеЕсли Наименование = "УникальныйИдентификатор" Тогда
			
			Имя = глПолучитьИмяГруппыОбъектовПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.УникальныйИдентификатор;
			
		ИначеЕсли Наименование = "КонстантыНабор" Тогда
			
			Имя = глПолучитьИмяГруппыОбъектовПоНаименованию(Наименование);
			
			ЭлементОбъект.Имя      = Наименование;
			ЭлементОбъект.Синоним  = Имя;
			ЭлементОбъект.Тип      = Перечисления.ТипыОбъектов.НаборКонстант;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// записываем новый объект
	ЗаписатьОбъект(ЭлементОбъект);
	
	// заполняем соответствие загруженных объектов
	мЭлементыСправочникаОбъекты.Вставить(Наименование, ЭлементОбъект.Ссылка);
	
	Возврат ЭлементОбъект.Ссылка;
	
КонецФункции

// Осуществляет поиск элемента справочника Свойства по ключевым полям. Если объект не найден, то создает новый элемент
//
// Параметры:
//  Наименование - Строка - наименование элемента. Например, "ПометкаУдаления"
//  Владелец     - СправочникСсылка.Объекты - владелец элемента
//  Тип          - СправочникСсылка.Объекты - задает тип свойства
//  Вид          - ПеречислениеСсылка.ВидыСвойств - вид свойства. Например, "Реквизит" (необязательный)
//  Родитель     - СправочникСсылка.Свойства - родитель элемента (необязательный)
//  ЭтоГруппа    - Булево - признак группы элемента (необязательный)
// 
// Возвращаемое значение:
//  СправочникСсылка.Свойства - найденный или созданный элемент справочника Свойства.
//
Функция ПолучитьСоздатьЭлементСправочникаСвойства(Наименование, Владелец, Тип, Вид = Неопределено, Родитель = Неопределено, ЭтоГруппа = Ложь, Авторегистрация = Ложь)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Справочники.Свойства.ПустаяСсылка();
	КонецЕсли;
	
	Если Вид = Неопределено Тогда
		Вид = Перечисления.ВидыСвойств.ПустаяСсылка();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.Свойства.ПустаяСсылка();
	КонецЕсли;
	
	мЗапросПоСправочникуСвойств.УстановитьПараметр("Наименование", Наименование);
	мЗапросПоСправочникуСвойств.УстановитьПараметр("Владелец",     Владелец);
	мЗапросПоСправочникуСвойств.УстановитьПараметр("Родитель",     Родитель);
	мЗапросПоСправочникуСвойств.УстановитьПараметр("ЭтоГруппа",    ЭтоГруппа);
	мЗапросПоСправочникуСвойств.УстановитьПараметр("Вид",          Вид);
	
	Выборка = мЗапросПоСправочникуСвойств.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Ссылка = NULL Тогда
			
			Элемент = Справочники.Свойства.ПустаяСсылка();
		Иначе
			
			Элемент = Выборка.Ссылка;
		КонецЕсли;
		
	Иначе
		
		Элемент = Справочники.Свойства.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Элемент.Пустая() Тогда
		
		Возврат Элемент; // возвращаем найденное значение ссылки
		
	КонецЕсли;
	
	// ссылку не нашли; создаем новый объект
	Если ЭтоГруппа Тогда
		
		ЭлементОбъект = Справочники.Свойства.СоздатьГруппу();
		
	Иначе
		
		ЭлементОбъект = Справочники.Свойства.СоздатьЭлемент();
		ЭлементОбъект.Авторегистрация = Авторегистрация;
		
	КонецЕсли;
	
	// назначаем ключевые свойства объекта для поиска ссылки
	ЭлементОбъект.Наименование = Наименование;
	ЭлементОбъект.Родитель     = Родитель;
	ЭлементОбъект.Владелец     = Владелец;
	ЭлементОбъект.Вид          = Вид;
	
	Если Не Тип.Пустая() Тогда
		
		// добавляем элемент типа в таблицу типов свойства
		ЭлементОбъект.Типы.Добавить().Тип = Тип;
		
		#Если Клиент Тогда
		ЭлементОбъект.ТипыСтрокой = глТипыСвойстваСтрокой(ЭлементОбъект);
		#КонецЕсли
		
	КонецЕсли;
	
	// записываем новый объект
	ЗаписатьОбъект(ЭлементОбъект);
	
	Возврат ЭлементОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьИмяОбъектаПоНаименованию(Знач Наименование)
	
	Возврат глОтделитьРазделителем(Наименование, ".");
	
КонецФункции

Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ЗначениеПеречисления)
	
	Если ПустаяСтрока(ЗначениеПеречисления) Тогда
		
		Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
		
	КонецЕсли;
	
	Попытка
		
		Значение = Перечисления[ИмяПеречисления][ЗначениеПеречисления];
		
	Исключение
		
		Значение = Перечисления[ИмяПеречисления].ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя)
	
	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		
		Возврат XMLЗначение(Тип, СтрЗначение);
		
	Иначе
		Если Тип = одТипСтрока Тогда
			Возврат "";
			
		ИначеЕсли Тип = одТипБулево Тогда
			Возврат Ложь;
			
		ИначеЕсли Тип = одТипЧисло Тогда
			Возврат 0;
			
		ИначеЕсли Тип = одТипДата Тогда
			Возврат мПустаяДата;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // одАтрибут()

// Возвращает объект ОписаниеТипов, содержащий указанный тип
//
// Параметры:
//  ЗначениеТипа   - Строка с именем типа или значение типа Тип
//  
// Возвращаемое значение:
//  ОписаниеТипов
//  
Функция одОписаниеТипа(ЗначениеТипа)

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = одТипСтрока Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли; 
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // одОписаниеТипа()

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществлется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству="")

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.Текст Тогда
			
			Значение = СокрП(Объект.Значение);
			
		ИначеЕсли (ИмяУзла = Имя) И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат XMLЗначение(Тип, Значение)
	
КонецФункции // одЗначениеЭлемента()

// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "")
	
	КолвоВложений = 0; // количество одноименных вложений
	
	Если ПустаяСтрока(Имя) Тогда
	
		Имя = Объект.ЛокальноеИмя;
	
	КонецЕсли;
	
	Пока Объект.Прочитать() Цикл
		
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		
		Если ИмяУзла = Имя Тогда
			
			Если ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если КолвоВложений = 0 Тогда
					Прервать;
				Иначе
					КолвоВложений = КолвоВложений - 1;
				КонецЕсли;
				
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				КолвоВложений = КолвоВложений + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // одПропустить()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()
	
	ФлагОшибки = Ложь;
	
	// Типы
	одТипСтрока            = Тип("Строка");
	одТипБулево            = Тип("Булево");
	одТипЧисло             = Тип("Число");
	одТипДата              = Тип("Дата");
	
	мПустаяДата = Дата('00010101');
	
	мЗапросПоСправочникуСвойств = Новый Запрос();
	мЗапросПоСправочникуСвойств.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Свойства.Ссылка
		|ИЗ
		|	Справочник.Свойства КАК Свойства
		|ГДЕ
		|	  Свойства.Наименование = &Наименование
		|	И Свойства.Владелец     = &Владелец
		|	И Свойства.ЭтоГруппа    = &ЭтоГруппа
		|	И Свойства.Родитель     = &Родитель
		|	И Свойства.Вид          = &Вид";
		
КонецПроцедуры // ИнициализацияРеквизитовИМодульныхПеременных()

// Инициализирует колонки таблицы правил регистрации объектов
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияТаблицыПРО()
	
	ДеревоЗначений = Новый ДеревоЗначений;
	
	Колонки = ДеревоЗначений.Колонки;
	
	Колонки.Добавить("ЭтоГруппа",       одОписаниеТипа("Булево")); // Для группы и элемента
	Колонки.Добавить("Отключить",       одОписаниеТипа("Булево")); // Для группы и элемента
	Колонки.Добавить("Код",             одОписаниеТипа("Строка")); // Для группы и элемента
	Колонки.Добавить("Описание",        одОписаниеТипа("Строка")); // Для группы и элемента
	Колонки.Добавить("Комментарий",     одОписаниеТипа("Строка")); // Для группы и элемента
	Колонки.Добавить("Наименование",    одОписаниеТипа("Строка")); // Для группы и элемента
	
	Колонки.Добавить("ТипГруппы",       одОписаниеТипа("Строка")); // Для группы
	
	Колонки.Добавить("Валидное",                    одОписаниеТипа("Булево"));         // Для элемента
	Колонки.Добавить("РеквизитРежимаВыгрузки",      одОписаниеТипа("Строка"));         // Для элемента
	Колонки.Добавить("ОбъектНастройки",             одОписаниеТипа("Строка"));         // Для элемента
	Колонки.Добавить("ОтборПоСвойствамОбъекта",     одОписаниеТипа("ДеревоЗначений")); // Для элемента
	Колонки.Добавить("ОтборПоСвойствамПланаОбмена", одОписаниеТипа("ДеревоЗначений")); // Для элемента
	
	// обработчики событий
	Колонки.Добавить("ПередОбработкой",            одОписаниеТипа("Строка")); // Для элемента
	Колонки.Добавить("ПриОбработке",               одОписаниеТипа("Строка")); // Для элемента
	Колонки.Добавить("ПриОбработкеДополнительный", одОписаниеТипа("Строка")); // Для элемента
	Колонки.Добавить("ПослеОбработки",             одОписаниеТипа("Строка")); // Для элемента
	
	Возврат ДеревоЗначений;
	
КонецФункции

// Инициализирует колонки таблицы правил регистрации по свойствам
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияТаблицыОтборПоСвойствамПланаОбмена()
	
	ШаблонДерева = Новый ДеревоЗначений;
	
	Колонки = ШаблонДерева.Колонки;
	
	Колонки.Добавить("ЭтоГруппа",            одОписаниеТипа("Булево"));
	Колонки.Добавить("БулевоЗначениеГруппы", одОписаниеТипа("Строка"));
	
	Колонки.Добавить("СвойствоОбъекта"); // произвольный тип в каждой строке таблицы
	Колонки.Добавить("ВидСравнения",         одОписаниеТипа("Строка"));
	Колонки.Добавить("ЭтоСтрокаКонстанты",   одОписаниеТипа("Булево"));
	Колонки.Добавить("ТипСвойстваОбъекта",   одОписаниеТипа("Строка"));
	Колонки.Добавить("СвойствоПланаОбмена",  одОписаниеТипа("Строка"));
	
	Колонки.Добавить("ТаблицаСвойствОбъекта",     одОписаниеТипа("ДеревоЗначений"));
	Колонки.Добавить("ТаблицаСвойствПланаОбмена", одОписаниеТипа("ДеревоЗначений"));
	
	Возврат ШаблонДерева;
	
КонецФункции

// Инициализирует колонки таблицы правил регистрации по свойствам
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияТаблицыОтборПоСвойствамОбъекта()
	
	ШаблонДерева = Новый ДеревоЗначений;
	
	Колонки = ШаблонДерева.Колонки;
	
	Колонки.Добавить("ЭтоГруппа",             одОписаниеТипа("Булево"));
	Колонки.Добавить("БулевоЗначениеГруппы",  одОписаниеТипа("Строка")); // "И", "ИЛИ"
	Колонки.Добавить("СвойствоОбъекта",       одОписаниеТипа("Строка"));
	Колонки.Добавить("ВидСравнения",          одОписаниеТипа("Строка"));
	Колонки.Добавить("ТипСвойстваОбъекта",    одОписаниеТипа("Строка"));
	Колонки.Добавить("ВидЭлементаОтбора",     одОписаниеТипа("Строка"));
	
	Колонки.Добавить("ТаблицаСвойствОбъекта", одОписаниеТипа("ДеревоЗначений"));
	
	Колонки.Добавить("ЗначениеКонстанты"); // произвольный тип
	
	Возврат ШаблонДерева;
	
КонецФункции

// Инициализирует колонки таблицы вложенных свойств объекта
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияТаблицыСвойств()
	
	Шаблон = Новый ТаблицаЗначений;
	
	СоздатьКолонкиКоллекцииСвойствОбъекта(Шаблон);
	
	Возврат Шаблон;
	
КонецФункции

// Инициализирует колонки таблицы вложенных свойств объекта
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияДереваСвойств()
	
	Шаблон = Новый ДеревоЗначений;
	
	СоздатьКолонкиКоллекцииСвойствОбъекта(Шаблон);
	
	Возврат Шаблон;
	
КонецФункции

// Инициализирует структуру регистрации
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияРегистрации()
	
	СтруктураРегистрации = Новый Структура;
	СтруктураРегистрации.Вставить("ВерсияФормата",       "");
	СтруктураРегистрации.Вставить("Ид",                  "");
	СтруктураРегистрации.Вставить("Наименование",        "");
	СтруктураРегистрации.Вставить("ДатаВремяСоздания",   мПустаяДата);
	СтруктураРегистрации.Вставить("ПланОбмена",          "");
	СтруктураРегистрации.Вставить("ИмяПланаОбмена",      "");
	СтруктураРегистрации.Вставить("Комментарий",         "");
	
	// параметры конфигурации
	СтруктураРегистрации.Вставить("ВерсияПлатформы",     "");
	СтруктураРегистрации.Вставить("ВерсияКонфигурации",  "");
	СтруктураРегистрации.Вставить("СинонимКонфигурации", "");
	СтруктураРегистрации.Вставить("Конфигурация",        "");
	
	Возврат СтруктураРегистрации;
	
КонецФункции

// Инициализирует переменную, содержащую соответствия кодов сообщений их описаниям
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияСообщений()
	
	Сообщения = Новый Соответствие;
	
	Сообщения.Вставить(0,  НСтр("ru = 'Внутренняя ошибка'"));
	Сообщения.Вставить(1,  НСтр("ru = 'Ошибка при загрузке правил регистрации из XML-файла данных'"));
	Сообщения.Вставить(2,  НСтр("ru = 'Ошибка при загрузке справочников: Регистрация, ПравилаРегистрацииОбъектов, Объекты, Свойства'"));
	Сообщения.Вставить(3,  НСтр("ru = 'Ошибка при чтении файла XML'"));
	Сообщения.Вставить(4,  НСтр("ru = 'Ошибка формата файла правил регистрации'"));
	Сообщения.Вставить(5,  НСтр("ru = 'Ошибка при записи объекта'"));
	Сообщения.Вставить(6,  НСтр("ru = 'Ошибка при копировании файла правил в каталог временных файлов'"));
	Сообщения.Вставить(7,  НСтр("ru = 'Не указано имя файла правил регистрации'"));
	Сообщения.Вставить(8,  НСтр("ru = 'Не указано наименование новой регистрации'"));
	Сообщения.Вставить(9,  НСтр("ru = 'Не указано наименование новой конфигурации'"));
	Сообщения.Вставить(10, НСтр("ru = 'Не указана регистрация для обновления'"));
	Сообщения.Вставить(11, НСтр("ru = 'Не указана конфигурация для обновления'"));
	Сообщения.Вставить(12, НСтр("ru = 'Ошибка при получении файла правил для чтения'"));
	
	Возврат Сообщения;
	
КонецФункции // ИнициализацияСообщений()

Функция СоставПланаОбмена()
	
	Если ТипЗнч(ПолеСоставПланаОбмена) <> Тип("ТаблицаЗначений") Тогда
		
		ПолеСоставПланаОбмена = Новый ТаблицаЗначений;
		ПолеСоставПланаОбмена.Колонки.Добавить("Наименование",    Новый ОписаниеТипов("Строка"));
		ПолеСоставПланаОбмена.Колонки.Добавить("Тип",             Новый ОписаниеТипов("Строка"));
		ПолеСоставПланаОбмена.Колонки.Добавить("Авторегистрация", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Возврат ПолеСоставПланаОбмена;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();


