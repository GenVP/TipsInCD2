////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ

Перем мТекстАлгоритма Экспорт;

Перем мДобавитьНеобходимыеПКСИПКЗ;

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьАвтоматическиВсеФлажкиДляСозданияПравил(РезультатСинхронизации) Экспорт
	
	Для каждого Строка из РезультатСинхронизации.Строки Цикл
		
		Строка.Пометка = 1;
		глУстановитьПометки(Строка, мТекстАлгоритма, Ложь);
		
	КонецЦикла;
	
	Для Каждого СтрокаСинхронизации Из РезультатСинхронизации.Строки Цикл
		
		Если СтрокаСинхронизации.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
			
			Для Каждого СтрокаМетаданного Из СтрокаСинхронизации.Строки Цикл
				
				Если СтрокаМетаданного.Пометка = 1 Тогда
					
					Запрос = Новый Запрос();
					Запрос.Текст = "Выбрать Первые 1 1
				   |Из Справочник.Свойства КАК СвойстваИсточника	
				   |
				   |ГДЕ
	               |	СвойстваИсточника.Владелец = &Владелец
				   |	И СвойстваИсточника.Наименование = ""Регистратор""
				   |";
				   
				   Запрос.УстановитьПараметр("Владелец", СтрокаМетаданного.Источник);
				   
				   Таблица = Запрос.Выполнить().Выгрузить();
				   
				   СтрокаМетаданного.Пометка = Таблица.Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьСинхронизацию(Конвертация) Экспорт
	
	Если ОтображатьТолькоДанныеБезПравил Тогда
		
		// получаем массив источников по которым есть правила обмена
		// получаем массив приемников по которым есть правила обмена
		
		СоединениеДляИсточника = "Левое соединение Справочник.ПравилаКонвертацииОбъектов КАК ПКО
		 	|	ПО ПКО.Владелец = &Конвертация 
		 	|	И ПКО.Источник = ОбъектыИсточника.Ссылка";
			
		СоединениеДляПриемника = "Левое соединение Справочник.ПравилаКонвертацииОбъектов КАК ПКО
		 	|	ПО ПКО.Владелец = &Конвертация 
		 	|	И ПКО.Приемник = ОбъектыПриемника.Ссылка";
		
		ДопОграничениеПоИсточнику = "И ПКО.Ссылка Есть NULL";
		ДопОграничениеПоПриемнику = "И ПКО.Ссылка Есть NULL";
		
	Иначе
		
		СоединениеДляИсточника = "";
		СоединениеДляПриемника = "";
		
		ДопОграничениеПоИсточнику = "";
		ДопОграничениеПоПриемнику = "";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СинхронизированныеОбъекты.Тип КАК Тип,
		|	СинхронизированныеОбъекты.Источник КАК Источник,
		|	СинхронизированныеОбъекты.Приемник КАК Приемник,
		|	ВЫБОР
		|		КОГДА Правила.Ссылка ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА СинхронизированныеОбъекты.Приемник = &ПустойОбъект
		|						ТОГДА """"
		|					ИНАЧЕ ПОДСТРОКА(СинхронизированныеОбъекты.Приемник.Имя, 0, 50)
		|				КОНЕЦ
		|		ИНАЧЕ Правила.Ссылка
		|	КОНЕЦ КАК Правило,
		|	0 КАК Пометка,
		|	ЛОЖЬ КАК СинхронизированИсточник,
		|	ЛОЖЬ КАК СинхронизированПриемник,
		|	ЛОЖЬ КАК НеуникальноеИмяПравила
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА Источники.Тип ЕСТЬ NULL 
		|				ТОГДА Приемники.Тип
		|			ИНАЧЕ Источники.Тип
		|		КОНЕЦ КАК Тип,
		|		Источники.Источник КАК Источник,
		|		Приемники.Приемник КАК Приемник
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ОбъектыИсточника.Тип КАК Тип,
		|			ОбъектыИсточника.Ссылка КАК Источник,
		|			ОбъектыИсточника.Наименование КАК Наименование
		|		ИЗ
		|			Справочник.Объекты КАК ОбъектыИсточника "
		+ СоединениеДляИсточника + "
		|		ГДЕ
		|			ОбъектыИсточника.ПометкаУдаления = ЛОЖЬ
		|			И ОбъектыИсточника.ЭтоГруппа = ЛОЖЬ
		|			И ОбъектыИсточника.Владелец = &КонфигурацияИсточник
		|			И (НЕ ОбъектыИсточника.Тип В (&МассивТипов) " 
		+ ДопОграничениеПоИсточнику + ")) КАК Источники
		|
		|			ПОЛНОЕ СОЕДИНЕНИЕ 
		|		(ВЫБРАТЬ
		|			ОбъектыПриемника.Тип КАК Тип,
		|			ОбъектыПриемника.Ссылка КАК Приемник,
		|			ОбъектыПриемника.Наименование КАК Наименование
		|		ИЗ
		|			Справочник.Объекты КАК ОбъектыПриемника "
		+ СоединениеДляПриемника + "
		|		ГДЕ
		|			ОбъектыПриемника.ПометкаУдаления = ЛОЖЬ
		|			И ОбъектыПриемника.ЭтоГруппа = ЛОЖЬ
		|			И ОбъектыПриемника.Владелец = &КонфигурацияПриемник
		|			И (НЕ ОбъектыПриемника.Тип В (&МассивТипов) "
		+ ДопОграничениеПоПриемнику + ")) КАК Приемники
		|		ПО Источники.Наименование = Приемники.Наименование
		|			И Источники.Тип = Приемники.Тип) КАК СинхронизированныеОбъекты
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаКонвертацииОбъектов КАК Правила
		|		ПО (Правила.Владелец = &Конвертация
		|					И Правила.ЭтоГруппа = ЛОЖЬ
		|					И (СинхронизированныеОбъекты.Источник ЕСТЬ НЕ NULL 
		|						И СинхронизированныеОбъекты.Приемник ЕСТЬ НЕ NULL 
		|						И СинхронизированныеОбъекты.Источник = Правила.Источник
		|						И СинхронизированныеОбъекты.Приемник = Правила.Приемник)
		|				ИЛИ СинхронизированныеОбъекты.Источник ЕСТЬ NULL 
		|					И СинхронизированныеОбъекты.Приемник ЕСТЬ НЕ NULL 
		|					И Правила.Источник = &ПустойОбъект
		|					И СинхронизированныеОбъекты.Приемник = Правила.Приемник
		|				ИЛИ СинхронизированныеОбъекты.Источник ЕСТЬ НЕ NULL 
		|					И СинхронизированныеОбъекты.Приемник ЕСТЬ NULL 
		|					И СинхронизированныеОбъекты.Источник = Правила.Источник
		|					И Правила.Приемник = &ПустойОбъект)" + ?(ОтображатьТолькоДанныеБезПравил, "ГДЕ Правила.Ссылка Есть NULL", "") + "
		|ИТОГИ ПО
		|	Тип");
		
	МассивТипов = ПолучитьМассивТиповПоКоторымНеВыполняетсяСинхронизацияПКО();
			
	Запрос.УстановитьПараметр("МассивТипов", МассивТипов);	
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	Запрос.УстановитьПараметр("КонфигурацияИсточник", Конвертация.Источник);
	Запрос.УстановитьПараметр("КонфигурацияПриемник", Конвертация.Приемник);
	Запрос.УстановитьПараметр("ПустойОбъект", Справочники.Объекты.ПустаяСсылка());
		
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

Функция ПолучитьДеревоДляСинхронизации() Экспорт
	
	РезультатСинхронизации = ВыполнитьСинхронизацию(Конвертация);
	
	УстановитьАвтоматическиВсеФлажкиДляСозданияПравил(РезультатСинхронизации);
	
	Возврат РезультатСинхронизации;
	
КонецФункции

Функция ПолучитьИмяПравила(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные.Приемник = NULL Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат Лев(ТекущиеДанные.Приемник.Имя, 50);
		
	КонецЕсли;
	
КонецФункции // ПолучитьИмяПравила()

Процедура СохранитьПравила(Строки, СписокСозданныхПКО = Неопределено) Экспорт
	
	Если СписокСозданныхПКО = Неопределено Тогда
		СписокСозданныхПКО = Новый СписокЗначений;
	КонецЕсли;
	
	ЗапросПоискаПравил = Новый Запрос();
	ЗапросПоискаПравил.Текст = "ВЫБРАТЬ Первые 1
	                           |	ПравилаКонвертацииОбъектов.Ссылка
	                           |ИЗ
	                           |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	                           |ГДЕ
	                           |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
	                           |	И ПравилаКонвертацииОбъектов.Источник = &Источник
	                           |	И ПравилаКонвертацииОбъектов.Приемник = &Приемник";

	Для каждого Строка из Строки Цикл
		
		Если Строка.Родитель <> Неопределено И Строка.Пометка Тогда
			
			// перед тем как создавать найдем может есть такое правило
			ЗапросПоискаПравил.УстановитьПараметр("Владелец", Конвертация);
			ЗапросПоискаПравил.УстановитьПараметр("Источник", Строка.Источник);
			ЗапросПоискаПравил.УстановитьПараметр("Приемник", Строка.Приемник);
			
			ТаблицаДанных = ЗапросПоискаПравил.Выполнить().Выгрузить();
			
			Если ТаблицаДанных.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
            
			НовоеПравило = Справочники.ПравилаКонвертацииОбъектов.СоздатьЭлемент();
			
			НовоеПравило.Владелец       = Конвертация;
            			
			НовоеПравило.Источник       = Строка.Источник;
			НовоеПравило.Приемник       = Строка.Приемник;
			
			НовоеПравило.Наименование   = глНаименованиеПКО(НовоеПравило);
			
			НовоеПравило.Записать();

			Строка.Правило = НовоеПравило.Ссылка;
			СписокСозданныхПКО.Добавить(НовоеПравило.Ссылка);
			
			Если мДобавитьНеобходимыеПКСИПКЗ = Неопределено Тогда
				
				// зададим вопрос о автоматическом создании ПКС и ПКЗ
				ОтветПользователя = Вопрос("Для создаваемых правил конвертации объектов программа может автоматически создать правила конвертации свойств и значений. Создать правила автоматически?", 
					РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
					
				мДобавитьНеобходимыеПКСИПКЗ = (ОтветПользователя = КодВозвратаДиалога.Да);	
				
			КонецЕсли;
			
			Если мДобавитьНеобходимыеПКСИПКЗ = Истина Тогда
				
				РекурсивноеСозданиеНеобходимыхОбъектовДляПКО(НовоеПравило, ЛОЖЬ, СписокСозданныхПКО);
								
			КонецЕсли;

		КонецЕсли;

		Строка.Пометка = Ложь;
		
		СохранитьПравила(Строка.Строки, СписокСозданныхПКО);
		
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мТекстАлгоритма = "
	|Если ТекСтрока.Источник = NULL И ТекСтрока.Приемник = NULL Тогда
	|	Отказ = Ложь;
	|ИначеЕсли (ТипЗнч(ТекСтрока.Правило) = Тип(""Строка"")) И ((ТекСтрока.Источник <> NULL) ИЛИ Параметры) И (ТекСтрока.Приемник <> NULL) Тогда
	|  	Отказ = Ложь;
	|Иначе
	|	Отказ = Истина;
	|КонецЕсли;";

#КонецЕсли

мДобавитьНеобходимыеПКСИПКЗ = Неопределено;