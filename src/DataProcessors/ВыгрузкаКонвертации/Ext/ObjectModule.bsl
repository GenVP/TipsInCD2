
Перем мФормаПрогрессора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЗаписьXML;

Перем мВерсияФормата;
Перем мТаблицаПКЗ;
Перем мДатаПоследнейВыгрузкиПравил;
Перем мОбработчикиСобытий;

Перем мАлгоритмы, мПараметрыАлгоритма;

Перем мСоответствиеПеречисленийИИмен;

перем мТипСтрока;

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления
//
// Параметры:
//  Значение       - Значение перечисления
//
// Возвращаемое значение:
//  Строка - имя переданного значения перечисления
//
Функция ИмяЗначенияПеречисления(Значение)

	ЗначениеСоответствия = мСоответствиеПеречисленийИИмен.Получить(Значение);
	
	Если ЗначениеСоответствия = Неопределено Тогда
		
		Если Значение = Null
			Или Значение.Пустая() Тогда
		
			ЗначениеСоответствия = "";
			
		Иначе
			
			ОбъектМД = Значение.Метаданные();
			ИндексЗначения = Перечисления[ОбъектМД.Имя].Индекс(Значение);

			ЗначениеСоответствия = ОбъектМД.ЗначенияПеречисления[ИндексЗначения].Имя;
			
		КонецЕсли;
		
		мСоответствиеПеречисленийИИмен.Вставить(Значение, ЗначениеСоответствия); 
		
	КонецЕсли;
	
	Возврат ЗначениеСоответствия;
			
КонецФункции // ИмяЗначенияПеречисления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТАМИ DOM-XML

// Добавляет новый xml-узел к указанному узлу-родителю, устанавливает значение
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//  Значение       - значение добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Процедура ДобавитьЭлемент(Имя, Значение)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	мЗаписьXML.ЗаписатьТекст(Стр);
	мЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Имя, Значение, НужноПреобразоватьКСтроке = Истина)

	Если Значение = Null Тогда
		СтрокаЗаписи = "";
	Иначе
		СтрокаЗаписи = XMLСтрока(Значение);
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫБОРА ПРАВИЛ, АЛГОРИТМОВ И ЗАПРОСОВ

// Осуществляет иерархический выбор ПКО с помощью запроса.
// Используется для осуществления выгрузки правил с учетом иерархии.
//
// Возвращаемое значение:
//  Записи результата запроса в виде дерева значений.
// 
Функция ВыполнитьЗапросПКО()

	ВИерархии = Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка();

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
	Запрос.УстановитьПараметр("ВИерархии",   ВИерархии);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаКонвертацииОбъектов.Порядок,
	|	ПравилаКонвертацииОбъектов.Ссылка КАК ПравилоКонвертацииОбъектовСсылка,
	|	ПравилаКонвертацииОбъектов.Ссылка КАК Количество
	|
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|		
	|ГДЕ
	|	ПравилаКонвертацииОбъектов.Владелец = &Конвертация И
	|	ПравилаКонвертацииОбъектов.Ссылка В ИЕРАРХИИ(&ВИерархии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаКонвертацииОбъектов.Порядок 
	|
	|ИТОГИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Количество) ПО ПравилоКонвертацииОбъектовСсылка ИЕРАРХИЯ";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции // ВыполнитьЗапросПКО()

// Осуществляет иерархический выбор ПКЗ с помощью запроса.
// Используется для осуществления выгрузки правил с учетом иерархии.
//
// Возвращаемое значение:
//  Записи результата запроса в виде дерева значений.
// 
Функция ВыполнитьЗапросПКЗ()

	ВИерархии = Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка();

	Запрос = Новый Запрос;
    	
	Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
	Запрос.УстановитьПараметр("ВИерархии",   ВИерархии);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	//ПравилаКонвертацииОбъектов
	|	ПравилаКонвертацииОбъектов.Ссылка КАК ПравилоКонвертацииОбъектовСсылка,
	|	
	|		//Значения
	|		ПравилаКонвертацииЗначений.Ссылка КАК ПравилоКонвертацииЗначенийСсылка
	|
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
	|	
	|	ПО
	|		ПравилаКонвертацииЗначений.Владелец = ПравилаКонвертацииОбъектов.Ссылка
	|	
	|ГДЕ
	|	ПравилаКонвертацииОбъектов.Владелец = &Конвертация И
	|	ПравилаКонвертацииОбъектов.Ссылка В ИЕРАРХИИ(&ВИерархии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаКонвертацииЗначений.Порядок
	|
	|ИТОГИ ПО
	|	ПравилоКонвертацииОбъектовСсылка,
	|	ПравилоКонвертацииЗначенийСсылка ИЕРАРХИЯ";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

КонецФункции // ВыполнитьЗапросПКЗ()

// Осуществляет иерархический выбор ПВД с помощью запроса.
// Используется для осуществления выгрузки правил с учетом иерархии.
//
// Возвращаемое значение:
//  Записи результата запроса в виде дерева значений.
// 
Функция ВыполнитьЗапросПВД()

   	ВИерархии = Справочники.ПравилаВыгрузкиДанных.ПустаяСсылка();

	Запрос = Новый Запрос;
    
	Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
	Запрос.УстановитьПараметр("ВИерархии",   ВИерархии);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	//ПравилаВыгрузкиДанных
	|	ПравилаВыгрузкиДанных.Порядок,
	|	ПравилаВыгрузкиДанных.Ссылка КАК ПравилоВыгрузкиДанныхСсылка,
	|	ПравилаВыгрузкиДанных.Ссылка КАК Количество
	|
	|ИЗ
	|	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
	|	
	|ГДЕ
	|	ПравилаВыгрузкиДанных.Ссылка.Владелец = &Конвертация И
	|	ПравилаВыгрузкиДанных.Ссылка В ИЕРАРХИИ(&ВИерархии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаВыгрузкиДанных.Порядок
	|
	|ИТОГИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Количество) ПО
	|	ПравилоВыгрузкиДанныхСсылка ИЕРАРХИЯ";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции // ВыполнитьЗапросПВД()

// Осуществляет иерархический выбор ПОД с помощью запроса.
// Используется для осуществления выгрузки правил с учетом иерархии.
//
// Возвращаемое значение:
//  Записи результата запроса в виде дерева значений.
// 
Функция ВыполнитьЗапросПОД()

    ВИерархии = Справочники.ПравилаОчисткиДанных.ПустаяСсылка();
	
	Запрос = Новый Запрос;
    
	Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
	Запрос.УстановитьПараметр("ВИерархии",   ВИерархии);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	//ПравилаОчисткиДанных
	|	ПравилаОчисткиДанных.Порядок,
	|	ПравилаОчисткиДанных.Ссылка КАК ПравилоОчисткиДанныхСсылка,
	|	ПравилаОчисткиДанных.Ссылка КАК Количество
	|
	|ИЗ
	|	Справочник.ПравилаОчисткиДанных КАК ПравилаОчисткиДанных
	|	
	|ГДЕ
	|	ПравилаОчисткиДанных.Ссылка.Владелец = &Конвертация И
	|	ПравилаОчисткиДанных.Ссылка В ИЕРАРХИИ(&ВИерархии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОчисткиДанных.Порядок
	|
	|ИТОГИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Количество) ПО
	|	ПравилоОчисткиДанныхСсылка ИЕРАРХИЯ";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции // ВыполнитьЗапросПОД()

// Осуществляет иерархический выбор Алгоритмов с помощью запроса.
// Используется для осуществления выгрузки алгоритмов с учетом иерархии.
//
// Возвращаемое значение:
//  Записи результата запроса в виде дерева значений.
// 
Функция ВыполнитьЗапросАлгоритмы()

	ВИерархии = Справочники.Алгоритмы.ПустаяСсылка();

	Запрос = Новый Запрос;
    
	Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
	Запрос.УстановитьПараметр("ВИерархии",   ВИерархии);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	//Алгоритмы
	|	Алгоритмы.Код,
	|	Алгоритмы.Ссылка КАК АлгоритмСсылка,
	|	Алгоритмы.Ссылка КАК Количество
	|
	|ИЗ
	|	Справочник.Алгоритмы КАК Алгоритмы
	|	
	|ГДЕ
	|	Алгоритмы.Ссылка.Владелец = &Конвертация И
	|	Алгоритмы.Ссылка В ИЕРАРХИИ(&ВИерархии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Алгоритмы.Код
	|
	|ИТОГИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Количество) ПО
	|	АлгоритмСсылка ИЕРАРХИЯ";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции // ВыполнитьЗапросАлгоритмы()

// Осуществляет иерархический выбор Запросов с помощью запроса.
// Используется для осуществления выгрузки запросов с учетом иерархии.
//
// Возвращаемое значение:
//  Записи результата запроса в виде дерева значений.
// 
Функция ВыполнитьЗапросЗапросы()

    ВИерархии = Справочники.Запросы.ПустаяСсылка();
	Запрос = Новый Запрос;
    	
	Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
	Запрос.УстановитьПараметр("ВИерархии",   ВИерархии);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	//Запросы
	|	Запросы.Код,
	|	Запросы.Ссылка КАК ЗапросСсылка,
	|	Запросы.Ссылка КАК Количество
	|	
	|ИЗ
	|	Справочник.Запросы КАК Запросы,
	|	Справочник.Запросы КАК Количество
	|
	|ГДЕ
	|	Запросы.Ссылка.Владелец = &Конвертация И
	|	Запросы.Ссылка В ИЕРАРХИИ(&ВИерархии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Запросы.Код
	|
	|ИТОГИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Количество) ПО
	|	ЗапросСсылка ИЕРАРХИЯ";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции // ВыполнитьЗапросЗапросы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ПРАВИЛА, АЛГОРИТМА И ЗАПРОСА

Процедура ВыгрузитьДанныеПоКонфигурации(Имя, Конфигурация)
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	
	Стр = XMLСтрока(Конфигурация.Имя);
	УстановитьАтрибут("ВерсияПлатформы",     ПолучитьПредставлениеПриложения(Конфигурация.Приложение));
	УстановитьАтрибут("ВерсияКонфигурации",  Конфигурация.Версия);
	УстановитьАтрибут("СинонимКонфигурации", Конфигурация.Синоним);
	
	мЗаписьXML.ЗаписатьТекст(Стр);	
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Осуществляет выгрузку реквизитов конвертации в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел реквизитов конвертации
// 
Процедура ВыгрузитьРеквизитыКонвертации()

	КонвертацияОбъект                = КонвертацияДляВыгрузки.ПолучитьОбъект();
	КонвертацияОбъект.ДатаОбновления = ТекущаяДата();
	КонвертацияОбъект.Записать();
	
	КонвертацияДляВыгрузки = КонвертацияОбъект.Ссылка;
	
	ВыгрузитьДанныеВерсии(КонвертацияДляВыгрузки);
	ДобавитьЭлемент("Ид",                Строка(КонвертацияДляВыгрузки.Код));
	ДобавитьЭлемент("Наименование",      Строка(КонвертацияДляВыгрузки.Наименование));
	ДобавитьЭлемент("ДатаВремяСоздания", КонвертацияДляВыгрузки.ДатаОбновления);

	ВыгрузитьДанныеПоКонфигурации("Источник", КонвертацияДляВыгрузки.Источник);
	ВыгрузитьДанныеПоКонфигурации("Приемник", КонвертацияДляВыгрузки.Приемник);
	
	ВыгрузитьБулевоЗначениеТолькоЕслиИстина(КонвертацияДляВыгрузки.УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике, "УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике");
	
	ДобавитьЭлемент("Комментарий",        Строка(КонвертацияДляВыгрузки.Комментарий));
	
КонецПроцедуры // ВыгрузитьРеквизитыКонвертации()

Процедура ВыгрузитьДанныеВерсии(КонвертацияДляВыгрузки)
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("ВерсияФормата");
	
	Стр = XMLСтрока(мВерсияФормата);
	
	УстановитьАтрибут("РежимСовместимости", ИмяЗначенияПеречисления(КонвертацияДляВыгрузки.РежимСовместимости));
	
	мЗаписьXML.ЗаписатьТекст(Стр);	
	
	мЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Осуществляет выгрузку событий конвертации в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел событий конвертации
// 
Процедура ВыгрузитьСобытияКонвертации()
	
	ДобавитьЭлемент("ПослеЗагрузкиПравилОбмена",     Строка(КонвертацияДляВыгрузки.АлгоритмПослеЗагрузкиПравилОбмена));
		ДобавитьЭлемент("ПередПолучениемИзмененныхОбъектов",     Строка(КонвертацияДляВыгрузки.АлгоритмПередПолучениемИзмененныхОбъектов));
		ДобавитьЭлемент("ПослеПолученияИнформацииОбУзлахОбмена",  Строка(КонвертацияДляВыгрузки.АлгоритмПослеПолученияИнформацииОбУзлахОбмена));
		
		ДобавитьЭлемент("ПередВыгрузкойДанных",     Строка(КонвертацияДляВыгрузки.АлгоритмПередВыгрузкойДанных));
		ДобавитьЭлемент("ПослеВыгрузкиДанных",      Строка(КонвертацияДляВыгрузки.АлгоритмПослеВыгрузкиДанных));
		
		ДобавитьЭлемент("ПередЗагрузкойДанных",     Строка(КонвертацияДляВыгрузки.АлгоритмПередЗагрузкойДанных));
		ДобавитьЭлемент("ПослеЗагрузкиДанных",      Строка(КонвертацияДляВыгрузки.АлгоритмПослеЗагрузкиДанных));
		
		ДобавитьЭлемент("ПередВыгрузкойОбъекта",    Строка(КонвертацияДляВыгрузки.АлгоритмПередВыгрузкойОбъекта));
		ДобавитьЭлемент("ПередКонвертациейОбъекта", Строка(КонвертацияДляВыгрузки.АлгоритмПередКонвертациейОбъекта));
		
		ДобавитьЭлемент("ПослеВыгрузкиОбъекта",     Строка(КонвертацияДляВыгрузки.АлгоритмПослеВыгрузкиОбъекта));
		ДобавитьЭлемент("ПередЗагрузкойОбъекта",    Строка(КонвертацияДляВыгрузки.АлгоритмПередЗагрузкойОбъекта));
		ДобавитьЭлемент("ПослеЗагрузкиОбъекта",     Строка(КонвертацияДляВыгрузки.АлгоритмПослеЗагрузкиОбъекта));
		
		ДобавитьЭлемент("ПередОтправкойИнформацииОбУдалении",   Строка(КонвертацияДляВыгрузки.АлгоритмПередОтправкойИнформацииОбУдалении));
		ДобавитьЭлемент("ПриПолученииИнформацииОбУдалении",     Строка(КонвертацияДляВыгрузки.АлгоритмПриПолученииИнформацииОбУдалении));
		
		ДобавитьЭлемент("ПослеЗагрузкиПараметров",     Строка(КонвертацияДляВыгрузки.АлгоритмПослеЗагрузкиПараметров));
		
	// Выгрузка параметров конвертации
	// В зависимости от ВыгружатьПараметрыПоВерсии2_01 выгружаются по старому и новому формату
	Если НЕ КонвертацияДляВыгрузки.ВыгружатьПараметрыПоВерсии2_01 Тогда
		
		СтрокаПараметров = "";
		Выборка          = Справочники.Параметры.Выбрать(, КонвертацияДляВыгрузки);
		Пока Выборка.Следующий() Цикл
			
			Если Не ПустаяСтрока(СтрокаПараметров) Тогда
				
				СтрокаПараметров = СтрокаПараметров + ", ";
				
			КонецЕсли;
			
			СтрокаПараметров = СтрокаПараметров + СокрЛП(Выборка.Код);
			
		КонецЦикла;
		
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СтрокаПараметров, "Параметры");

	Иначе

		// Выгрузка параметров конвертации
		мЗаписьXML.ЗаписатьНачалоЭлемента("Параметры");
					
		Выборка = Справочники.Параметры.Выбрать(, КонвертацияДляВыгрузки);

		Пока Выборка.Следующий() Цикл

			мЗаписьXML.ЗаписатьНачалоЭлемента("Параметр");
			
			УстановитьАтрибут("Имя",                   Выборка.Код, Ложь);
			УстановитьАтрибут("Наименование",          Выборка.Наименование, Ложь);
			УстановитьАтрибут("ИспользуетсяПриЗагрузке", XMLСтрока(Выборка.ИспользуетсяПриЗагрузке));
			УстановитьАтрибут("УстанавливатьВДиалоге", XMLСтрока(Выборка.УстанавливатьВДиалоге));
			Если ЗначениеЗаполнено(Выборка.ТипОбъекта) Тогда
				УстановитьАтрибут("ТипЗначения", Выборка.ТипОбъекта.Наименование, Ложь);
			КонецЕсли;
			
			УстановитьАтрибут("ПередаватьПараметрПриВыгрузке", XMLСтрока(Выборка.ПередаватьПараметрПриВыгрузке), Ложь);
			
			Если ЗначениеЗаполнено(Выборка.ПравилоКонвертации) Тогда
				УстановитьАтрибут("ПравилоКонвертации", XMLСтрока(Выборка.ПравилоКонвертации.Код), Ложь);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.АлгоритмПослеЗагрузкиПараметра) Тогда
				УстановитьАтрибут("ПослеЗагрузкиПараметра", XMLСтрока(Выборка.АлгоритмПослеЗагрузкиПараметра), Ложь);
			КонецЕсли;
			
			мЗаписьXML.ЗаписатьКонецЭлемента();
						
		КонецЦикла;
		
		мЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	// Выгрузка подключаемых обработок
	мЗаписьXML.ЗаписатьНачалоЭлемента("Обработки");
	
	Выборка = Справочники.Обработки.Выбрать(, КонвертацияДляВыгрузки);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПараметров = "";
		
		Для каждого Пар Из Выборка.Параметры Цикл
			
			Если Не ПустаяСтрока(СтрокаПараметров) Тогда
				
				СтрокаПараметров = СтрокаПараметров + ", ";
				
			КонецЕсли;
			
			СтрокаПараметров = СтрокаПараметров + СокрЛП(Пар.Параметр.Код);
			
		КонецЦикла;		
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Обработка");
		УстановитьАтрибут("Имя",                     Выборка.Код, Ложь);
		УстановитьАтрибут("Наименование",            Выборка.Наименование, Ложь);
		УстановитьАтрибут("Параметры",               СтрокаПараметров, Ложь);
		УстановитьАтрибут("Комментарий",             Выборка.Комментарий, Ложь);
		УстановитьАтрибут("ИспользуетсяПриВыгрузке", Выборка.ИспользуетсяПриВыгрузке);
		УстановитьАтрибут("ИспользуетсяПриЗагрузке", Выборка.ИспользуетсяПриЗагрузке);
		УстановитьАтрибут("ЭтоОбработкаНастройки",   Выборка.ЭтоОбработкаНастройки);
		
		//сама обработка
		мЗаписьXML.ЗаписатьТекст(XMLСтрока(Выборка.ХранилищеОбработки));
		
		мЗаписьXML.ЗаписатьКонецЭлемента();		
		
	КонецЦикла;
	
	мЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры // ВыгрузитьСобытияКонвертации()

// Осуществляет выгрузку ПКЗ в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел ПКЗ
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о ПКЗ
// 
Процедура ВыгрузитьПравилоКонвертацииЗначения(Объект)

	Если Объект.ПравилоКонвертацииЗначенийСсылка = Null Тогда
		
		Возврат;
		
	КонецЕсли;

	Если НЕ Объект.ПравилоКонвертацииЗначенийСсылка.ЭтоГруппа Тогда

		мЗаписьXML.ЗаписатьНачалоЭлемента("Значение");

		// Реквизиты правила
		ДобавитьЭлемент("Код",          Объект.ПравилоКонвертацииЗначенийСсылка.Код);
		ДобавитьЭлемент("Наименование", Объект.ПравилоКонвертацииЗначенийСсылка.Наименование);
		ДобавитьЭлемент("Порядок",      Объект.ПравилоКонвертацииЗначенийСсылка.Порядок);
		ДобавитьЭлемент("Описание",     Объект.ПравилоКонвертацииЗначенийСсылка.Описание);
		ДобавитьЭлемент("Комментарий",  Объект.ПравилоКонвертацииЗначенийСсылка.Комментарий);

		// Источник
        ДобавитьЭлемент("Источник",  Объект.ПравилоКонвертацииЗначенийСсылка.Источник.Наименование);
		
		// Приемник
		ДобавитьЭлемент("Приемник",  Объект.ПравилоКонвертацииЗначенийСсылка.Приемник.Наименование);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе

		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");

		// Реквизиты группы
		ДобавитьЭлемент("Код",          Объект.ПравилоКонвертацииЗначенийСсылка.Код);
		ДобавитьЭлемент("Наименование", Объект.ПравилоКонвертацииЗначенийСсылка.Наименование);
		ДобавитьЭлемент("Порядок",      Объект.ПравилоКонвертацииЗначенийСсылка.Порядок);
		ДобавитьЭлемент("Описание",     Объект.ПравилоКонвертацииЗначенийСсылка.Описание);
		ДобавитьЭлемент("Комментарий",  Объект.ПравилоКонвертацииЗначенийСсылка.Комментарий);

		ВыгрузитьПравилаКонвертацииЗначений(Объект, Объект);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьПравилоКонвертацииЗначения()

// Осуществляет выгрузку ПКС в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел ПКС
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о ПКС
// 
Процедура ВыгрузитьПравилоКонвертацииСвойства(ОбъектПКС)

	Если НЕ ОбъектПКС.ЭтоГруппа Тогда
		
		Если ОбъектПКС.Отключить тогда
			УстановитьАтрибут("Отключить", ОбъектПКС.Отключить);
		КонецЕсли;
		
		Если ОбъектПКС.Поиск Тогда
			УстановитьАтрибут("Поиск",     ОбъектПКС.Поиск);
		КонецЕсли;
		
		Если ОбъектПКС.ОбязательноеСвойство_ЭтоГруппа Тогда
			УстановитьАтрибут("Обязательное", Истина);
		КонецЕсли;
		
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ОбъектПКС.НеЗамещать, "НеЗамещать");
						
		// Реквизиты правила
		ДобавитьЭлемент("Код",          ОбъектПКС.Код);
		ДобавитьЭлемент("Наименование", ОбъектПКС.Наименование);
		ДобавитьЭлемент("Порядок",      ОбъектПКС.Порядок);
		ДобавитьЭлемент("Описание",     ОбъектПКС.Описание);
		ДобавитьЭлемент("Комментарий",  ОбъектПКС.Комментарий);

		// ПолучитьИзВходящихДанных
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ОбъектПКС.ПолучитьИзВходящихДанных, "ПолучитьИзВходящихДанных");
		
		// Источник
		мЗаписьXML.ЗаписатьНачалоЭлемента("Источник");
		
		УстановитьАтрибут("Имя", ОбъектПКС.НаименованиеИсточника, Ложь);
		УстановитьАтрибут("Вид", ИмяЗначенияПеречисления(ОбъектПКС.ВидИсточника), Ложь);
		
		Если ОбъектПКС.ЕдинственныйТипИсточника = Истина Тогда
			
			УстановитьАтрибут("Тип", ОбъектПКС.НаименованиеТипаИсточника, Ложь);
			
		КонецЕсли; 
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Приемник
		мЗаписьXML.ЗаписатьНачалоЭлемента("Приемник");
		
		УстановитьАтрибут("Имя", ОбъектПКС.НаименованиеПриемника, Ложь);
		УстановитьАтрибут("Вид", ИмяЗначенияПеречисления(ОбъектПКС.ВидПриемника), Ложь);
		
		Если ОбъектПКС.ЕдинственныйТипПриемника = Истина Тогда
			
			УстановитьАтрибут("Тип", ОбъектПКС.НаименованиеТипаПриемника, Ложь);
			
		КонецЕсли; 
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
		// КодПравилаКонвертации
		ДобавитьЭлемент("КодПравилаКонвертации", ОбъектПКС.КодПравилаКонвертации);
		
		Если ОбъектПКС.АвтоматическиПриводитьЗначениеКДлинеПриемника
			И ОбъектПКС.Приемник.КвалификаторыСтроки_Длина <> 0 Тогда
			
			ДобавитьЭлемент("ПриводитьКДлине", ОбъектПКС.Приемник.КвалификаторыСтроки_Длина);
			
		КонецЕсли;
		
		ДобавитьЭлемент("ИмяПараметраДляПередачи", ОбъектПКС.ИмяПараметраДляПередачи);
		
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ОбъектПКС.ПоискПоДатеНаРавенство, "ПоискПоДатеНаРавенство");
		
		// СобытияВыгрузкиСвойства
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПередВыгрузкойСвойства, "ПередВыгрузкой");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПриВыгрузкеСвойства, "ПриВыгрузке");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПослеВыгрузкиСвойства, "ПослеВыгрузки");
		
	Иначе
		
		// Отключить
		Если ОбъектПКС.Отключить Тогда
			УстановитьАтрибут("Отключить", ОбъектПКС.Отключить);
		КонецЕсли;
		
		// Реквизиты группы правил
		ДобавитьЭлемент("Код",          ОбъектПКС.Код);
		ДобавитьЭлемент("Наименование", ОбъектПКС.Наименование);
		ДобавитьЭлемент("Порядок",      ОбъектПКС.Порядок);
		ДобавитьЭлемент("Описание",     ОбъектПКС.Описание);
		ДобавитьЭлемент("Комментарий",  ОбъектПКС.Комментарий);
		
		// НеЗамещать
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ОбъектПКС.НеЗамещать, "НеЗамещать");
		
		// КодПравилаКонвертации
		ДобавитьЭлемент("КодПравилаКонвертации", ОбъектПКС.КодПравилаКонвертации);

		// ПолучитьИзВходящихДанных
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ОбъектПКС.ПолучитьИзВходящихДанных, "ПолучитьИзВходящихДанных");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ОбъектПКС.ВыгружатьГруппуЧерезФайл, "ВыгружатьГруппуЧерезФайл");
		
		// Источник
		мЗаписьXML.ЗаписатьНачалоЭлемента("Источник");
		УстановитьАтрибут("Имя", ОбъектПКС.НаименованиеИсточника, Ложь);
		УстановитьАтрибут("Вид", ИмяЗначенияПеречисления(ОбъектПКС.ВидИсточника), Ложь);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();

		// Приемник
		мЗаписьXML.ЗаписатьНачалоЭлемента("Приемник");
		УстановитьАтрибут("Имя", ОбъектПКС.НаименованиеПриемника, Ложь);
		УстановитьАтрибут("Вид", ИмяЗначенияПеречисления(ОбъектПКС.ВидПриемника), Ложь);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
		// СобытияВыгрузкиГруппы
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПередОбработкойВыгрузки, "ПередОбработкойВыгрузки");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПередВыгрузкойСвойства, "ПередВыгрузкой");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПриВыгрузкеСвойства, "ПриВыгрузке");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПослеВыгрузкиСвойства, "ПослеВыгрузки");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ОбъектПКС.АлгоритмПослеОбработкиВыгрузки, "ПослеОбработкиВыгрузки");
		
		
	КонецЕсли;

КонецПроцедуры // ВыгрузитьПравилоКонвертацииСвойства()

Процедура ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ЗначениеЭлемента, ИмяСохранения)
	
	Если Не ЗначениеЭлемента Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЭлемент(ИмяСохранения, ЗначениеЭлемента);
	
КонецПроцедуры

Процедура ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ЗначениеЭлемента, ИмяСохранения)
	
	Если ПустаяСтрока(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЭлемент(ИмяСохранения, ЗначениеЭлемента);
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОНастройкахВариантовПоискаДляПКО(СсылкаПКО)
	
	ТабЧастьНастроек = СсылкаПКО.НастройкаВариантовПоискаОбъектов;
	
	Если ТабЧастьНастроек.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("НастройкаВариантовПоискаОбъектов");
	
	Для Каждого СтрокаНастройки Из ТабЧастьНастроек Цикл
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("ВариантПоиска");
		
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СтрокаНастройки.ИмяНастройкиДляАлгоритма, "ИмяНастройкиДляАлгоритма");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СтрокаНастройки.ИмяНастройкиДляПользователя, "ИмяНастройкиДляПользователя");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СтрокаНастройки.ОписаниеНастройкиДляПользователя, "ОписаниеНастройкиДляПользователя");
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Осуществляет выгрузку ПКО в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел ПКО
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о ПКО
// 
Процедура ВыгрузитьПравилоКонвертацииОбъекта(Объект)

	СсылкаПКО = Объект.ПравилоКонвертацииОбъектовСсылка;
	
	Если НЕ СсылкаПКО.ЭтоГруппа Тогда

		мЗаписьXML.ЗаписатьНачалоЭлемента("Правило");
		
		// Реквизиты правила
		ДобавитьЭлемент("Код",                       СокрЛП(СсылкаПКО.Код));
		ДобавитьЭлемент("Наименование",              СсылкаПКО.Наименование);
		ДобавитьЭлемент("Порядок",                   СсылкаПКО.Порядок);
		ДобавитьЭлемент("Описание",                  СсылкаПКО.Описание);
		ДобавитьЭлемент("Комментарий",               СсылкаПКО.Комментарий);
		
		// СобытияВыгрузкиОбъекта
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПередВыгрузкойОбъекта, "ПередВыгрузкой");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПриВыгрузкеОбъекта, "ПриВыгрузке");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПослеВыгрузкиОбъекта, "ПослеВыгрузки");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПослеВыгрузкиОбъектаВФайлОбмена, "ПослеВыгрузкиВФайл");
		
		// СобытияЗагрузкиОбъекта
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПередЗагрузкойОбъекта, "ПередЗагрузкой");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПриЗагрузкеОбъекта, "ПриЗагрузке");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПослеЗагрузкиОбъекта, "ПослеЗагрузки");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(СсылкаПКО.АлгоритмПоследовательностьПолейПоиска, "ПоследовательностьПолейПоиска");		
		
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.НеЗамещать, "НеЗамещать");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.НеЗапоминатьВыгруженные, "НеЗапоминатьВыгруженные");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.СинхронизироватьПоИдентификатору, "СинхронизироватьПоИдентификатору");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли, "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.НеВыгружатьОбъектыСвойствПоСсылкам, "НеВыгружатьОбъектыСвойствПоСсылкам");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска, "НеСоздаватьЕслиНеНайден");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.ИспользоватьБыстрыйПоискПриЗагрузке, "ИспользоватьБыстрыйПоискПриЗагрузке");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.ГенерироватьНовыйНомерИлиКодЕслиНеУказан, "ГенерироватьНовыйНомерИлиКодЕслиНеУказан");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки, "ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD, "ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(СсылкаПКО.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике");
		
		Если ЗначениеЗаполнено(СсылкаПКО.ПриоритетОбъектовОбмена)
			И СсылкаПКО.ПриоритетОбъектовОбмена <> Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
			
			Если СсылкаПКО.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже Тогда
				ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая("Ниже", "ПриоритетОбъектовОбмена");
			ИначеЕсли СсылкаПКО.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает Тогда
				ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая("Совпадает", "ПриоритетОбъектовОбмена");
			КонецЕсли;
			
		КонецЕсли;
				
		// Источник
		ДобавитьЭлемент("Источник", СсылкаПКО.Источник.Наименование);
		
		// Приемник
		ДобавитьЭлемент("Приемник", СсылкаПКО.Приемник.Наименование);
		
		// ТЧ настройки вариантов поиска
		ВыгрузитьИнформациюОНастройкахВариантовПоискаДляПКО(СсылкаПКО);
		
		// Свойства
		мЗаписьXML.ЗаписатьНачалоЭлемента("Свойства");
		ВыгрузитьПравилаКонвертацииСвойств(СсылкаПКО);
		мЗаписьXML.ЗаписатьКонецЭлемента();


		// Значения
		мЗаписьXML.ЗаписатьНачалоЭлемента("Значения");
		ВыгрузитьПравилаКонвертацииЗначений(Объект, мТаблицаПКЗ);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		мФормаПрогрессора.КомментарийЗначения = СокрЛП(СсылкаПКО.Код);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();

	Иначе

		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");		

		// Реквизиты группы
		ДобавитьЭлемент("Код",          СокрЛП(СсылкаПКО.Код));
		ДобавитьЭлемент("Наименование", СсылкаПКО.Наименование);
		ДобавитьЭлемент("Порядок",      СсылкаПКО.Порядок);
		ДобавитьЭлемент("Описание",     СсылкаПКО.Описание);
		ДобавитьЭлемент("Комментарий",  СсылкаПКО.Комментарий);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		мФормаПрогрессора.КомментарийЗначения = СокрЛП(СсылкаПКО.Код);
		
		ВыгрузитьПравилаКонвертацииОбъектов(Объект);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();				

	КонецЕсли;

КонецПроцедуры // ВыгрузитьПравилоКонвертацииОбъекта()

// Осуществляет выгрузку ПВД в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел ПВД
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о ПВД
// 
Процедура ВыгрузитьПравилоВыгрузкиДанных(Объект)

	ПВД = Объект.ПравилоВыгрузкиДанныхСсылка;
	
	Если ПВД = Null Тогда
		
    	Возврат;
		
	КонецЕсли;

	Если НЕ ПВД.ЭтоГруппа Тогда

		мЗаписьXML.ЗаписатьНачалоЭлемента("Правило");

		УстановитьАтрибут("Отключить",                   ПВД.Отключить);
		
		// Реквизиты правила
		ДобавитьЭлемент("Код",                         СокрЛП(ПВД.Код));
		ДобавитьЭлемент("Наименование",                ПВД.Наименование);
		ДобавитьЭлемент("Порядок",                     ПВД.Порядок);
		ДобавитьЭлемент("Описание",                    ПВД.Описание);
		ДобавитьЭлемент("Комментарий",                 ПВД.Комментарий);

		ДобавитьЭлемент("КодПравилаКонвертации",       ПВД.ПравилоКонвертации.Код);
		ДобавитьЭлемент("СпособОтбораДанных",          ИмяЗначенияПеречисления(ПВД.СпособОтбораДанных));
		ДобавитьЭлемент("ОбъектВыборки",               ПВД.ОбъектВыборки.Наименование);
		
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ПВД.ВыбиратьДанныеДляВыгрузкиОднимЗапросом, "ВыбиратьДанныеДляВыгрузкиОднимЗапросом");
		ВыгрузитьБулевоЗначениеТолькоЕслиИстина(ПВД.НеВыгружатьОбъектыСозданныеВБазеПриемнике, "НеВыгружатьОбъектыСозданныеВБазеПриемнике");
		
		// СобытияВыгрузкиДанных
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПВД.АлгоритмПередОбработкойПравила, "ПередОбработкойПравила");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПВД.АлгоритмПередВыгрузкойОбъекта, "ПередВыгрузкойОбъекта");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПВД.АлгоритмПослеВыгрузкиОбъекта, "ПослеВыгрузкиОбъекта");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПВД.АлгоритмПослеОбработкиПравила, "ПослеОбработкиПравила");
		
		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");

		УстановитьАтрибут("Отключить", ПВД.Отключить);
		
		// Реквизиты группы
		ДобавитьЭлемент("Код",          СокрЛП(ПВД.Код));
		ДобавитьЭлемент("Наименование", ПВД.Наименование);
		ДобавитьЭлемент("Порядок",      ПВД.Порядок);
		ДобавитьЭлемент("Описание",     ПВД.Описание);
		ДобавитьЭлемент("Комментарий",  ПВД.Комментарий);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		ВыгрузитьПравилаВыгрузкиДанных(Объект);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
				
	КонецЕсли;

КонецПроцедуры // ВыгрузитьПравилоВыгрузкиДанных()

// Осуществляет выгрузку ПОД в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел ПОД
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о ПОД
// 
Процедура ВыгрузитьПравилоОчисткиДанных(Объект)

	Если Объект.ПравилоОчисткиДанныхСсылка = Null Тогда
		
    	Возврат;
		
	КонецЕсли;

	Если НЕ Объект.ПравилоОчисткиДанныхСсылка.ЭтоГруппа Тогда

		мЗаписьXML.ЗаписатьНачалоЭлемента("Правило");
		
		УстановитьАтрибут("Отключить",                 Объект.ПравилоОчисткиДанныхСсылка.Отключить);
		
		
		ДобавитьЭлемент("Код",                         СокрЛП(Объект.ПравилоОчисткиДанныхСсылка.Код));
		ДобавитьЭлемент("Порядок",                     Объект.ПравилоОчисткиДанныхСсылка.Порядок);
		ДобавитьЭлемент("Описание",                    Объект.ПравилоОчисткиДанныхСсылка.Описание);
		ДобавитьЭлемент("Комментарий",                 Объект.ПравилоОчисткиДанныхСсылка.Комментарий);
		
		ДобавитьЭлемент("Непосредственно",             Объект.ПравилоОчисткиДанныхСсылка.Непосредственно);
		ДобавитьЭлемент("СпособОтбораДанных",          ИмяЗначенияПеречисления(Объект.ПравилоОчисткиДанныхСсылка.СпособОтбораДанных));
		ДобавитьЭлемент("ОбъектВыборки",               Объект.ПравилоОчисткиДанныхСсылка.ОбъектВыборки.Наименование);
		
		// СобытияОчисткиДанных
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(Объект.ПравилоОчисткиДанныхСсылка.АлгоритмПередОбработкойПравила, "ПередОбработкойПравила");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(Объект.ПравилоОчисткиДанныхСсылка.АлгоритмПослеОбработкиПравила, "ПослеОбработкиПравила");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(Объект.ПравилоОчисткиДанныхСсылка.АлгоритмПередУдалениемОбъекта, "ПередУдалениемОбъекта");
		
		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");
		
		УстановитьАтрибут("Отключить",  Объект.ПравилоОчисткиДанныхСсылка.Отключить);
		
		// Реквизиты группы
		ДобавитьЭлемент("Код",          СокрЛП(Объект.ПравилоОчисткиДанныхСсылка.Код));
		ДобавитьЭлемент("Порядок",      Объект.ПравилоОчисткиДанныхСсылка.Порядок);
		ДобавитьЭлемент("Описание",     Объект.ПравилоОчисткиДанныхСсылка.Описание);
		ДобавитьЭлемент("Комментарий",  Объект.ПравилоОчисткиДанныхСсылка.Комментарий);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		ВыгрузитьПравилаОчисткиДанных(Объект);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();			
				
	КонецЕсли;

КонецПроцедуры // ВыгрузитьПравилоОчисткиДанных()

// Осуществляет выгрузку Алгоритма в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел алгоритмов
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о алгоритме
// 
Процедура ВыгрузитьАлгоритм(Объект)

	Если Объект.АлгоритмСсылка = Null Тогда
		
    	Возврат;
		
	КонецЕсли;

	Если НЕ Объект.АлгоритмСсылка.ЭтоГруппа Тогда

		мЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритм");
		
		УстановитьАтрибут("Имя",                     СокрЛП(Объект.АлгоритмСсылка.Код), Ложь);
		УстановитьАтрибут("ИспользуетсяПриЗагрузке", Объект.АлгоритмСсылка.ИспользуетсяПриЗагрузке);

		ДобавитьЭлемент("Текст",                   Объект.АлгоритмСсылка.Алгоритм);
		ДобавитьЭлемент("Комментарий",             Объект.АлгоритмСсылка.Комментарий);
		ДобавитьЭлемент("Параметры",               Объект.АлгоритмСсылка.Параметры);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе

		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");
		
		УстановитьАтрибут("Имя", СокрЛП(Объект.АлгоритмСсылка.Код), Ложь);
		ДобавитьЭлемент("Комментарий", Объект.АлгоритмСсылка.Комментарий);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		ВыгрузитьАлгоритмы(Объект);
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	КонецЕсли;

КонецПроцедуры // ВыгрузитьАлгоритм()

// Осуществляет выгрузку Запроса в соответствующий XML-узел
//
// Параметры:
//  Узел           - XML-узел запросов
//  Объект         - строка коллекции строк дерева значений, содержащая информацию о запросе
// 
Процедура ВыгрузитьЗапрос(Объект)

	Если Объект.ЗапросСсылка = Null Тогда
		
    	Возврат;
		
	КонецЕсли;

	Если НЕ Объект.ЗапросСсылка.ЭтоГруппа Тогда
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Запрос");
		
		УстановитьАтрибут("Имя",                     СокрЛП(Объект.ЗапросСсылка.Код), Ложь);
		УстановитьАтрибут("ИспользуетсяПриЗагрузке", Объект.ЗапросСсылка.ИспользуетсяПриЗагрузке);

		ДобавитьЭлемент("Текст",                   Объект.ЗапросСсылка.ТекстЗапроса);
		ДобавитьЭлемент("Комментарий",             Объект.ЗапросСсылка.Комментарий);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		мЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе

		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");

		УстановитьАтрибут("Имя", СокрЛП(Объект.ЗапросСсылка.Код), Ложь);
		
		ДобавитьЭлемент("Комментарий", Объект.ЗапросСсылка.Комментарий);

		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		ВыгрузитьЗапросы(Объект);
		
		мЗаписьXML.ЗаписатьКонецЭлемента();			
				
	КонецЕсли;

КонецПроцедуры // ВыгрузитьЗапрос()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ГРУППОВОЙ ВЫГРУЗКИ ПРАВИЛ, АЛГОРИТМОВ И ЗАПРОСОВ

// Осуществляет выгрузку ПКО в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая правила
//  Узел           - XML-узел коллекции ПКО
// 
Процедура ВыгрузитьПравилаКонвертацииОбъектов(Объект)

	Для каждого Правило из Объект.Строки Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ТипЗнч(Объект) <> Тип("ДеревоЗначений") Тогда
			
			Если Объект.ПравилоКонвертацииОбъектовСсылка = Правило.ПравилоКонвертацииОбъектовСсылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыгрузитьПравилоКонвертацииОбъекта(Правило);
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьПравилаКонвертацииОбъектов()

// Осуществляет выгрузку ПКС в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая правила
//  Узел           - XML-узел коллекции ПКС
// 
Процедура ВыгрузитьПравилаКонвертацииСвойств(СсылкаНаПКО)

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ первые 1 1
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	               |ГДЕ
	               |	ПравилаКонвертацииСвойств.Владелец = &Владелец";
				   
	Запрос.УстановитьПараметр("Владелец", СсылкаНаПКО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПрерыванияПользователя();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииСвойств.Ссылка КАК Ссылка,
	               |	ПравилаКонвертацииСвойств.Владелец,
	               |	ПравилаКонвертацииСвойств.ЭтоГруппа,
	               |	ПравилаКонвертацииСвойств.Код,
	               |	ПравилаКонвертацииСвойств.Наименование,
	               |	ПравилаКонвертацииСвойств.Источник,
	               |	ПравилаКонвертацииСвойств.Приемник,
	               |	ПравилаКонвертацииСвойств.Порядок КАК Порядок,
	               |	ПравилаКонвертацииСвойств.ПравилоКонвертации,
	               |	ПравилаКонвертацииСвойств.ПравилоКонвертации.Код КАК КодПравилаКонвертации,
	               |	ПравилаКонвертацииСвойств.ИмяПравилаКонвертации,
	               |	ПравилаКонвертацииСвойств.Комментарий,
	               |	ПравилаКонвертацииСвойств.Описание,
	               |	ПравилаКонвертацииСвойств.ПолучитьИзВходящихДанных,
	               |	ПравилаКонвертацииСвойств.АлгоритмПередВыгрузкойСвойства,
	               |	ПравилаКонвертацииСвойств.АлгоритмПриВыгрузкеСвойства,
	               |	ПравилаКонвертацииСвойств.АлгоритмПослеВыгрузкиСвойства,
	               |	ПравилаКонвертацииСвойств.АлгоритмПередОбработкойВыгрузки,
	               |	ПравилаКонвертацииСвойств.АлгоритмПослеОбработкиВыгрузки,
	               |	ПравилаКонвертацииСвойств.Поиск,
	               |	ПравилаКонвертацииСвойств.Отключить,
	               |	ПравилаКонвертацииСвойств.НеЗамещать,
	               |	ПравилаКонвертацииСвойств.Представление,
	               |	ПравилаКонвертацииСвойств.АвтоматическиПриводитьЗначениеКДлинеПриемника,
	               |	ПравилаКонвертацииСвойств.ИмяПараметраДляПередачи,
				   |	ПравилаКонвертацииСвойств.ПоискПоДатеНаРавенство,
				   |	ПравилаКонвертацииСвойств.ВыгружатьГруппуЧерезФайл,
				   |
				   |    СвойстваИсточника.Наименование КАК НаименованиеИсточника,
				   |    СвойстваИсточника.Вид КАК ВидИсточника,
				   |    СвойстваИсточникаТипы.Тип.Наименование КАК НаименованиеТипаИсточника,
				   |
				   |	ВЫБОР
				   |	КОГДА 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.Свойства.Типы Т ГДЕ Т.Ссылка = ПравилаКонвертацииСвойств.Источник СГРУППИРОВАТЬ ПО Ссылка ИМЕЮЩИЕ Количество(*) = 1) 
				   | 	Тогда ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕдинственныйТипИсточника,
				   |
				   |	СвойстваПриемника.Наименование КАК НаименованиеПриемника,
				   |    СвойстваПриемника.Вид КАК ВидПриемника,
				   |    СвойстваПриемникаТипы.Тип.Наименование КАК НаименованиеТипаПриемника,
				   |
				   |	ВЫБОР
				   |	КОГДА 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.Свойства.Типы Т ГДЕ Т.Ссылка = ПравилаКонвертацииСвойств.Приемник СГРУППИРОВАТЬ ПО Ссылка ИМЕЮЩИЕ Количество(*) = 1) 
				   | 	Тогда ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕдинственныйТипПриемника,
				   |
				   |	ВЫБОР КОГДА СвойстваПриемника.Наименование ПОДОБНО ""%ЭтоГруппа%""
				   |	ТОГДА Истина
				   |	ИНАЧЕ Ложь КОНЕЦ КАК ОбязательноеСвойство_ЭтоГруппа
				   |
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
				   |	Левое соединение Справочник.Свойства КАК СвойстваИсточника По (СвойстваИсточника.Ссылка = ПравилаКонвертацииСвойств.Источник)
				   |	Левое соединение Справочник.Свойства.Типы КАК СвойстваИсточникаТипы По (СвойстваИсточника.Ссылка = СвойстваИсточникаТипы.Ссылка И СвойстваИсточникаТипы.НомерСтроки = 1)
				   |
				   |	Левое соединение Справочник.Свойства КАК СвойстваПриемника По (СвойстваПриемника.Ссылка = ПравилаКонвертацииСвойств.Приемник)
				   |	Левое соединение Справочник.Свойства.Типы КАК СвойстваПриемникаТипы По (СвойстваПриемника.Ссылка = СвойстваПриемникаТипы.Ссылка И СвойстваПриемникаТипы.НомерСтроки = 1)
	               |ГДЕ
	               |	ПравилаКонвертацииСвойств.Владелец = &Владелец
	               |
				   |УПОРЯДОЧИТЬ ПО
	               |	Порядок
				   |
	               |ИТОГИ ПО
	               |	Ссылка ИЕРАРХИЯ
				   |";
				   
	Запрос.УстановитьПараметр("Владелец", СсылкаНаПКО);
	
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВыгрузитьСтрокиДереваПКС(ДеревоРезультата.Строки, Истина);	
	
КонецПроцедуры

Процедура ВыгрузитьСтрокиДереваПКС(Строки, ЗаписыватьЭлементы = Ложь)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если ЗаписыватьЭлементы Тогда
			
			Если СтрокаДерева.ЭтоГруппа Тогда
				мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");
			Иначе
				мЗаписьXML.ЗаписатьНачалоЭлемента("Свойство");
			КонецЕсли;
			
		КонецЕсли;
		
		
		СтрокиПодчиненного =  СтрокаДерева.Строки;
		
		КоличествоПодчиненныхСтрок = СтрокаДерева.Строки.Количество();
		
		Если КоличествоПодчиненныхСтрок = 0 Тогда
			
			ВыгрузитьПравилоКонвертацииСвойства(СтрокаДерева);
			
		Иначе
			
			// это не конечная строка
			// спускаемся на самый нижний уровень
			СтрокаПодчиненная = СтрокиПодчиненного.Найти(СтрокаДерева.Ссылка, "Ссылка");
			
			Если СтрокаПодчиненная.Строки.Количество() > 0 Тогда
				ВыгрузитьСтрокиДереваПКС(СтрокаПодчиненная.Строки, Ложь);
			Иначе
				ВыгрузитьПравилоКонвертацииСвойства(СтрокаПодчиненная);
			КонецЕсли;
			
			СтрокиПодчиненного.Удалить(СтрокаПодчиненная);
			ВыгрузитьСтрокиДереваПКС(СтрокиПодчиненного, Истина);
			
		КонецЕсли;
		
		
		Если ЗаписыватьЭлементы Тогда	
			мЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Осуществляет выгрузку ПКЗ в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая правила
//  Узел           - XML-узел коллекции ПКЗ
// 
Процедура ВыгрузитьПравилаКонвертацииЗначений(Объект, Таблица)

	Если ТипЗнч(Таблица) = Тип("ДеревоЗначений") Тогда
		
		НайденнаяСтрока = Таблица.Строки.Найти(Объект.ПравилоКонвертацииОбъектовСсылка, "ПравилоКонвертацииОбъектовСсылка");
		
	Иначе
		
        НайденнаяСтрока = Объект;
		
	КонецЕсли;

	Если НайденнаяСтрока <> Неопределено Тогда
		
        ОбработкаПрерыванияПользователя();
		
		Для каждого Значение из НайденнаяСтрока.Строки Цикл
			
			Если НайденнаяСтрока.ПравилоКонвертацииЗначенийСсылка = Значение.ПравилоКонвертацииЗначенийСсылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыгрузитьПравилоКонвертацииЗначения(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьПравилаКонвертацииЗначений()

// Осуществляет выгрузку ПВД в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая правила
//  Узел           - XML-узел коллекции ПВД
// 
Процедура ВыгрузитьПравилаВыгрузкиДанных(Объект = Неопределено)

	Для каждого Правило из Объект.Строки Цикл
		
        ОбработкаПрерыванияПользователя();
		
		Если ТипЗнч(Объект) <> Тип("ДеревоЗначений") Тогда
			
			Если Объект.ПравилоВыгрузкиДанныхСсылка = Правило.ПравилоВыгрузкиДанныхСсылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыгрузитьПравилоВыгрузкиДанных(Правило);
		
	КонецЦикла;

КонецПроцедуры // ВыгрузитьПравилаВыгрузкиДанных()

// Осуществляет выгрузку ПОД в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая правила
//  Узел           - XML-узел коллекции ПОД
// 
Процедура ВыгрузитьПравилаОчисткиДанных(Объект)

	Для каждого Правило из Объект.Строки Цикл
		
        ОбработкаПрерыванияПользователя();
		
		Если ТипЗнч(Объект) <> Тип("ДеревоЗначений") Тогда
			
			Если Объект.ПравилоОчисткиДанныхСсылка = Правило.ПравилоОчисткиДанныхСсылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыгрузитьПравилоОчисткиДанных(Правило);
		
	КонецЦикла;

КонецПроцедуры // ВыгрузитьПравилаВыгрузкиДанных()

// Осуществляет выгрузку Алгоритмов в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая алгоритмы
//  Узел           - XML-узел коллекции Алгоритмов
// 
Процедура ВыгрузитьАлгоритмы(Объект)

	Для каждого Алгоритм из Объект.Строки Цикл
		
        ОбработкаПрерыванияПользователя();
		
		Если ТипЗнч(Объект) <> Тип("ДеревоЗначений") Тогда
			
			Если Объект.АлгоритмСсылка = Алгоритм.АлгоритмСсылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыгрузитьАлгоритм(Алгоритм);
		
	КонецЦикла;

КонецПроцедуры // ВыгрузитьАлгоритмы()

// Осуществляет выгрузку Запросов в соответствующий XML-узел
//
// Параметры:
//  Объект         - коллекция строк дерева значений, содержащая запросы
//  Узел           - XML-узел коллекции Запросов
// 
Процедура ВыгрузитьЗапросы(Объект)

	Для каждого Запрос из Объект.Строки Цикл
		
        ОбработкаПрерыванияПользователя();
		
		Если ТипЗнч(Объект) <> Тип("ДеревоЗначений") Тогда
			
			Если Объект.ЗапросСсылка = Запрос.ЗапросСсылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыгрузитьЗапрос(Запрос);
		
	КонецЦикла;

КонецПроцедуры // ВыгрузитьЗапросы()

// Выполняет выгрузку правил из переданных таблиц
//
// Параметры:
//  ТаблицаПКО     - Таблица, из которого осуществляется загрузка ПКО;
//  ТаблицаПВД     - Строка, указывающая тип источника: "XMLФайл", "ЧтениеXML", "Строка"
//  ТаблицаПОД     - 
// 
Процедура ВыгрузитьКонвертацию(ТаблицаПКО, ТаблицаПВД, ТаблицаПОД, ТаблицаАлгоритмы, ТаблицаЗапросы)

	мФормаПрогрессора.КомментарийОбработкиДанных = "Выгрузка настроек обмена данными...";
	мЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОбмена");
	
	ВыгрузитьРеквизитыКонвертации();
	ВыгрузитьСобытияКонвертации();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаКонвертацииОбъектов");
	мФормаПрогрессора.КомментарийОбработкиДанных = "Выгрузка ПКО...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаПКО.Строки.Итог("Количество");
	ВыгрузитьПравилаКонвертацииОбъектов(ТаблицаПКО);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();

	мЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаВыгрузкиДанных");
	мФормаПрогрессора.КомментарийОбработкиДанных = "Выгрузка ПВД...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаПВД.Строки.Итог("Количество");
	ВыгрузитьПравилаВыгрузкиДанных(ТаблицаПВД);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОчисткиДанных");
	мФормаПрогрессора.КомментарийОбработкиДанных = "Выгрузка ПОД...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаПОД.Строки.Итог("Количество");
	ВыгрузитьПравилаОчисткиДанных(ТаблицаПОД);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритмы");
	мФормаПрогрессора.КомментарийОбработкиДанных = "Выгрузка алгоритмов...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаАлгоритмы.Строки.Итог("Количество");
	ВыгрузитьАлгоритмы(ТаблицаАлгоритмы);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("Запросы");
	мФормаПрогрессора.КомментарийОбработкиДанных = "Выгрузка запросов...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаЗапросы.Строки.Итог("Количество");
	ВыгрузитьЗапросы(ТаблицаЗапросы);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	мЗаписьXML.ЗаписатьКонецЭлемента();

	мФормаПрогрессора.КомментарийОбработкиДанных = "";
	мФормаПрогрессора.МаксимальноеЗначение = 0;

КонецПроцедуры // ВыгрузитьКонвертацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ МОДУЛЯ

Функция ПолучитьТекстПоОбластиБезНазванияОбласти(Область)
	
	ТекстОбласти = Область.ПолучитьТекст();
	
	Если Найти(ТекстОбласти, "#Область") > 0 Тогда
	
		ПервыйПереводСтроки = Найти(ТекстОбласти, Символы.ПС);
		
		ТекстОбласти = Сред(ТекстОбласти, ПервыйПереводСтроки + 1);
		
	КонецЕсли;
	
	Возврат ТекстОбласти;
	
КонецФункции

Процедура СформироватьЗаголовокМодуля(Результат, ИмяМакета)

	ЗаголовокМодуля = ПолучитьМакет(ИмяМакета);
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ЗаголовокМодуля));

КонецПроцедуры // СформироватьЗаголовокМодуля()

Процедура СформироватьПроцедурыИФункцииМодуля(Результат, ИмяМакета)
	
	ПроцедурыИФункцииМодуля = ПолучитьМакет(ИмяМакета);
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ПроцедурыИФункцииМодуля));
	
КонецПроцедуры // СформироватьПроцедурыИФункцииМодуля()

Процедура СформироватьПредварительноеОписаниеАлгоритма(Результат, ВыборкаАлгоритмы)
	
	ИмяАлгоритма = СокрЛП(ВыборкаАлгоритмы.Код);
	Результат.ЗаписатьСтроку("Функция " + ИмяАлгоритма + "(");
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("ПредварительноеОписаниеАлгоритма");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
КонецПроцедуры // СформироватьПредварительноеОписаниеАлгоритма()

Процедура СформироватьТекстАлгоритма(Результат, ВыборкаАлгоритмы)
	
	ИмяАлгоритма = СокрЛП(ВыборкаАлгоритмы.Код);
	Алгоритм = ВыборкаАлгоритмы.Алгоритм;
	
	Результат.ЗаписатьСтроку("Функция " + ИмяАлгоритма + "(");
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Алгоритм");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	УстановитьПараметрыДляВсегоАлгоритма(Результат, Алгоритм, Символы.Таб, "Алгоритм");
	
	//Для Индекс = 1 По СтрЧислоСтрок(Алгоритм) Цикл
	//	
	//	Результат.ЗаписатьСтроку(Символы.Таб + УстановитьПараметрыВызоваАлгоритма(СтрПолучитьСтроку(Алгоритм, Индекс), "Алгоритм"));
	//	
	//КонецЦикла;
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Алгоритм_КонецОбработчика");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	Результат.ЗаписатьСтроку("КонецФункции // " + ИмяАлгоритма + "()" + Символы.ПС);
	
КонецПроцедуры // СформироватьТекстАлгоритма()

Процедура СформироватьТекстКонвертация(Результат, Конвертация, ИмяОбработчика)
	
	Попытка
		
		Обработчик = Конвертация[ИмяОбработчика];
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
		
	Если ПустаяСтрока(Обработчик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяОбласти = "Конвертация_" + СтрЗаменить(ИмяОбработчика, "Алгоритм", "");
	ИмяОбработчика = ИмяОбласти;
	
	Результат.ЗаписатьСтроку("Функция " + ИмяОбработчика + "(");
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_Параметры");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти);
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Попытка");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	УстановитьПараметрыДляВсегоАлгоритма(Результат, Обработчик, Символы.Таб + Символы.Таб, ИмяОбласти + "_Параметры");
	
	ЗаписатьТекстИсключенияВОбработчике(Результат, ИмяОбработчика);
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_КонецОбработчика");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	Результат.ЗаписатьСтроку("КонецФункции // " + ИмяОбработчика + "()" + Символы.ПС);
	
КонецПроцедуры // СформироватьТекстПВД()

Процедура ЗаписатьТекстИсключенияВОбработчике(Результат, ИмяОбработчика)
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Исключение");
	ТекстИсключения = ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
	ТекстИсключения = СтрЗаменить(ТекстИсключения, "[ИмяОбработчика]", ИмяОбработчика);
	Результат.ЗаписатьСтроку(ТекстИсключения);
		
КонецПроцедуры

Процедура СформироватьТекстПВД(Результат, Правило, ИмяОбработчика)
	
	Попытка
		
		Обработчик = Правило[ИмяОбработчика];
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
		
	Если ПустаяСтрока(Обработчик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяОбласти = "ПВД_" + СтрЗаменить(ИмяОбработчика, "Алгоритм", "");
	ИмяОбработчика = ИмяОбласти + "_" + СокрЛП(Правило.Код);
	
	Результат.ЗаписатьСтроку("Функция " + ИмяОбработчика + "(");
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_Параметры");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти);
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Попытка");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	УстановитьПараметрыДляВсегоАлгоритма(Результат, Обработчик, Символы.Таб + Символы.Таб, ИмяОбласти + "_Параметры");
	
	ЗаписатьТекстИсключенияВОбработчике(Результат, ИмяОбработчика);
		
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_КонецОбработчика");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	Результат.ЗаписатьСтроку("КонецФункции // " + ИмяОбработчика + "()" + Символы.ПС);
	
КонецПроцедуры // СформироватьТекстПВД()

Процедура СформироватьТекстПКО(Результат, Правило, ИмяОбработчика)
	
	Попытка
		
		Обработчик = Правило[ИмяОбработчика];
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
		
	Если ПустаяСтрока(Обработчик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяОбласти = "ПКО_" + СтрЗаменить(СтрЗаменить(ИмяОбработчика, "Алгоритм", ""), "Объекта", "");
	ИмяОбработчика = ИмяОбласти + "_" + СокрЛП(Правило.Код);
	
	Результат.ЗаписатьСтроку("Функция " + ИмяОбработчика + "(");
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_Параметры");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти);
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Попытка");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	УстановитьПараметрыДляВсегоАлгоритма(Результат, Обработчик, Символы.Таб + Символы.Таб, ИмяОбласти + "_Параметры");
	
	ЗаписатьТекстИсключенияВОбработчике(Результат, ИмяОбработчика);
		
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_КонецОбработчика");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	Результат.ЗаписатьСтроку("КонецФункции // " + ИмяОбработчика + "()" + Символы.ПС);
	
КонецПроцедуры // СформироватьТекстПКО()

Процедура СформироватьТекстПКС(Результат, Правило, ИмяОбработчика)
	
	Попытка
		
		Обработчик = Правило[ИмяОбработчика];
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
		
	Если ПустаяСтрока(Обработчик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяОбласти = "ПК" + ?(Правило.ЭтоГруппа, "Г", "") + "С_" + СтрЗаменить(СтрЗаменить(ИмяОбработчика, "Алгоритм", ""), "Свойства", "");
	ИмяВладельца = "_" + СокрЛП(Правило.КодВладельца);
	ИмяПриемника = "";
	ВидПриемника = "";
	ИмяРодителя = "";
	
	Если Правило.ЭтоГруппа Тогда
		
		ИмяПриемника = "_" + СокрЛП(Правило.Приемник);
		ВидПриемника = "_" + СокрЛП(XMLСтрока(Правило.ВидПриемника));			
				
	Иначе
		
		Если ЗначениеЗаполнено(Правило.Родитель) Тогда
			
			Если ЗначениеЗаполнено(Правило.ВидПриемникаРодителя) Тогда
				
				ИмяРодителя = "_" + СокрЛП(Правило.ПриемникРодителя);
				
			КонецЕсли;
				
		КонецЕсли;
		
		ИмяПриемника = "_" + СокрЛП(Правило.Приемник);
		ВидПриемника = "_" + СокрЛП(XMLСтрока(Правило.ВидПриемника));
		
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбласти + ИмяВладельца + ИмяРодителя + ИмяПриемника + ВидПриемника + СокрЛП(СтрЗаменить(Правило.Код, Символы.НПП, ""));
	
	Результат.ЗаписатьСтроку("Функция " + ИмяОбработчика + "(");
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_Параметры");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти);
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть("Попытка");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	УстановитьПараметрыДляВсегоАлгоритма(Результат, Обработчик, Символы.Таб + Символы.Таб, ИмяОбласти + "_Параметры");
	
	ЗаписатьТекстИсключенияВОбработчике(Результат, ИмяОбработчика);
	
	ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбласти + "_КонецОбработчика");
	Результат.ЗаписатьСтроку(ПолучитьТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть));
	
	Результат.ЗаписатьСтроку("КонецФункции // " + ИмяОбработчика + "()" + Символы.ПС);
	
КонецПроцедуры // СформироватьТекстПКС()

Функция ОпределитьПараметрыВызова(СтрокаМодуля, ИмяОбластиПараметров = "")
	
	ПараметрыВызова = "";
	
	Если ПустаяСтрока(ИмяОбластиПараметров) = Ложь Тогда
		
		ТекущаяОбласть = мОбработчикиСобытий.ПолучитьОбласть(ИмяОбластиПараметров);
		
		ПараметрыОбработчика = МассивИзСтроки(ТекущаяОбласть.ПолучитьСтроку(2));
		
		Для каждого ПараметрАлгоритма из мПараметрыАлгоритма Цикл
			
			Если ПараметрАлгоритма = "Отказ" Тогда
				
				ПараметрыВызова = ПараметрыВызова + " " + ПараметрАлгоритма;
				
			Иначе
				
				ПараметрНайден = Ложь;
			
				Для каждого ПараметрОбработчика из ПараметрыОбработчика Цикл
					
					Если ПараметрОбработчика = ПараметрАлгоритма Тогда
						
						ПараметрНайден = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
			
				ПараметрыВызова = ПараметрыВызова + ?(ПараметрНайден, " " + ПараметрАлгоритма, "") + ",";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыВызова;
	
КонецФункции

Функция УстановитьПараметрыДляВсегоАлгоритма(Результат, Обработчик, ПрефиксДобавления, ПостфиксДобавления)
	
	НаличиеВызоваАлгоритма = Ложь;
	Для каждого Алгоритм из мАлгоритмы Цикл
		
		Если Найти(Обработчик, Алгоритм) Тогда	
			
			НаличиеВызоваАлгоритма = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если НаличиеВызоваАлгоритма Тогда
			
		Для Индекс = 1 По СтрЧислоСтрок(Обработчик) Цикл
			
			Результат.ЗаписатьСтроку(ПрефиксДобавления + УстановитьПараметрыВызоваАлгоритма(СтрПолучитьСтроку(Обработчик, Индекс), ПостфиксДобавления));
			
		КонецЦикла;
		
	Иначе
		
		Для Индекс = 1 По СтрЧислоСтрок(Обработчик) Цикл
			
			Результат.ЗаписатьСтроку(ПрефиксДобавления + СтрПолучитьСтроку(Обработчик, Индекс));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьПараметрыВызоваАлгоритма(СтрокаМодуля, ИмяОбластиПараметров = "")
		
	Для каждого Алгоритм из мАлгоритмы Цикл
		
		Если Найти(СтрокаМодуля, Алгоритм) Тогда
			
			ПараметрыВызова = ОпределитьПараметрыВызова(СтрокаМодуля, ИмяОбластиПараметров);
			
			СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Алгоритм, СтрЗаменить(Алгоритм, "()", "(" + ПараметрыВызова + ")"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаМодуля;
	
КонецФункции // УстановитьПараметрыВызоваАлгоритма()

Функция МассивИзСтроки(Знач Строка, Разделитель = ",")
	
	Массив = Новый Массив;
	
	Строка = СтрЗаменить(Строка, "#Область Алгоритм", "");
	Строка = СтрЗаменить(Строка, Символы.Таб, "");
	Строка = СтрЗаменить(Строка, Символы.ПС, "");
	Строка = СтрЗаменить(Строка, "(", "");
	Строка = СтрЗаменить(Строка, ")", "");
	Строка = СтрЗаменить(Строка, " = """"", "");
	Строка = СтрЗаменить(Строка, " ", "");
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
	
	Для Индекс = 1 По СтрЧислоСтрок(Строка) Цикл
		
		Массив.Добавить(СтрПолучитьСтроку(Строка, Индекс));
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет выгрузку правил в XML-файл
//
Процедура ВыполнитьВыгрузкуПравил() Экспорт
	
	мФормаПрогрессора.Значение = 0;
	
	Если ВыгружатьПравилаКорреспондента Тогда
		
		ИмяАрхива                       = ИмяФайлаПравил;
		ИмяПравилВыгрузки               = КаталогВременныхФайлов() + "ExchangeRules.xml";
		ИмяПравилВыгрузкиКорреспондента = КаталогВременныхФайлов() + "CorrespondentExchangeRules.xml";
		
		Если ВыгружатьПравилаРегистрации Тогда
			ИмяПравилВыгрузкиРегистрации = КаталогВременныхФайлов() + "RegistrationRules.xml";
		КонецЕсли;
		
	Иначе
		ИмяВременногоФайла              = ?(СжиматьФайлПравил, КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".xml", ИмяФайлаПравил);
		ИмяАрхива                       = ИмяВременногоФайла;
		ИмяПравилВыгрузки               = ИмяВременногоФайла;
		ИмяПравилВыгрузкиКорреспондента = "";
	КонецЕсли;
	
	мЗаписьXML = Новый ЗаписьXML;

	мЗаписьXML.ОткрытьФайл(ИмяПравилВыгрузки);
				
	мТаблицаПКЗ = ВыполнитьЗапросПКЗ();
	
	ВыгрузитьКонвертацию(ВыполнитьЗапросПКО(), ВыполнитьЗапросПВД(), ВыполнитьЗапросПОД(), ВыполнитьЗапросАлгоритмы(), ВыполнитьЗапросЗапросы());
	
	мЗаписьXML.Закрыть();
	
	Если ВыгружатьПравилаКорреспондента Тогда
		
		мФормаПрогрессора.Значение = 0;
		
		ВремКонв = КонвертацияДляВыгрузки;
		
		КонвертацияДляВыгрузки = КонвертацияКорреспондентДляВыгрузки;
		
		мЗаписьXML = Новый ЗаписьXML;

		мЗаписьXML.ОткрытьФайл(ИмяПравилВыгрузкиКорреспондента);
					
		мТаблицаПКЗ = ВыполнитьЗапросПКЗ();
		
		ВыгрузитьКонвертацию(ВыполнитьЗапросПКО(), ВыполнитьЗапросПВД(), ВыполнитьЗапросПОД(), ВыполнитьЗапросАлгоритмы(), ВыполнитьЗапросЗапросы());
		
		мЗаписьXML.Закрыть();
		
		КонвертацияДляВыгрузки = ВремКонв;
		
	КонецЕсли;
	
	Если ВыгружатьПравилаРегистрации Тогда
		
		мФормаПрогрессора.Значение = 0;
		
		мЗаписьXML = Новый ЗаписьXML;
		
		мЗаписьXML.ОткрытьФайл(ИмяПравилВыгрузкиРегистрации);
		
		ОбработкаВыгрузкиРегистрации = Обработки.ВыгрузкаРегистрации.Создать();
		ОбработкаВыгрузкиРегистрации.мЗаписьXML = мЗаписьXML;
		ОбработкаВыгрузкиРегистрации.РегистрацияДляВыгрузки = РегистрацияДляВыгрузки;
		
		ОбработкаВыгрузкиРегистрации.ВыгрузитьРегистрацию();
		
		мЗаписьXML.Закрыть();
		
	КонецЕсли;
		
	Если СжиматьФайлПравил Тогда
		
		Попытка
			
			Состояние("Выполняется архивация файла правил...");
												
			Архиватор = Новый ЗаписьZipФайла(ИмяАрхива, , "Файл правил обмена данными");
			Архиватор.Добавить(ИмяПравилВыгрузки);
			
			Если ВыгружатьПравилаКорреспондента Тогда
				
				Архиватор.Добавить(ИмяПравилВыгрузкиКорреспондента);
				
				Если ВыгружатьПравилаРегистрации Тогда
					Архиватор.Добавить(ИмяПравилВыгрузкиРегистрации);
				КонецЕсли;

			КонецЕсли;
			
			Архиватор.Записать();
			
			УдалитьФайлы(ИмяПравилВыгрузки);
			Если ВыгружатьПравилаКорреспондента Тогда
				УдалитьФайлы(ИмяПравилВыгрузкиКорреспондента);
			КонецЕсли;
			
			Если ВыгружатьПравилаРегистрации Тогда
				УдалитьФайлы(ИмяПравилВыгрузкиРегистрации);
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
					
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьВыгрузку()

// Выполняет выгрузку модуля в текстовый файл
//
Процедура ВыполнитьВыгрузкуМодуляОбработкиВыгрузки() Экспорт

	//Результат = Новый ТекстовыйДокумент;
	Результат = Новый ЗаписьТекста(ИмяФайлаМодуляВыгрузки, КодировкаТекста.ANSI);

	СформироватьЗаголовокМодуля(Результат, "ЗаголовокМодуляВыгрузки");

	// Предварительные описания алгоритмов и заполнение массива вызовов алгоритмов
	мАлгоритмы = Новый Массив;
	
	ОбластьАлгоритм = мОбработчикиСобытий.ПолучитьОбласть("Алгоритм");
	мПараметрыАлгоритма = МассивИзСтроки(ПолучитьТекстПоОбластиБезНазванияОбласти(ОбластьАлгоритм));

	ВыборкаАлгоритмы = Справочники.Алгоритмы.Выбрать(, КонвертацияДляВыгрузки);
	
	Пока ВыборкаАлгоритмы.Следующий() Цикл

		Если ВыборкаАлгоритмы.ЭтоГруппа ИЛИ ВыборкаАлгоритмы.ИспользуетсяПриЗагрузке Тогда
			Продолжить;
		КонецЕсли;

		мАлгоритмы.Добавить(СокрЛП(ВыборкаАлгоритмы.Код) + "()");
		СформироватьПредварительноеОписаниеАлгоритма(Результат, ВыборкаАлгоритмы);

	КонецЦикла;
	
	// Алгоритмы
	ВыборкаАлгоритмы = Справочники.Алгоритмы.Выбрать(, КонвертацияДляВыгрузки);
	
	Пока ВыборкаАлгоритмы.Следующий() Цикл

		Если ВыборкаАлгоритмы.ЭтоГруппа ИЛИ ВыборкаАлгоритмы.ИспользуетсяПриЗагрузке Тогда
			
			Продолжить;
			
		КонецЕсли;

		СформироватьТекстАлгоритма(Результат, ВыборкаАлгоритмы);

	КонецЦикла;

	// Конвертация
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПослеЗагрузкиПравилОбмена");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПередВыгрузкойДанных");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПередВыгрузкойОбъекта");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПередКонвертациейОбъекта");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПослеВыгрузкиОбъекта");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПослеВыгрузкиДанных");


	// ПВД
	ВыборкаПВД = Справочники.ПравилаВыгрузкиДанных.Выбрать(, КонвертацияДляВыгрузки);

	Пока ВыборкаПВД.Следующий() Цикл

		Если ВыборкаПВД.ЭтоГруппа Тогда

			Продолжить;

		КонецЕсли;

		СформироватьТекстПВД(Результат, ВыборкаПВД, "АлгоритмПередОбработкойПравила");
		СформироватьТекстПВД(Результат, ВыборкаПВД, "АлгоритмПередВыгрузкойОбъекта");
		СформироватьТекстПВД(Результат, ВыборкаПВД, "АлгоритмПослеВыгрузкиОбъекта");
		СформироватьТекстПВД(Результат, ВыборкаПВД, "АлгоритмПослеОбработкиПравила");

	КонецЦикла;

	// ПКО
	ВыборкаПКО = Справочники.ПравилаКонвертацииОбъектов.Выбрать(, КонвертацияДляВыгрузки);

	Пока ВыборкаПКО.Следующий() Цикл

		Если ВыборкаПКО.ЭтоГруппа Тогда

			Продолжить;

		КонецЕсли;

		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПередВыгрузкойОбъекта");
		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПриВыгрузкеОбъекта");
		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПослеВыгрузкиОбъекта");
		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПослеВыгрузкиОбъектаВФайлОбмена");

		// ПКС
		ЗапросПКС = Новый Запрос();
		ЗапросПКС.Текст = "ВЫБРАТЬ
		                  |	ПравилаКонвертацииСвойств.Ссылка,
						  |	ПравилаКонвертацииСвойств.Код,
		                  |	ПравилаКонвертацииСвойств.ЭтоГруппа,
						  |	ПравилаКонвертацииСвойств.Владелец.Код КАК КодВладельца,
						  |	ПравилаКонвертацииСвойств.Приемник КАК Приемник,
						  |	ПравилаКонвертацииСвойств.Приемник.Вид КАК ВидПриемника,
						  |	ПравилаКонвертацииСвойств.Родитель КАК Родитель,
						  |	ПравилаКонвертацииСвойств.Родитель.Приемник.Вид КАК ВидПриемникаРодителя,
						  |	ПравилаКонвертацииСвойств.Родитель.Приемник КАК ПриемникРодителя,
						  |	ПравилаКонвертацииСвойств.АлгоритмПередОбработкойВыгрузки,
						  |	ПравилаКонвертацииСвойств.АлгоритмПередВыгрузкойСвойства,
						  |	ПравилаКонвертацииСвойств.АлгоритмПриВыгрузкеСвойства,
						  |	ПравилаКонвертацииСвойств.АлгоритмПослеВыгрузкиСвойства,
						  |	ПравилаКонвертацииСвойств.АлгоритмПослеОбработкиВыгрузки
		                  |ИЗ
		                  |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
		                  |ГДЕ
		                  |	ПравилаКонвертацииСвойств.Владелец = &Владелец
						  |	";
						  
		ЗапросПКС.УстановитьПараметр("Владелец", ВыборкаПКО.Ссылка);
		
		ВыборкаПКС = ЗапросПКС.Выполнить().Выбрать();
				
		//ВыборкаПКС = Справочники.ПравилаКонвертацииСвойств.Выбрать(, ВыборкаПКО.Ссылка);

		Пока ВыборкаПКС.Следующий() Цикл

			Если ВыборкаПКС.ЭтоГруппа Тогда

				СформироватьТекстПКС(Результат, ВыборкаПКС, "АлгоритмПередОбработкойВыгрузки");

			КонецЕсли;

			СформироватьТекстПКС(Результат, ВыборкаПКС, "АлгоритмПередВыгрузкойСвойства");
			СформироватьТекстПКС(Результат, ВыборкаПКС, "АлгоритмПриВыгрузкеСвойства");
			СформироватьТекстПКС(Результат, ВыборкаПКС, "АлгоритмПослеВыгрузкиСвойства");

			Если ВыборкаПКС.ЭтоГруппа Тогда

				СформироватьТекстПКС(Результат, ВыборкаПКС, "АлгоритмПослеОбработкиВыгрузки");

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	СформироватьПроцедурыИФункцииМодуля(Результат, "ПроцедурыИФункцииМодуляВыгрузки");
	
	Результат.Закрыть();
	
КонецПроцедуры // ВыполнитьВыгрузкуМодуля()

// Выполняет выгрузку модуля в текстовый файл
//
Процедура ВыполнитьВыгрузкуМодуляОбработкиЗагрузки() Экспорт

	//Результат = Новый ТекстовыйДокумент;
	Результат = Новый ЗаписьТекста(ИмяФайлаМодуляЗагрузки, КодировкаТекста.ANSI);

	СформироватьЗаголовокМодуля(Результат, "ЗаголовокМодуляЗагрузки");

	// Предварительные описания алгоритмов и заполнение массива вызовов алгоритмов
	мАлгоритмы = Новый Массив;
	
	ОбластьАлгоритм = мОбработчикиСобытий.ПолучитьОбласть("Алгоритм");
	мПараметрыАлгоритма = МассивИзСтроки(ПолучитьТекстПоОбластиБезНазванияОбласти(ОбластьАлгоритм));

	ВыборкаАлгоритмы = Справочники.Алгоритмы.Выбрать(, КонвертацияДляВыгрузки);
	
	Пока ВыборкаАлгоритмы.Следующий() Цикл

		Если ВыборкаАлгоритмы.ЭтоГруппа ИЛИ НЕ ВыборкаАлгоритмы.ИспользуетсяПриЗагрузке Тогда
			Продолжить;
		КонецЕсли;

		мАлгоритмы.Добавить(СокрЛП(ВыборкаАлгоритмы.Код) + "()");
		СформироватьПредварительноеОписаниеАлгоритма(Результат, ВыборкаАлгоритмы);

	КонецЦикла;
	
	// Алгоритмы
	ВыборкаАлгоритмы = Справочники.Алгоритмы.Выбрать(, КонвертацияДляВыгрузки);
	
	Пока ВыборкаАлгоритмы.Следующий() Цикл

		Если ВыборкаАлгоритмы.ЭтоГруппа ИЛИ НЕ ВыборкаАлгоритмы.ИспользуетсяПриЗагрузке Тогда
			
			Продолжить;
			
		КонецЕсли;

		СформироватьТекстАлгоритма(Результат, ВыборкаАлгоритмы);

	КонецЦикла;

	// Конвертация
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПередЗагрузкойДанных");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПослеЗагрузкиДанных");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПередЗагрузкойОбъекта");
	СформироватьТекстКонвертация(Результат, КонвертацияДляВыгрузки,"АлгоритмПослеЗагрузкиОбъекта");

	// ПКО
	ВыборкаПКО = Справочники.ПравилаКонвертацииОбъектов.Выбрать(, КонвертацияДляВыгрузки);

	Пока ВыборкаПКО.Следующий() Цикл

		Если ВыборкаПКО.ЭтоГруппа Тогда

			Продолжить;

		КонецЕсли;

		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПередЗагрузкойОбъекта");
		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПриЗагрузкеОбъекта");
		СформироватьТекстПКО(Результат, ВыборкаПКО, "АлгоритмПослеЗагрузкиОбъекта");

	КонецЦикла;

	СформироватьПроцедурыИФункцииМодуля(Результат, "ПроцедурыИФункцииМодуляЗагрузки");
	
	Результат.Закрыть();	
		
КонецПроцедуры // ВыполнитьВыгрузкуМодуля()

// функция проверяет наличие каталога обмена
Функция ПроверитьНаличиеКаталога(Знач ИмяКаталога, Знач ПроверятьЧтоНайденныйФайлЭтоКаталог = Ложь) Экспорт
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	Если ПустаяСтрока(ИмяКаталога) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ИмяКаталога);
	Если Не ВыбФайл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьЧтоНайденныйФайлЭтоКаталог Тогда
		// проверка что это точно каталог
		Возврат ВыбФайл.ЭтоКаталог();
	Иначе
		// если без разницы каталог это или нет
		Возврат Истина;
    КонецЕсли;
	
КонецФункции

// Процедура создает каталог если его нет
Процедура СоздатьКаталогВСлучаеОтсутствия(Знач ИмяКаталога)
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	НаличиеКаталогаОбмена = ПроверитьНаличиеКаталога(ИмяКаталога, Истина);
	
	Если НЕ НаличиеКаталогаОбмена Тогда
		// создаем вложенный каталог в темповый
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПараметрыТекстаДляЗапроса(ИмяТаблицыЗапроса, МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений)
	
	СтрокаВыборкаКолонок = "";
	СтрокаОграничений = "";
	
	Для Каждого Колонка Из МассивКолонок Цикл
		
		СтрокаВыборкаКолонок = СтрокаВыборкаКолонок + ",
		|" + ИмяТаблицыЗапроса + "." + Колонка;
		
		Если ПустаяСтрока(СтрокаОграничений) Тогда
			
			СтрокаОграничений = СтрокаОграничений + "
			| (ВЫРАЗИТЬ(" + ИмяТаблицыЗапроса + "." + Колонка + " КАК СТРОКА(500))) <> """" ";
			
		Иначе
		
			СтрокаОграничений = СтрокаОграничений + "
			|ИЛИ (ВЫРАЗИТЬ(" + ИмяТаблицыЗапроса + "." + Колонка + " КАК СТРОКА(500))) <> """" ";;
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

// Проверяет наличие запрещенных в среде MS Windows символов в имени файла.
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Булево – Истина, если есть запрещенные символы, Ложь, если нет.
//
Функция ЕстьЗапрещенныеСимволыИмени(ИмяФайла) Экспорт

	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		Если Найти(ИмяФайла,  СтрокаЗапретногоСимвола.Значение) > 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// ничего не нашли
	Возврат Ложь;
    	
КонецФункции // ЕстьЗапрещенныеСимволыИмени()

// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

Процедура СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, ПрефиксФайла)
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого Колонка Из МассивКолонок Цикл
			
			Если Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяФайла = ПрефиксФайла + УдалитьЗапрещенныеСимволыИмени(Строка(Выборка.Ссылка)) + "." + Колонка + ".МодульОбъекта.txt";
								
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(Выборка[Колонка]);
			ТекстовыйДокумент.Записать(ИмяФайла, "UTF-8");
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьОбработчикиВКаталог(КаталогДляВыгрузки) Экспорт
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	КаталогВыгрузки = КаталогДляВыгрузки + "\Выгрузка";
	КаталогЗагрузки = КаталогДляВыгрузки + "\Загрузка";
	 
	СоздатьКаталогВСлучаеОтсутствия(КаталогВыгрузки);
	СоздатьКаталогВСлучаеОтсутствия(КаталогЗагрузки);
	
	// КОНВЕРТАЦИЯ
	
	МассивКолонок = ПолучитьМассивИменОбработчиков("Конвертация", Истина);
	 
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("Конвертации", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	Конвертации.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.Конвертации КАК Конвертации
		                |ГДЕ
						|	Конвертации.Ссылка = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогВыгрузки + "\Конвертации.");				
						
	КонецЕсли;
	
	МассивКолонок = ПолучитьМассивИменОбработчиков("Конвертация", ЛОЖЬ);
	 
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("Конвертации", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	Конвертации.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.Конвертации КАК Конвертации
		                |ГДЕ
						|	Конвертации.Ссылка = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогЗагрузки + "\Конвертации.");				
						
	КонецЕсли;
	
	//ПРАВИЛА КОНВЕРТАЦИИ СВОЙСТВ
	
	МассивКолонок = ПолучитьМассивИменОбработчиков("ГруппаСвойств", Истина);
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("ПКС", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПКС.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.ПравилаКонвертацииСвойств КАК ПКС
		                |ГДЕ
						|	ПКС.Владелец.Владелец = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогВыгрузки + "\ПравилоКонвертацииСвойств.");				
						
	КонецЕсли;
		
	
	//ПРАВИЛА ВЫГРУЗКИ
	
	МассивКолонок = ПолучитьМассивИменОбработчиков("ПравилаВыгрузкиДанных", Истина);
	
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("ПВД", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПВД.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.ПравилаВыгрузкиДанных КАК ПВД
		                |ГДЕ
						|	ПВД.Владелец = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогВыгрузки + "\ПравилоВыгрузки.");				
						
	КонецЕсли;
	
	//ПРАВИЛА КОНВЕРТАЦИИ ОБЪЕКТОВ
    	
	МассивКолонок = ПолучитьМассивИменОбработчиков("ПравилаКонвертацииОбъектов", Истина);
	
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("ПКО", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПКО.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.ПравилаКонвертацииОбъектов КАК ПКО
		                |ГДЕ
						|	ПКО.Владелец = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогВыгрузки + "\ПравилоКонвертации.");				
						
	КонецЕсли;
	
	МассивКолонок = ПолучитьМассивИменОбработчиков("ПравилаКонвертацииОбъектов", ЛОЖЬ);
	
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("ПКО", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПКО.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.ПравилаКонвертацииОбъектов КАК ПКО
		                |ГДЕ
						|	ПКО.Владелец = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогЗагрузки + "\ПравилоКонвертации.");				
						
	КонецЕсли;
	
	//ПРАВИЛА ОЧИСТКИ ДАННЫХ
	МассивКолонок = ПолучитьМассивИменОбработчиков("ПравилаОчисткиОбъектов", Истина);
	
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("ПОД", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПОД.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.ПравилаОчисткиДанных КАК ПОД
		                |ГДЕ
						|	ПОД.Владелец = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогЗагрузки + "\ПравилоОчистки.");				
						
	КонецЕсли;
	
	//ПАРАМЕТРЫ	
	МассивКолонок = ПолучитьМассивИменОбработчиков("Параметры", Истина);
	
	Если МассивКолонок.Количество() <> 0 Тогда
	 
		СоздатьПараметрыТекстаДляЗапроса("Параметры", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений);
		 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	Параметры.Ссылка
		                |	" + СтрокаВыборкаКолонок + "
		                |ИЗ
		                |	Справочник.Параметры КАК Параметры
		                |ГДЕ
						|	Параметры.Владелец = &Конвертация
		                |	И ( " + СтрокаОграничений + " )" ;
						
		Запрос.УстановитьПараметр("Конвертация", КонвертацияДляВыгрузки);
		
		СохранитьДанныеОбработчиковВФайлы(Запрос, МассивКолонок, КаталогЗагрузки + "\Параметры.");				
						
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПриложения(Приложение)
	
	Если      Приложение = Перечисления.Приложения.Предприятие77         Тогда Возврат "7.7";
	ИначеЕсли Приложение = Перечисления.Приложения.Предприятие80         Тогда Возврат "8.0";
	ИначеЕсли Приложение = Перечисления.Приложения.УправляемоеПриложение Тогда Возврат "8.0";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВерсияФормата = "2.01";
мОбработчикиСобытий = ПолучитьМакет("ОбработчикиСобытий");

мСоответствиеПеречисленийИИмен = Новый Соответствие;

мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");

мТипСтрока = Тип("Строка");

#КонецЕсли