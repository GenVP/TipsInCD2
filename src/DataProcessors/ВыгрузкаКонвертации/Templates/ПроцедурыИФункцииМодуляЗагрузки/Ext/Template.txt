
////////////////////////////////////////////////////////////////////////////////
// ОКОНЧАНИЕ ОБРАБОТЧИКОВ
////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------------------
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗафиксироватьОшибку(ТекстОшибки)
	
	СписокОшибок.ДобавитьЗначение(ТекстОшибки);
	
КонецПроцедуры // ЗафиксироватьОшибку()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОшибку(Содержание="", Маркер="")
                        
	Сообщить(Содержание, Маркер);
	Сообщить("Порядковый номер объекта в файле:  " + гСчетчикЗагруженныхОбъектов);
	
КонецПроцедуры		// ЗаписатьОшибку()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ЗаписатьОбъект(Объект)
	  
	Если ФормФлРежимОтладки = 0 Тогда
		Объект.Записать();
	Иначе
		Попытка
			Объект.Записать();
		Исключение
			ЗаписатьОшибку("Неудачная попытка записи объекта: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры		//	ЗаписатьОбъект()

//--------------------------------------------------------------------------------------------------

Функция ОтделитьРазделителем(Стр, Разделитель, Режим=0)

	ПраваяЧасть			=	"";
	ПозРазделителя		=	Найти(Стр, Разделитель);
	ДлинаРазделителя	=	СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр			=	СокрЛП(Лев(Стр,	ПозРазделителя - ?(Режим=1, -ДлинаРазделителя+1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции		//	ОтделитьРазделителем()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")
    
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат("") КонецЕсли;
	
	СтрИсточник		=	"";
	ТипИсточника	=	ТипЗначенияСтр(Источник);

	Если		ТипИсточника	= "Число" 			Тогда	СтрИсточник	=	Строка(Источник);
	ИначеЕсли	ТипИсточника	= "Строка" 			Тогда	СтрИсточник	=	СокрЛП(Источник);
	ИначеЕсли 	ТипИсточника	= "Дата" 			Тогда	СтрИсточник	=	Формат(Источник, "ДДДММГГГГ");
	
	ИначеЕсли 	ТипИсточника	= "Перечисление"	Тогда	СтрИсточник	=	Источник.Идентификатор();
		
	ИначеЕсли 	ТипИсточника	= "ПланСчетов" 		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "ВидСубконто"		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "Календарь" 		Тогда	СтрИсточник	=	Источник.Вид();
	ИначеЕсли 	ТипИсточника	= "ВидРасчета" 		Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Счет" 			Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Код"			КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Справочник"		Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Наименование"	КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Документ"		Тогда

		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "НомерДок"		КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
	
	Иначе
		
		ЗаписатьОшибку("Неизвестный тип объекта:   " + ТипИсточника);
		
	КонецЕсли;
	          
	Возврат(СтрИсточник);
	
КонецФункции		//	ПолучитьИдОбъектаИсточника()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьЗначениеМетодом(Источник, Метод)
                                        
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат("") КонецЕсли;
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	    
	Если		Метод = "Значение()"				Тогда
		Возврат		Источник;
	ИначеЕсли	Метод = "Вид()"						Тогда
		Возврат		Источник.Вид();
	ИначеЕсли	Метод = "ПометкаУдаления()"			Тогда
		Возврат		Источник.ПометкаУдаления();
	ИначеЕсли	Метод = "ЗначениеВСтрокуВнутр()"	Тогда
		Возврат		ЗначениеВСтрокуВнутр(Источник);
	ИначеЕсли	Метод = "ЗначениеИзСтрокиВнутр()"	Тогда
		Возврат		ЗначениеИзСтрокиВнутр(Источник);
	КонецЕсли;
	
    Если		ТипИсточника = "Справочник"			Тогда
		      
		Если		Метод = "ТекущийЭлемент()"		Тогда
			Зн	=	Источник.ТекущийЭлемент();
		ИначеЕсли	Метод = "ЭтоГруппа()"			Тогда
			Зн	=	Источник.ЭтоГруппа();
		КонецЕсли;
		                                     
	ИначеЕсли	ТипИсточника = "Документ"			Тогда

		Если		Метод = "ТекущийДокумент()"		Тогда
			Зн	=	Источник.ТекущийДокумент();
		ИначеЕсли	Метод = "Проведен()"			Тогда
			Зн	=	Источник.Проведен();
		ИначеЕсли	Метод = "ПроводкиВключены()"	Тогда
			Зн	=	Источник.Операция.ВключитьПроводки();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Перечисление"		Тогда
		
		Если			Метод = "ТекущееЗначение()"	Тогда
			Зн	=	Источник;
		ИначеЕсли		Метод = "Идентификатор()"	Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли		Метод = "ПорядковыйНомер()"	Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Счет"				Тогда
		
		Если		Метод = "ТекущийСчет()"			Тогда
			Зн	=	Источник.ТекущийСчет();
		ИначеЕсли	Метод = "Родитель()"			Тогда
			Зн	=	Источник.Родитель();
		ИначеЕсли	Метод = "Код"					Тогда
			Зн	=	Источник.Код;
		ИначеЕсли	Метод = "Наименование"			Тогда
			Зн	=	Источник.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(Зн);
	
КонецФункции		//	ПолучитьЗначениеМетодом()

//**************************************************************************************************
//----	Начало функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************

Функция ПривестиКТипу(Зн, Тип)
	
    Если		Тип = "Дата"	Тогда
		Возврат	Дата(Зн);                                  
	ИначеЕсли	Тип = "Число"	Тогда
		Возврат	Число(Зн);
	Иначе
		Возврат	НРег(СокрЛП(Зн));
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ПроверитьУсловие(Знач Условие, Знач Объект)
	
	ИдРеквизита			=	Условие.ПолучитьАтрибут("Реквизит");
	ВидУсловия			=	Условие.ПолучитьАтрибут("ВидУсловия");
	РеквизитОперации	=	Условие.ПолучитьАтрибут("ЭтоРеквизитОперации");
	Если Найти(ИдРеквизита, "()") > 0 Тогда
		Значение		=	ПолучитьЗначениеМетодом(Объект, ИдРеквизита);
	Иначе    
		Если		ПустоеЗначение(ИдРеквизита) = 1			Тогда
			Значение	=	Объект;
		ИначеЕсли	ПустоеЗначение(СокрЛП(Объект)) = 1		Тогда
			Возврат(0);	
		ИначеЕсли	ТипЗначенияСтр(Объект) = "Операция"		Тогда
			Если		ИдРеквизита = "СчетДт" Тогда
				Значение	=	Объект.Дебет.Счет;
			ИначеЕсли	ИдРеквизита = "СчетКт" Тогда
				Значение	=	Объект.Кредит.Счет;
			Иначе
				Значение	=	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		ИначеЕсли	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			Значение		=	Объект.ПолучитьАтрибут(ИдРеквизита);
		Иначе
			Значение		=	Объект.Операция.ПолучитьАтрибут(ИдРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если		ВидУсловия	=	"УдовлетворяетУсловию" Тогда
		
		Возврат	УсловияВыполняются(Условие.ВыбратьУзел("Условия"), Значение);
		
	Иначе
		ТипЗнач		=	ТипЗначенияСтр(Значение);
		
		Зн			=	ПривестиКТипу(ПолучитьИдОбъектаИсточника(Значение), ТипЗнач);
		
		Знач1		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач1"), 	ТипЗнач);
		Знач2		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач2"), 	ТипЗнач);
		
		Если		ВидУсловия	=	"Равно"					Тогда	Возврат ?(	Зн	=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеРавно"				Тогда	Возврат ?(	Зн	<>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 1			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ВключаетПодстроку"		Тогда	Возврат ?(	Найти(Зн, Знач1) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеВключаетПодстроку"	Тогда	Возврат	?(	Найти(Зн, Знач1) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ЯвляетсяПодстрокой"	Тогда	Возврат ?(	Найти(Знач1, Зн) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеЯвляетсяПодстрокой"	Тогда	Возврат	?(	Найти(Знач1, Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Больше"				Тогда	Возврат ?(	Зн	>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"БольшеИлиРавно"		Тогда	Возврат ?(	Зн	>=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Меньше"				Тогда	Возврат ?(	Зн	<	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"МеньшеИлиРавно"		Тогда	Возврат	?(	Зн	<=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалСГраницами"	Тогда	Возврат ?(	(Зн	>=	Знач1) И (Зн <=	Знач2)	, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалБезГраниц"		Тогда	Возврат ?(	(Зн	>	Знач1) И (Зн <	Знач2)	, 1, 0);
		Иначе		ЗаписатьОшибку("Не идентифицирован вид условия:   " + ВидУсловия);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции		//	ПроверитьУсловие()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")
	
	Если ПустоеЗначение(Условия)	= 1				Тогда	Возврат(1)								КонецЕсли;
	Если ПустоеЗначение(ТипУсловия) = 1				Тогда	ТипУсловия = "И"						КонецЕсли;
	
	Если ТипЗначенияСтр(Объект)		= "Справочник"	Тогда	Объект.ИспользоватьДату(ФормДатаКон, 1)	КонецЕсли;
	                                                                     
	ВыборкаУсловий	=	Условия.ВыбратьУзлы("Условие");
	Для СчУсловий = 0 По ВыборкаУсловий.КоличествоУзлов() - 1 Цикл
		Условие		=	ВыборкаУсловий.ПолучитьУзел(СчУсловий);
		Результат	=	ПроверитьУсловие(Условие, Объект);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсл			=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Результат		=	ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсл);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	Если		ТипУсловия = "И"	Тогда	Возврат(1);
	ИначеЕсли	ТипУсловия = "Или"	Тогда	Возврат(0);
	ИначеЕсли	ТипУсловия = "Не"	Тогда	Возврат(0);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция УсловияВыполняются(Знач Условия, Знач Объект)
	
	Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЕстьПроцедура")) = 0 Тогда
		Сообщить("Данная версия обработки не поддерживает механизм скриптов!");
		Возврат(0);
	КонецЕсли;
	
	Если ПроверитьГруппуУсловий(Условия, Объект) = 0 Тогда Возврат(0) КонецЕсли;	//	проверка одиночных условий
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсловия		=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Если ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсловия) = 0 Тогда Возврат(0) КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции

//**************************************************************************************************
//----	Конец функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************


Функция ПрочитатьИнформациюОТипеРеквизита(ТипОбъекта, ВидОбъекта, Реквизит, Тип="", Вид="", Длина="")
	
    Если ПустоеЗначение(Реквизит) = 1 Тогда Возврат("") КонецЕсли;
	
	МД	=	Метаданные;
	
	Если		ТипОбъекта = "Справочник"		Тогда
		
		Если ПустоеЗначение(ВидОбъекта) = 1 Тогда Возврат("") КонецЕсли;
		ОбъектМД			=	МД.Справочник(ВидОбъекта);
		
		Если		Реквизит	= "Код"				Тогда
			Тип				=	?(ОбъектМД.ТипКода="Числовой", "Число", "Строка");
			Длина			=	ОбъектМД.ДлинаКода;
		ИначеЕсли	Реквизит	= "Наименование"	Тогда
			Тип				=	"Строка";
			Длина			=	ОбъектМД.ДлинаНаименования;
		ИначеЕсли	Реквизит	= "Родитель"		Тогда
			Тип				=	"Справочник";
			Вид				=	ВидОбъекта;
		ИначеЕсли	Реквизит	= "Владелец"	Тогда
			Тип				=	"Справочник";
			Вид				=	ОбъектМД.Владелец.Идентификатор;
		Иначе
			РеквМД			=	ОбъектМД.Реквизит(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип				=	РеквМД.Тип;
			Вид				=	РеквМД.Вид;
			Длина			=	РеквМД.Длина;
			//Точность		=	РеквМД.Точность;
			//Периодический	=	РеквМД.Периодический;
			Возврат(РеквМД);
		КонецЕсли;
		
	ИначеЕсли	ТипОбъекта = "Документ"			Тогда
                                           
		Если ПустоеЗначение(ВидОбъекта) = 1 Тогда Возврат("") КонецЕсли;
		ОбъектМД		= МД.Документ(ВидОбъекта);
		
		Если		Реквизит	= "НомерДок"		Тогда
			Тип			=	?(ОбъектМД.ТипНомера="Числовой", "Число", "Строка");
			Длина		=	ОбъектМД.ДлинаНомера;
		ИначеЕсли	Реквизит	= "ДатаДок"			Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ВремяДок"		Тогда
			Тип			=	"Строка";
			Длина		=	8;
		ИначеЕсли	Реквизит	= "НомерСтроки"		Тогда
			Тип			=	"Число";
			Длина		=	3;
			//Точность	=	0;
		Иначе
			РеквМД		= МД.ОбщийРеквизитДокумента(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда	РеквМД = ОбъектМД.РеквизитШапки(Реквизит);
				Если РеквМД.Выбран() = 0 Тогда	РеквМД = ОбъектМД.РеквизитТабличнойЧасти(Реквизит)	КонецЕсли;
			КонецЕсли;
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	РеквМД.Тип;
			Вид			=	РеквМД.Вид;
			Длина		=	РеквМД.Длина;
			//Точность	=	РеквМД.Точность;
			Возврат(РеквМД);
		КонецЕсли;
		
	ИначеЕсли	ТипОбъекта = "Операция"			Тогда
		     
		Если		Реквизит	= "Содержание"				Тогда
			Тип			=	"Строка";
			Длина		=	МД.ДлинаСодержанияОперации;
		ИначеЕсли	Реквизит	= "СуммаОперации"			Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаСуммыОперация;
			//Точность	=	МД.ТочностьСуммыОперации;
		ИначеЕсли	Реквизит	= "ДатаОперации"			Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "Документ"				Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "Сумма"					Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаСуммыПроводки;
			//Точность	=	МД.ТочностьСуммыПроводки;
		ИначеЕсли	Реквизит	= "Количество"				Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаКоличестваПроводки;
			//Точность	=	МД.ТочностьКоличестваПроводки;
		ИначеЕсли	Реквизит	= "ВалСумма"				Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаВалютнойСуммыПроводки;
			//Точность	=	МД.ТочностьВалютнойСуммыПроводки;
		ИначеЕсли	Реквизит	= "Валюта"					Тогда
			Если МД.Валюта.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	"Справочник";
			Вид			=	МД.Валюта.Идентификатор;
		Иначе
			РеквМД 		= МД.РеквизитОперации(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда	РеквМД = МД.РеквизитПроводки(Реквизит)	КонецЕсли;
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	РеквМД.Тип;
			Вид			=	РеквМД.Вид;
			Длина		=	РеквМД.Длина;
			//Точность	=	РеквМД.Точность;
			Возврат(РеквМД);
		КонецЕсли;
	
	ИначеЕсли	ТипОбъекта = "ВидСубконто"		Тогда
		
		РеквМД		=	МД.ВидСубконто(Реквизит);
		Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
		Тип			=	РеквМД.Тип;
		Вид			=	РеквМД.Вид;
		Длина		=	РеквМД.Длина;
		//Точность	=	РеквМД.Точность;
		Возврат(РеквМД);
		
	ИначеЕсли	ТипОбъекта = "ЖурналРасчетов"	Тогда
		                           
		ОбъектМД				=	МД.ЖурналРасчетов(ВидОбъекта);
		
		Если		Реквизит	= "Документ"					Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "РодительскийДокумент"		Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "Объект"						Тогда
			Тип			=	"Справочник";
			Вид			=	ОбъектМД.ОсновнойСправочник.Идентификатор;
		ИначеЕсли	Реквизит	= "ВидРасч"						Тогда
			Тип			=	"ВидРасчета";
		ИначеЕсли	Реквизит	= "ДатаНачала"					Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ДатаОкончания"				Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ПериодДействия"				Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ПериодРегистрации"			Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "Сторно"						Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Рассчитана"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Исправлена"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Фиксирована"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Перерасчет"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "ДокументПервичнойЗаписи"		Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "РегистрацияПервичнойЗаписи"	Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "Результат"					Тогда
			Тип			=	"Число";
			Длина		=	ОбъектМД.ДлинаРезультата;
			//Точность	=	ОбъектМД.ТочностьРезультата;
		ИначеЕсли	Реквизит	= "ПервичнаяЗапись"				Тогда
			
		Иначе
			
			РеквМД	= ОбъектМД.Реквизит(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	РеквМД.Тип;
			Вид			=	РеквМД.Вид;
			Длина		=	РеквМД.Длина;
			//Точность	=	РеквМД.Точность;
			Возврат(РеквМД);
			
		КонецЕсли;
		
	ИначеЕсли	ТипОбъекта = "Константа"		Тогда
		
		РеквМД		=	МД.Константа(Реквизит);
		Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
		Тип			=	РеквМД.Тип;
		Вид			=	РеквМД.Вид;
		Длина		=	РеквМД.Длина;
		//Точность	=	РеквМД.Точность;
		Возврат(РеквМД);
		
	Иначе
		
		Возврат("");
		
	КонецЕсли;    
	
	Возврат("");
	
КонецФункции		//	ПрочитатьИнформациюОТипеРеквизита()


//--------------------------------------------------------------------------------------------------

Функция ВыделитьПрефикс(Знач Стр, ЧисловаяЧасть="")

	Префикс	=	Стр;
	Длина	=	СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		ЧисловаяЧасть	=	Число(Стр);
		
	    Если (ЧисловаяЧасть >= 1) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			Префикс	=	Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			Стр = Прав(Стр, Длина - Сч);
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда	ЧисловаяЧасть = - ЧисловаяЧасть		КонецЕсли;
			
	КонецЦикла;
	                   
	Возврат(Префикс);

КонецФункции		//	ВыделитьПрефикс()

//--------------------------------------------------------------------------------------------------

Функция ПроверкаУникальностиОбъектаСправочника(Справочник, ЕстьКонтроль, ЕстьВладелец, Уникальность, АвтоНумерация)
          
	// проверка на существование других элементов с уникальным кодом
	
	Если ПустоеЗначение(ЕстьКонтроль) = 1 Тогда Возврат(1) КонецЕсли;
	
	Вид			=	Справочник.Вид();
	Конфликт	=	СоздатьОбъект("Справочник." + Вид);
	Если ЕстьВладелец = 1 Тогда Конфликт.ИспользоватьВладельца(Справочник.Владелец) КонецЕсли;
	Если Уникальность = "ВПределахПодчинения" Тогда
		Если Справочник.Родитель.Выбран()=1 Тогда
			Конфликт.ИспользоватьРодителя(Справочник.Родитель);
		КонецЕсли;
		УчитыватьИерархию	=	1;
	Иначе
		УчитыватьИерархию	=	0;
	КонецЕсли;
	Если		Конфликт.НайтиПоКоду(Справочник.Код, УчитыватьИерархию) = 0	Тогда
	ИначеЕсли	Конфликт.ТекущийЭлемент() = Справочник.ТекущийЭлемент()		Тогда
	ИначеЕсли	ПустоеЗначение(АвтоНумерация) = 1							Тогда
		ЗапомнимКонфликт	=	Конфликт.ТекущийЭлемент();
		
		Ошибка = "Код не уникальный - назначен новый код существующему элементу: " + ЗапомнимКонфликт;
		ЗаписатьОшибку(Ошибка, "!");
		
		Конфликт.ПорядокКодов();	//	используем именно этот объект чтобы учесть установленных родителя и владельца
		Конфликт.ОбратныйПорядок(1);
		Конфликт.ВыбратьЭлементы(УчитыватьИерархию);
		Конфликт.ПолучитьЭлемент();
		СчКода				=	"";
		Результат			=	ВыделитьПрефикс(Конфликт.Код, СчКода);
		ДлинаКода			=	Метаданные.Справочник(Вид).ДлинаКода;
		
		//Пока ДлинаКода - СтрДлина(Результат) - СтрДлина(СчКода + 1) > 0 Цикл
		//    Результат		=	Результат + "0";
		//КонецЦикла;
		//НовыйКод			=	Результат + Строка(СчКода + 1);
		
		Пока ДлинаКода - СтрДлина(Результат) - СтрДлина(СчКода + 1) > 0 Цикл
		    СчКода			=	Строка(СчКода) + "0";
		КонецЦикла;
		НовыйКод			=	Результат + Строка(Число(СчКода) + 1);
		
		
		ВспомнимКонфликт	=	СоздатьОбъект("Справочник." + Вид);
		ВспомнимКонфликт.НайтиЭлемент(ЗапомнимКонфликт);
		ВспомнимКонфликт.Код	=	НовыйКод;
		//ВспомнимКонфликт.Записать();
		ЗаписатьОбъект(ВспомнимКонфликт);
	Иначе
		ЗапомнимКонфликт	=	Конфликт.ТекущийЭлемент();
		
		Ошибка = "Код не уникальный - назначен новый код существующему элементу: " + ЗапомнимКонфликт;
		ЗаписатьОшибку(Ошибка, "!");
		
		Конфликт.Новый();	//	используем именно этот объект чтобы учесть установленных родителя и владельца
		Конфликт.УстановитьНовыйКод(ВыделитьПрефикс(Справочник.Код));
		
		ВспомнимКонфликт	=	СоздатьОбъект("Справочник." + Вид);
		ВспомнимКонфликт.НайтиЭлемент(ЗапомнимКонфликт);
		ВспомнимКонфликт.Код	=	Конфликт.Код;
		//ВспомнимКонфликт.Записать();
		ЗаписатьОбъект(ВспомнимКонфликт);
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции		//	ПроверкаУникальностиОбъектаСправочника()

//--------------------------------------------------------------------------------------------------

Функция ПроверкаУникальностиДокумента(Документ, ЕстьКонтроль, Уникальность, АвтоНумерация)
	
	Если ПустоеЗначение(ЕстьКонтроль) = 1 Тогда Возврат(1) КонецЕсли;
	
	Вид			=	Документ.Вид();
	Конфликт	=	СоздатьОбъект("Документ." + Вид);
	Если 		Конфликт.НайтиПоНомеру(Документ.НомерДок, Документ.ДатаДок) = 0 Тогда
	ИначеЕсли	Конфликт.ТекущийДокумент() = Документ.ТекущийДокумент() 		Тогда
	ИначеЕсли	ПустоеЗначение(АвтоНумерация) = 1								Тогда
		Ошибка = "Номер не уникальный - назначен новый номер существующему документу: " + Конфликт;
		//ЗаписатьОшибку(Ошибка);
		
		ЗапомнимКонфликт	=	Конфликт.ТекущийДокумент();
		
		Конфликт.ОбратныйПорядок(1);
		Конфликт.ВыбратьДокументы();
		Конфликт.ПолучитьДокумент();
		
		СчНомера			=	"";
		Результат			=	ВыделитьПрефикс(Конфликт.НомерДок, СчНомера);
		ДлинаНомера			=	Метаданные.Документ(Вид).ДлинаНомера;
		Пока ДлинаНомера - СтрДлина(Результат) - СтрДлина(СчНомера + 1) > 0 Цикл
		    Результат		=	Результат + "0";
		КонецЦикла;
		НовыйНомер			=	Результат + Строка(СчНомера + 1);
		
		ВспомнимКонфликт	=	СоздатьОбъект("Документ." + Вид);
		ВспомнимКонфликт.НайтиДокумент(ЗапомнимКонфликт);
		ВспомнимКонфликт.НомерДок	=	НовыйНомер;
		//ВспомнимКонфликт.Записать();
		ЗаписатьОбъект(ВспомнимКонфликт);
	Иначе
		Ошибка = "Номер не уникальный - назначен новый номер существующему документу: " + Конфликт;
		ЗаписатьОшибку(Ошибка);
		ДокДляПолученияНовогоНомера	=	СоздатьОбъект("Документ." + Вид);
		ДокДляПолученияНовогоНомера.Новый();
		ДокДляПолученияНовогоНомера.ДатаДок	=	Конфликт.ДатаДок;
		ДокДляПолученияНовогоНомера.УстановитьНовыйНомер(ВыделитьПрефикс(Документ.НомерДок));
		
		Конфликт.НомерДок	=	ДокДляПолученияНовогоНомера.НомерДок;
		//Конфликт.Записать();
		ЗаписатьОбъект(Конфликт);
	КонецЕсли;
	
	Возврат(1);

КонецФункции		//	ПроверкаУникальностиДокумента()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ОбъектУжеЗагружен(ТипВид, СтрСсылка, ОбъектИБ)
    
	Перем	НомСтр;
	
	Если ТабЗагруженныхОбъектов.НайтиЗначение(ТипВид, НомСтр, "Вид") = 0	Тогда Возврат(0) КонецЕсли;
	
	ТабОбъектов	=	ТабЗагруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	НомСтр		=	"";
	
	Если ТабОбъектов.НайтиЗначение(СтрСсылка, НомСтр, "Ссылка") = 0		Тогда Возврат(0) КонецЕсли;
	        
	ОбъектИБ	=	ТабОбъектов.ПолучитьЗначение(НомСтр, "Объект");
	
	Возврат(1);
	
КонецФункции		//	ОбъектУжеЗагружен()

//--------------------------------------------------------------------------------------------------

Процедура ЗапомнитьСсылку(Вид, СтрСсылка, ОбъектИБ)

	Перем	НомСтр;
	
	Если ТабЗагруженныхОбъектов.НайтиЗначение(ТипЗначенияСтр(ОбъектИБ) + Вид, НомСтр, "Вид") = 0 Тогда
		ТабЗагруженныхОбъектов.НоваяСтрока();
		ТабЗагруженныхОбъектов.Вид			=	ТипЗначенияСтр(ОбъектИБ) + Вид;
		ТабЗагруженныхОбъектов.ТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		ТабОбъектов							=	ТабЗагруженныхОбъектов.ТабОбъектов;
		ТабОбъектов.НоваяКолонка("Ссылка",	"Строка");
		ТабОбъектов.НоваяКолонка("Объект");
	Иначе
		ТабОбъектов							=	ТабЗагруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	КонецЕсли;
	
	ТабОбъектов.НоваяСтрока();
	ТабОбъектов.Ссылка						=	СтрСсылка;
	ТабОбъектов.Объект						=	ОбъектИБ;
	
КонецПроцедуры		//	ЗапомнитьСсылку()

//--------------------------------------------------------------------------------------------------

Функция ВременныйВладелец(Вид)
    
	СпрВладелец	=	СоздатьОбъект("Справочник." + Вид);
	Если СпрВладелец.НайтиПоНаименованию("###Временный владелец###", 0, 1) = 0 Тогда
		СпрВладелец.Новый();
		СпрВладелец.Наименование	=	"###Временный владелец###";
		ВладелецМД = Метаданные.Справочник(Вид).Владелец;
		Если ВладелецМД.Выбран() = 1 Тогда
			СпрВладелец.Владелец = ВременныйВладелец(ВладелецМД.Идентификатор);
		КонецЕсли;
		СпрВладелец.Записать();
		СпрВладелец.Удалить(0);
		Если ТипЗначенияСтр(гСписокВспомогательныхОбъектов) <> "СписокЗначений" Тогда
			гСписокВспомогательныхОбъектов = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
		гСписокВспомогательныхОбъектов.ДобавитьЗначение(СпрВладелец.ТекущийЭлемент());
	КонецЕсли;
	
	Возврат(СпрВладелец.ТекущийЭлемент());
	
КонецФункции		//	ВременныйВладелец()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция УстановитьСтатус(Статус)
	
	Если ПустоеЗначение(Статус) = 1 Тогда
		Возврат("Авто");
	Иначе
		Возврат(Статус);
	КонецЕсли;

КонецФункции		//	УстановитьСтатус()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция НеУстанавливатьРеквизит(СпособЗагрузкиПоУмолчанию, СпособЗагрузки, Объект, ИдРеквизита, Значение, ЭтоНовыйОбъект)
                                                                         
	Если ПустоеЗначение(СпособЗагрузки) = 1 Тогда	СпособЗагрузки = СпособЗагрузкиПоУмолчанию	КонецЕсли;
	
	Если		СпособЗагрузки  = "ЗамещатьИлиОчищать"											Тогда	//	устанавливаем
	ИначеЕсли	(СпособЗагрузки = "ЗамещатьНеПустыми")	И (ПустоеЗначение(Значение) = 0)		Тогда	//	устанавливаем
	ИначеЕсли	(СпособЗагрузки = "ДляНовых")			И (ПустоеЗначение(ЭтоНовыйОбъект) = 0)	Тогда	//	устанавливаем
	ИначеЕсли	(СпособЗагрузки = "Проверка")			И (ПустоеЗначение(ЭтоНовыйОбъект) = 1)	Тогда	//	сравниваем значения
		Если ТипЗначенияСтр(Объект) = "Периодический" Тогда
			ТекЗнач	=	Объект.ЗначениеНаДату(ИдРеквизита);
			Если ТипЗначенияСтр(ТекЗнач) = "Строка" Тогда ТекЗнач = СокрЛП(ТекЗнач)	КонецЕсли;
			Если ТекЗнач <> Значение Тогда
				ЗаписатьОшибку("Проверка реквизита '"	+	Объект.ТекущийРеквизит() +	"' неудовлетворительна! 
								|Текущее значение: "	+	ТекЗнач		+	"
								|Значение в файле: "	+	Значение	+	"
								|Дата значения: "		+	ИдРеквизита	+	"
								|Объект: "				+	Объект.ТекущийОбъект(),		"!");
			КонецЕсли;
		Иначе
			ТекЗнач		=	Объект.ПолучитьАтрибут(ИдРеквизита);
			Если ТипЗначенияСтр(ТекЗнач) = "Строка" Тогда ТекЗнач = СокрЛП(ТекЗнач)	КонецЕсли;
			Если ТекЗнач <> Значение Тогда
				ЗаписатьОшибку("Проверка реквизита '"	+	ИдРеквизита +	"' неудовлетворительна! 
								|Текущее значение: "	+	ТекЗнач		+	"
								|Значение в файле: "	+	Значение	+	"
								|Объект: "				+	Объект,		"!");
			КонецЕсли;
		КонецЕсли;
		Возврат(1);
	Иначе
		Возврат(1);
	КонецЕсли;
	
	Возврат(0);		//	устанавливать
	
КонецФункции		//	НеУстанавливатьРеквизит()

//--------------------------------------------------------------------------------------------------
                                  
Функция УстановитьСтатусУдаления(Объект, СтатусВПравилах="Авто", СтатусВФайле="НеИзвестен")
	
	Если		СтатусВПравилах = "Авто"			Тогда
		
		Если СтатусВФайле="НеИзвестен"	Тогда
			Возврат(Объект);
		ИначеЕсли ПустоеЗначение(СтатусВФайле) = 1 Тогда
			Если Объект.ПометкаУдаления() = 1 Тогда	Объект.СнятьПометкуУдаления();	КонецЕсли;
		Иначе
			Если Объект.ПометкаУдаления() = 0 Тогда	Объект.Удалить(0);				КонецЕсли;
		КонецЕсли;	                                  
		
	ИначеЕсли	СтатусВПравилах = "Пометить"		Тогда
		
		Если Объект.ПометкаУдаления() = 0 Тогда	Объект.Удалить(0);				КонецЕсли;
		
	ИначеЕсли	СтатусВПравилах = "СнятьПометку"	Тогда
		
		Если Объект.ПометкаУдаления() = 1 Тогда	Объект.СнятьПометкуУдаления();	КонецЕсли;
		
	КонецЕсли;
            
	Возврат(Объект);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция УстановитьСтатусПроводок(Объект, СтатусВПравилах="Авто", ВыключитьПроводки)
	                                          
	Операция = СоздатьОбъект("Операция");
	Операция.НайтиОперацию(Объект.ТекущийДокумент());
	
	Если		СтатусВПравилах = "Авто"			Тогда
		
		Если ПустоеЗначение(ВыключитьПроводки) = 1 Тогда
			Если Операция.ВключитьПроводки() = 0 Тогда	Операция.ВключитьПроводки(1)	КонецЕсли;
		Иначе
			Если Операция.ВключитьПроводки() = 1 Тогда	Операция.ВключитьПроводки(0)	КонецЕсли;
		КонецЕсли;	                                  
		
	ИначеЕсли	СтатусВПравилах = "Включить"		Тогда
		
		Если Операция.ВключитьПроводки() = 0 Тогда	Операция.ВключитьПроводки(1)	КонецЕсли;
		
	ИначеЕсли	СтатусВПравилах = "Выключить"		Тогда
		
		Если Операция.ВключитьПроводки() = 1 Тогда	Операция.ВключитьПроводки(0)	КонецЕсли;
		
	КонецЕсли;
            
	Возврат(Объект);

КонецФункции		//	УстановитьСтатусПроводок()

//--------------------------------------------------------------------------------------------------

Функция ОтменитьПроведение(Объект, СтатусВПравилах="Авто", СтатусВФайле="НеИзвестен")
	
	Если		СтатусВПравилах = "Авто"				Тогда
		
		Если СтатусВФайле="НеИзвестен"	Тогда
			
			Возврат(Объект);
			
		ИначеЕсли ПустоеЗначение(СтатусВФайле) = 0 Тогда
			
			Если Объект.Проведен() = 1 Тогда	Объект.СделатьНеПроведенным();	КонецЕсли;
			
		КонецЕсли;	                                  
		
	ИначеЕсли	СтатусВПравилах = "ОтменитьПроведение"	Тогда
		
		Если Объект.Проведен() = 1 Тогда	Объект.СделатьНеПроведенным();	КонецЕсли;
		
	//ИначеЕсли	СтатусВПравилах = "Провести "	Тогда	//	Проводим потом...
		
	КонецЕсли;
            
	Возврат(Объект);
	
КонецФункции
                                                                                

//**************************************************************************************************
//---------		Начало блока проведения документов и восстановления последовательностей		--------
//**************************************************************************************************


Процедура ТаблицаПоследовательностей()
	
	// колонки таблицы восстанавливаемых последовательностей
	гТаблПослед=СоздатьОбъект("ТаблицаЗначений");
	гТаблПослед.НоваяКолонка("Имя", "Строка");				// идентификатор последовательности
	гТаблПослед.НоваяКолонка("Значение");                    // ссылка на последовательность
	гТаблПослед.НоваяКолонка("УстановитьТА", "Число", 1, 0);	// используются оперативные итоги
	гТаблПослед.НоваяКолонка("РассчитатьБИ", "Число", 1, 0); // используются бухгалтерские итоги
	
	// строки таблицы восстанавливаемых последовательностей
	Для Номер=1 по Метаданные.Последовательность() Цикл
		МетаПослед=Метаданные.Последовательность(Номер);
		
		гТаблПослед.НоваяСтрока();
		гТаблПослед.Имя=МетаПослед.Идентификатор;
		гТаблПослед.Значение=Последовательность.ПолучитьАтрибут(МетаПослед.Идентификатор);
		
		Если МонопольныйРежим()=1 Тогда
			Для Ном=1 По МетаПослед.ВлияющиеДвижения.Количество() Цикл
				Движение=МетаПослед.ВлияющиеДвижения.Получить(Ном).ПолныйИдентификатор();
				
				// регистры влияют на проведение документов последовательности
				// при их перепроведении имеет смысл устанавливать ТА на документ
				// для оптимизации получения документами данных из регистров
				Если Лев(Движение, 7)="Регистр" Тогда
					гТаблПослед.УстановитьТА=1;
				
				// счета влияют на проведение документов последовательности
				// при их перепроведении имеет смысл делать расчет актуальных бух. итогов
				// для оптимизации получения документами бухгалтерских остатков
				ИначеЕсли Лев(Движение, 10)="ПланСчетов" Тогда
					гТаблПослед.РассчитатьБИ=1;
					
				    // проводимые документы могут использовать актуальные бухгалтерские итоги
					Если ТипЗначенияСтр(гСписСчетов)<>"СписокЗначений" Тогда
						гСписСчетов=СоздатьОбъект("СписокЗначений");
						гБухИтоги=СоздатьОбъект("БухгалтерскиеИтоги");
						гБухИтоги.Актуальность(1);
					КонецЕсли;
						
					// актуальные итоги расчитываются для счетов, влияющих на последовательность
					План=Сред(Движение, 12);
					План=ПланыСчетов.ЗначениеПоИдентификатору(Лев(План, Найти(План, ".")-1));
					Счет=СчетПоКоду(МетаПослед.ВлияющиеДвижения.Получить(Ном).КодСчета, План);
					гСписСчетов.Установить(Движение, Счет);
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры		//	ТаблицаПоследовательностей()
                
//--------------------------------------------------------------------------------------------------

Функция ПервыйДокументПослеТАилиГП(НачПозиция, Знач КонПозиция)
	
	Объект		=	СоздатьОбъект("Документ");
	Документ	=	ПолучитьПустоеЗначение("Документ");
	
	// в немонопольном режиме работы, чтобы продвинуть ТА,
	// необходимо перепроводить оперативные документы после ТА
	Объект.УстановитьФильтр(1, 0, 0, 2, 1, 1);
	Если (МонопольныйРежим()=0) и (Метаданные.Регистр()<>0) Тогда
		Граница=СформироватьПозициюДокумента(ПолучитьПозициюТА(), 1);
		Если 1=Объект.ВыбратьДокументы(Граница, КонПозиция) Тогда
			Объект.ПолучитьДокумент();

			Если НачПозиция<=Объект.ПолучитьПозицию() Тогда
				Документ=Объект.ТекущийДокумент();
				КонПозиция=СформироватьПозициюДокумента(Документ, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Объект.УстановитьФильтр(1, 0, 0, 1, 1, 1);
	Для Номер=1 по Метаданные.Последовательность() Цикл
		Имя=Метаданные.Последовательность(Номер).Идентификатор;
		Послед=Последовательность.ПолучитьАтрибут(Имя);

		Граница=СформироватьПозициюДокумента(Послед.ПолучитьДокумент(), 1);
		Если 1=Объект.ВыбратьПоПоследовательности(Граница, КонПозиция, Имя) Тогда 
			Объект.ПолучитьДокумент(); 

			Если НачПозиция<=Объект.ПолучитьПозицию() Тогда
				// запоминаем найденный документ и сужаем интервал поиска
				Документ	=	Объект.ТекущийДокумент();
				КонПозиция	=	СформироватьПозициюДокумента(Документ, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(Документ);
	
КонецФункции		//	ПервыйДокументПослеТАилиГП()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ПровестиДокументУчестьТАиБИ(Документ)
	
	Если МонопольныйРежим()=1 Тогда
        // если оперативный документ находится за ТА, то ТА надо передвинуть в любом случае
		Если Метаданные.Документ(Документ.Вид()).ОперативныйУчет=0 Тогда
		ИначеЕсли 0<Документ.СравнитьТА() Тогда УстановитьТА=1;
		Иначе УстановитьТА=0;
		КонецЕсли;
		РассчитатьБИ=0;

		гТаблПослед.ВыбратьСтроки();
		Пока 1=гТаблПослед.ПолучитьСтроку() Цикл
			Если 1=гТаблПослед.Значение.ПринадлежитПоследовательности(Документ) Тогда
				Если гТаблПослед.УстановитьТА=1 Тогда УстановитьТА=1; 
					Если РассчитатьБИ=1 Тогда Прервать; КонецЕсли;
				КонецЕсли;
				Если гТаблПослед.РассчитатьБИ=1 Тогда РассчитатьБИ=1; 
					Если УстановитьТА=1 Тогда Прервать; КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если УстановитьТА=1 Тогда УстановитьТАНа(Документ); КонецЕсли;
		Если РассчитатьБИ=1 Тогда гБухИтоги.Рассчитать(, Документ, гСписСчетов); КонецЕсли;
	КонецЕсли;
			
	
    Если Документ.Вид() <> "Операция" Тогда
		Объект	=	СоздатьОбъект("Документ");
		Объект.НайтиДокумент(Документ);
		
		
		Если ФормФлРежимОтладки = 0 Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		
		Попытка
			Если Объект.Провести() = 1 Тогда Сообщить("Проведен документ:  " + Документ, " ")	КонецЕсли;
		Исключение
			ЗаписатьОшибку("Неудачная попытка проведения документа -  " + Документ + " - " + ОписаниеОшибки(), "!!");
		КонецПопытки;
		
		
		Если ФормФлРежимОтладки = 0 Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры		//	ПровестиДокументУчестьТАиБИ()

//--------------------------------------------------------------------------------------------------

Процедура ВосстановитьПоследовательности(НачДокумент, КонДокумент)
	
    НачПозиция	=	СформироватьПозициюДокумента(НачДокумент);
	КонПозиция	=	СформироватьПозициюДокумента(КонДокумент);
	Документ	=	ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция);

	Пока ПустоеЗначение(Документ) = 0 Цикл
		ПровестиДокументУчестьТАиБИ(Документ);
		
		НачПозиция	=	СформироватьПозициюДокумента(Документ, 1);
		Документ	=	ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция);
	КонецЦикла;
	
КонецПроцедуры		//	ВосстановитьПоследовательности()

//--------------------------------------------------------------------------------------------------
                                                                                                    

//**************************************************************************************************
//---------		Конец блока проведения документов и восстановления последовательностей		--------
//**************************************************************************************************

                                                                                                    
Процедура УдалитьОбъектыПоУсловиям(ПолныйИд, ДатаНач, ДатаКон, Режим, Условия)
	
	Состояние("Очистка базы данных.  Удаляются объекты вида:  "	+	ПолныйИд);
	
	Если	Найти(ПолныйИд, "Справочник.") > 0	Тогда
		       
		НачатьТранзакцию();
		Объект	=	СоздатьОбъект(ПолныйИд);
		Объект.ВыбратьЭлементы(0);
		Пока Объект.ПолучитьЭлемент() = 1 Цикл
			Если ПустоеЗначение(Условия) = 0 Тогда
				Если УсловияВыполняются(Условия, Объект.ТекущийЭлемент()) = 0	Тогда	Продолжить	КонецЕсли;
			КонецЕсли;
			Объект.Удалить(Режим);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли	Найти(ПолныйИд, "Документ") > 0	Тогда
		                   
		НачатьТранзакцию();
		Объект	=	СоздатьОбъект(ПолныйИд);
		Объект.ВыбратьДокументы(ДатаНач, ДатаКон);
		Пока Объект.ПолучитьДокумент() = 1 Цикл
			Если ПустоеЗначение(Условия) = 0 Тогда
				Если УсловияВыполняются(Условия, Объект.ТекущийДокумент()) = 0	Тогда	Продолжить	КонецЕсли;
			КонецЕсли;
			Объект.Удалить(Режим);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли	ПолныйИд = "Константа"			Тогда
		
		Для Сч = 1 По Метаданные.Константа() Цикл
			Ид = Метаданные.Константа(Сч).Идентификатор;
			Если Метаданные.Константа(Сч).Периодический = 1 Тогда
				История		=	СоздатьОбъект("Периодический");
				История.ИспользоватьОбъект(Ид);
				//	это потому что глючит...
				Если (ПустоеЗначение(ДатаНач) = 1) И (ПустоеЗначение(ДатаКон) = 1) Тогда
					История.ВыбратьЗначения();
				ИначеЕсли	ПустоеЗначение(ДатаНач) = 1	Тогда
					История.ВыбратьЗначения(,ДатаКон);
				ИначеЕсли	ПустоеЗначение(ДатаКон) = 1	Тогда
					История.ВыбратьЗначения(ДатаНач);
				Иначе
					История.ВыбратьЗначения(ДатаНач, ДатаКон);
				КонецЕсли;
		        
				Пока История.ПолучитьЗначение() = 1 Цикл
					Если ПустоеЗначение(Условия) = 0 Тогда
						Если УсловияВыполняются(Условия, История.Значение) = 0	Тогда	Продолжить	КонецЕсли;
					КонецЕсли;
					История.Удалить();
				КонецЦикла;
			Иначе
				Если ПустоеЗначение(Условия) = 0 Тогда
					Если УсловияВыполняются(Условия, Константа.ПолучитьАтрибут(Ид)) = 0	Тогда	Продолжить	КонецЕсли;
				КонецЕсли;
				Константа.УстановитьАтрибут(Ид, ПолучитьПустоеЗначение());
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Процедура ОчиститьБазу(Интерактивно=0)
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Предупреждение("Не загружены правила конвертации!");
		Возврат;
	КонецЕсли;

	ПравилаОчистки	=	гПравила.ВыбратьУзлы("//УдалитьВсеПоУсловиям");
	КоличествоУзлов	=	ПравилаОчистки.КоличествоУзлов();
	
	Если (ПустоеЗначение(КоличествоУзлов) = 1) И (Интерактивно = 1) Тогда
		Предупреждение("Данные правила конвертации не содержат условий очистки базы данных!");
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По КоличествоУзлов - 1 Цикл
		Правило	=	ПравилаОчистки.ПолучитьУзел(Сч);
		
		Тип		=	Правило.ПолучитьАтрибут("Тип");
		Вид		=	Правило.ПолучитьАтрибут("Вид");
		ДатаНач	=	Дата(Правило.ПолучитьАтрибут("С"));
		ДатаКон	=	Дата(Правило.ПолучитьАтрибут("По"));
		Режим	=	1 - Правило.ПолучитьАтрибут("ПометитьНаУдаление");
		Условия	=	Правило.ВыбратьУзел("Условия");
		          
		
		Если ПустоеЗначение(ДатаНач) = 1 Тогда
			ДатаНач	=	ФормДатаНач;
		КонецЕсли;
		Если ПустоеЗначение(ДатаКон) = 1 Тогда
			ДатаКон	=	ФормДатаКон;
		КонецЕсли;
		
		
		Если		ПустоеЗначение(Вид) = 1		Тогда
			                                         
			Если	(ПустоеЗначение(Тип) = 1) Или (Тип = "Справочник")	Тогда
				Для СчСправочников = 1 По Метаданные.Справочник() Цикл
					ПолныйИд	=	Метаданные.Справочник(СчСправочников).ПолныйИдентификатор();
					УдалитьОбъектыПоУсловиям(ПолныйИд, ДатаНач, ДатаКон, Режим, Условия);
				КонецЦикла;
			КонецЕсли;
			                                                                 
			Если	(ПустоеЗначение(Тип) = 1) Или (Тип = "Документ")	Тогда
				УдалитьОбъектыПоУсловиям("Документ", ДатаНач, ДатаКон, Режим, Условия);
			КонецЕсли;
			
			Если	(ПустоеЗначение(Тип) = 1) Или (Тип = "Константа")	Тогда
				УдалитьОбъектыПоУсловиям("Константа", ДатаНач, ДатаКон, Режим, Условия);
			КонецЕсли;
			
		Иначе
			                        
			ПолныйИд	=	Тип + "." + Вид;
			УдалитьОбъектыПоУсловиям(ПолныйИд, ДатаНач, ДатаКон, Режим, Условия);
		
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры		//	ОчиститьБазу()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдентификаторКонфигурации()
	
	Ид	=	СокрЛП(Метаданные.Идентификатор);
	
	Возврат(Ид);

КонецФункции

//--------------------------------------------------------------------------------------------------

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьПравилаКонвертации()
	
	Состояние("Выполняется загрузка правил конвертации...");
	
	гПравила = гФайл.ТекущийЭлементВВидеОбъекта();    
	                             
	ЧислоПодчиненных = гПравила.КоличествоПодчиненных(); 
	Для Сч = 1 По ЧислоПодчиненных Цикл
		Узел = гПравила.ПолучитьПодчиненныйПоНомеру(Сч);
		Если Узел.Наименование = "ПередЗагрузкойДанных" Тогда 
			Если ПустаяСтрока(Узел.Текст)=0 Тогда
			 	мКонвертацияПередЗагрузкойДанных = 1;
			 КонецЕсли;
			 
		ИначеЕсли Узел.Наименование = "ПослеЗагрузкиДанных" Тогда	
			Если ПустаяСтрока(Узел.Текст)=0 Тогда
			 	мКонвертацияПослеЗагрузкиДанных = 1;
			 КонецЕсли;
			 
		ИначеЕсли Узел.Наименование = "ПередЗагрузкойОбъекта" Тогда	
			Если ПустаяСтрока(Узел.Текст)=0 Тогда
			 	мКонвертацияПередЗагрузкойОбъекта = 1;
			 КонецЕсли;
			 
		ИначеЕсли Узел.Наименование = "ПослеЗагрузкиОбъекта" Тогда	
			Если ПустаяСтрока(Узел.Текст)=0 Тогда
			 	мКонвертацияПослеЗагрузкиОбъекта = 1;
			 КонецЕсли;
			 
		ИначеЕсли Узел.Наименование = "ПравилаКонвертацииОбъектов" Тогда	
	    	ВыборкаПравил = Узел.ВыбратьУзлы("Правило");
			Для СчПравил = 0 По ВыборкаПравил.КоличествоУзлов-1 Цикл  
    			Правило = ВыборкаПравил.ПолучитьУзел(СчПравил);
				ТаблицаПравилКонвертации.НоваяСтрока();    
				
				ЧислоПодчиненныхПравило = Правило.КоличествоПодчиненных(); 
				Для СчПравилоУзлы = 1 По ЧислоПодчиненныхПравило Цикл
					УзелПравила  = Правило.ПолучитьПодчиненныйПоНомеру(СчПравилоУзлы);
					Если УзелПравила.Наименование = "Код" Тогда	
						ТаблицаПравилКонвертации.Код = УзелПравила.Текст 	
						
					ИначеЕсли УзелПравила.Наименование = "ПередЗагрузкой" Тогда	
						Если ПустаяСтрока(УзелПравила.Текст)=0 Тогда
							ТаблицаПравилКонвертации.ЕстьОбработчикПередЗагрузкой = 1;	
						КонецЕсли

					ИначеЕсли УзелПравила.Наименование = "ПриЗагрузке" Тогда	
						Если ПустаяСтрока(УзелПравила.Текст)=0 Тогда
							ТаблицаПравилКонвертации.ЕстьОбработчикПриЗагрузке = 1;	
						КонецЕсли                                       
						
					ИначеЕсли УзелПравила.Наименование = "ПослеЗагрузки" Тогда	
						Если ПустаяСтрока(УзелПравила.Текст)=0 Тогда
							ТаблицаПравилКонвертации.ЕстьОбработчикПослеЗагрузки = 1;	
						КонецЕсли
						
					КонецЕсли;
					
				КонецЦикла
			
			КонецЦикла;
			
		ИначеЕсли Узел.Наименование = "Параметры" Тогда	  
			Параметры = СоздатьОбъект("ТаблицаЗначений");
	    	ВыборкаПараметров = Узел.ВыбратьУзлы("Параметр");
			        
			Для СчПараметров = 0 По ВыборкаПараметров.КоличествоУзлов-1 Цикл  
    			Параметр = ВыборкаПараметров.ПолучитьУзел(СчПараметров);
				ВыборкаДляИмени = Параметр.ВыбратьУзлы("@Имя");        
				Для СчДоп = 0 По ВыборкаДляИмени.КоличествоУзлов-1 Цикл 
					УзелИмени = ВыборкаДляИмени.ПолучитьУзел(СчДоп);
					Параметры.НоваяКолонка(СокрЛП(УзелИмени.Значение));
					Прервать;
				КонецЦикла;
				
			КонецЦикла;      
		КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьИсходныеДанные(Этап="")
	
	Если Найти("Начало", Этап) > 0 Тогда
		Если	ПустоеЗначение(ФормИмяФайлаДанных)			=	1	Тогда	Предупреждение("Не выбран файл данных!");
			Возврат(0);
		КонецЕсли;
		Если	ФС.СуществуетФайл(ФормИмяФайлаДанных)		=	0	Тогда	Предупреждение("Указанный файл данных не существует!");
			Возврат(0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции


//**************************************************************************************************
//****		Формат2 Начало		********************************************************************
//**************************************************************************************************


Функция ДатаИзXML(Стр, СтрВремя="")

	СтрГод   = Стр;
    СтрВремя = ОтделитьРазделителем(СтрГод, "T");
	СтрМесяц = ОтделитьРазделителем(СтрГод, "-");
	СтрДень  = ОтделитьРазделителем(СтрМесяц, "-");

	Возврат Дата(СтрДень + "." + СтрМесяц + "." + СтрГод);
	
КонецФункции

//--------------------------------------------------------------------------------------------------
 
Функция ОпределитьСтроковыйТип(СтроковоеИмяТипа)
	
	Если Найти(СтроковоеИмяТипа, "ПланСчетовСсылка") > 0 Тогда
					    
		ТипЗнач = СтрЗаменить(СтроковоеИмяТипа, "ПланСчетовСсылка", "Счет");
		
	Иначе	
	
		ТипЗнач = СтрЗаменить(СтроковоеИмяТипа, "Ссылка", "");
		
	КонецЕсли;	
	
	Возврат ТипЗнач;

КонецФункции


Функция УстановитьРеквизитV8(Реквизит, ТипОбъекта, ВидОбъекта, РеквизитОбъекта)
                                                                            
	Если ПустоеЗначение(Реквизит)			= 1 Тогда	Возврат("")	КонецЕсли;
	Если ПустоеЗначение(РеквизитОбъекта)	= 1	Тогда	Возврат("")	КонецЕсли; 

	УзелРеквизита = Реквизит.ВыбратьУзел("*");
	Если ПустоеЗначение(УзелРеквизита) = 1 Тогда
		Сообщить("Пустой узел реквизита!");
		Возврат("");
	КонецЕсли;

	Тип     = ОпределитьСтроковыйТип(Реквизит.ПолучитьАтрибут("Тип"));
	
	ИмяУзла = УзелРеквизита.ИмяТэга;
	

	Если ИмяУзла = "Значение" Тогда
		СтрЗначение = УзелРеквизита.Значение;
	ИначеЕсли ИмяУзла = "Пусто" Тогда
		Если Тип <> "Булево" Тогда
			Возврат ПолучитьПустоеЗначение(Тип);
		Иначе
			Возврат 0;
		КонецЕсли; 
	ИначеЕсли ИмяУзла = "Ссылка" Тогда
		
	ИначеЕсли ИмяУзла = "Выражение" Тогда
		Сообщить("Недопустимый способ указания значения - " + ИмяУзла);
		Возврат("");
	ИначеЕсли ИмяУзла = "Нпп" Тогда
		Сообщить("Недопустимый способ указания значения - " + ИмяУзла);
		Возврат("");
	Иначе
		Сообщить("Неизвестный способ указания значения - " + ИмяУзла);
		Возврат("");
	КонецЕсли;
	                 
	
	Значение = "";
	
	
	Если		Тип = "Строка"			Тогда
		
		Значение	=	СокрП(СтрЗначение);
		//Если Длина = 0 Тогда
		//	Значение	=	СтрЗаменить(Значение, "#рс#", РазделительСтрок);
		//	Значение	=	СтрЗаменить(Значение, "#ст#", СимволТабуляции);
		//КонецЕсли;
	
	ИначеЕсли	Тип = "Число"			Тогда 
		
		Значение	=	СтрЗначение;
		Если (РеквизитОбъекта = "Код") И (Значение="0") Тогда
		Иначе
			Значение	=	Число(Значение);
		КонецЕсли;
    
		
	ИначеЕсли	Тип = "Дата"			Тогда
		
		Значение	=	ДатаИзXML(СтрЗначение);

	ИначеЕсли	Тип = "Булево"			Тогда

		Если СтрЗначение = "true" Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		
		Вид = ОтделитьРазделителем(Тип, ".");
		
		
		Если	Тип = "Справочник" Тогда
			
			ЭтоГруппа = 0;
			
			УзелЭтоГруппа = УзелРеквизита.ВыбратьУзел("Свойство[@Имя=""ЭтоГруппа""]");
			Если ПустоеЗначение(УзелЭтоГруппа) = 0 Тогда
				ЭтоГруппа = УстановитьРеквизитV8(УзелЭтоГруппа, "Справочник", Вид, "ЭтоГруппа");
				УзелРеквизита.УдалитьПодчиненный(УзелЭтоГруппа);
			КонецЕсли;
			
			
			СозданНовыйОбъект	=	0;
			Значение			=	УстановитьСправочникПоСсылкеV8(УзелРеквизита, Вид, СозданНовыйОбъект, , , ЭтоГруппа);
			Если		Значение = "Ошибка"						Тогда
				Значение	=	ПолучитьПустоеЗначение(Тип + ?(Вид="", "", "." + Вид));
			ИначеЕсли	ПустоеЗначение(СозданНовыйОбъект) = 0	Тогда
				//гСписокОбъектовСозданныхПоСсылкам.Установить(ЗначениеВСтрокуВнутр(Значение), 1);
				ОбъектЗначения	=	СоздатьОбъект(Тип + "." + Вид);
				ОбъектЗначения.НайтиЭлемент(Значение);
				ОбъектЗначения.Удалить(0);			//	объект еще не загружен толком
			ИначеЕсли	Значение = "#НеУстановлен" Тогда
				Возврат("#НеУстановлен");
			КонецЕсли;
			
		ИначеЕсли	(Тип = "ПланСчетов")
					ИЛИ (Тип = "Счет") Тогда
			
			Значение	=	СокрЛП(СтрЗначение);
			ПланСчетов = ?(ПустоеЗначение(Вид)=1, ОсновнойПланСчетов(), ПланыСчетов.ЗначениеПоИдентификатору(Вид));
			Если ПустоеЗначение(ПланСчетов)=1 Тогда
				ЗаписатьОшибку("Неверный вид счета " + Вид);
				Возврат("");
			КонецЕсли;
			Если ПустоеЗначение(Значение) = 1 Тогда Возврат("") КонецЕсли;
			Счет		=	СоздатьОбъект("Счет"); 
			Счет.ИспользоватьПланСчетов(ПланСчетов);
			Счет.НайтиПоКоду(Значение);
			Значение	=	Счет.ТекущийСчет();
		
		ИначеЕсли	Тип = "Перечисление"	Тогда
			
			Значение	=	СокрЛП(СтрЗначение);
			ОбъектМД	=	Метаданные.Перечисление(Вид);
			Если ОбъектМД.Выбран()=0 Тогда
				ЗаписатьОшибку("Неверный вид перечисления - " + Вид);
				Возврат("");
			КонецЕсли;
			
			Если ПустоеЗначение(Значение) = 1 Тогда Возврат("") КонецЕсли;
			
			ВидПеречисления	=	Перечисление.ПолучитьАтрибут(Вид);
			СтрЗначение		=	Значение;
			
			// поиск по идентификатору
			Значение		=	ВидПеречисления.ЗначениеПоИдентификатору(СтрЗначение);
			
			Если ПустоеЗначение(Значение) = 0 Тогда Возврат(Значение) КонецЕсли;
	
			// поиск по синониму
			Для СчЗнач = 1 По ОбъектМД.Значение() Цикл
				ЗначениеМД	=	ОбъектМД.Значение(СчЗнач);
				Если СтрЗначение = ЗначениеМД.Представление() Тогда
					Возврат	ВидПеречисления.ЗначениеПоИдентификатору(ЗначениеМД.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			
			Если Число(СтрЗначение) = 0 Тогда
				ЗаписатьОшибку("Неверное значение перечисления " + Вид + "." + СтрЗначение);
				Возврат("");
			КонецЕсли;
			
			// поиск по порядковому номеру
			Значение		=	ВидПеречисления.ЗначениеПоНомеру(СтрЗначение);
		
		ИначеЕсли	Тип = "Документ"		Тогда
			                    
			СозданНовыйОбъект	=	0;
			Значение			=	УстановитьДокументПоСсылкеV8(УзелРеквизита, Вид, СозданНовыйОбъект);
			Если		Значение = "Ошибка"						Тогда
				Значение	=	ПолучитьПустоеЗначение(Тип + ?(Вид="", "", "." + Вид));
			ИначеЕсли	ПустоеЗначение(СозданНовыйОбъект) = 0	Тогда
				//гСписокОбъектовСозданныхПоСсылкам.Установить(ЗначениеВСтрокуВнутр(Значение), 1);
				ОбъектЗначения	=	СоздатьОбъект(Тип + "." + Вид);
				ОбъектЗначения.НайтиДокумент(Значение);
				ОбъектЗначения.Удалить(0);			//	объект еще не загружен толком
			ИначеЕсли	Значение = "#НеУстановлен" Тогда
				Возврат("#НеУстановлен");
			КонецЕсли;
	
		//ИначеЕсли	Тип = "ПланСчетов"		Тогда
		//	
		//	Значение	=	СокрЛП(СтрЗначение);
		//	Значение	=	ПланыСчетов.ЗначениеПоИдентификатору(Значение);
		//
		//ИначеЕсли	Тип = "ВидСубконто"		Тогда
		//	
		//	Значение	=	СокрЛП(СтрЗначение);
		//	Значение	=	ВидыСубконто.ЗначениеПоИдентификатору(Значение);
		//
		//ИначеЕсли	Тип = "Календарь"		Тогда
		//	
		//	Значение	=	СокрЛП(СтрЗначение);
		//	Если Метаданные.Календарь(Значение).Выбран()=0 Тогда
		//		ЗаписатьОшибку("Неверный календарь " + Значение);
		//		ЗаписатьОшибку("Объект: " + ТипОбъекта + "." + ВидОбъекта + "." + РеквизитОбъекта);
		//		Возврат("");
		//	КонецЕсли;
		//	Значение	=	Календари.ПолучитьАтрибут(Значение);
		
		ИначеЕсли	Тип = "ВидРасчета"	Тогда
			
			Значение	=	СокрЛП(СтрЗначение);
			Если Метаданные.ВидРасчета(Значение).Выбран()=0 Тогда
				ЗаписатьОшибку("Неверный вид расчета " + Значение);
				Возврат("");
			КонецЕсли;
			Значение	=	ВидРасчета.ПолучитьАтрибут(Значение);
		
		ИначеЕсли	ПустоеЗначение(Тип) = 0	Тогда
			
			ЗаписатьОшибку("Неверный тип реквизита:  " + ТипОбъекта + "." + ВидОбъекта + "." + РеквизитОбъекта + " - " + Тип);
	
		КонецЕсли;
	КонецЕсли;
	
	Возврат(Значение);
	
КонецФункции		//	УстановитьРеквизитV8()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция СравнитьРеквизитыСправочникаV8(Справочник, РеквизитыПоиска)
	           
	Вид	=	Справочник.Вид();
	
	Для Сч = 0 По РеквизитыПоиска.КоличествоУзлов() - 1 Цикл
		
		Реквизит					=	РеквизитыПоиска.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Имя");
		
		//ТипРеквизита				=	"";
		//ПрочитатьИнформациюОТипеРеквизита("Справочник", Вид, ИдРеквизита, ТипРеквизита);
		//Если		ПустоеЗначение(ТипРеквизита) = 1 Тогда
		//	ПредставлениеРеквизита		=	"Справочник." + Вид + "." + ИдРеквизита;
		//	ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);
		//	Продолжить;
		//КонецЕсли;
		
		Значение					=	УстановитьРеквизитV8(Реквизит, "Справочник", Вид, ИдРеквизита);
		СуществующееЗначение		=	Справочник.ПолучитьАтрибут(ИдРеквизита);
		
		Если (ТипЗначенияСтр(СуществующееЗначение) = "Строка") Или (ПустоеЗначение(СуществующееЗначение) = 1) Тогда
			СуществующееЗначение	=	СокрЛП(СуществующееЗначение);
			Значение				=	СокрЛП(Значение);
		КонецЕсли;
		
		Если СуществующееЗначение <> Значение Тогда Возврат(0) КонецЕсли;
		
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции		//	СравнитьРеквизитыСправочникаV8()
                
//--------------------------------------------------------------------------------------------------

Функция СравнитьРеквизитыДокументаV8(Документ, РеквизитыПоиска)
                                           
	Вид	=	Документ.Вид();
	
	Для Сч = 0 По РеквизитыПоиска.КоличествоУзлов() - 1 Цикл
		
		Реквизит					=	РеквизитыПоиска.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Имя");

		//Если ИдРеквизита <> "ВремяДок" Тогда
			СуществующееЗначение	=	Документ.ПолучитьАтрибут(ИдРеквизита);
		//Иначе
		//	СуществующееЗначение	=	Документ.ПолучитьВремя();
		//КонецЕсли;

		//--------------------------------------------------------------------------------------------------

		
		//РеквизитОперации			=	Реквизит.ПолучитьАтрибут("ЭтоРеквизитОперации");
		//
		//Если ПустоеЗначение(РеквизитОперации) = 1 Тогда
		//	ТипОбъектаРеквизита		=	"Документ";
		//	ВидОбъектаРеквизита		=	Вид;
		//	Если ИдРеквизита <> "ВремяДок" Тогда
		//		СуществующееЗначение	=	Документ.ПолучитьАтрибут(ИдРеквизита);
		//	Иначе
		//		СуществующееЗначение	=	Документ.ПолучитьВремя();
		//	КонецЕсли;
		//Иначе
		//	Если Документ.СуществуетОперация() = 0 Тогда
		//		ЗаписатьОшибку("У документа вида - " + Вид + " - не существует операции!", "!!");
		//		Возврат(0);
		//	КонецЕсли;
		//	ТипОбъектаРеквизита		=	"Операция";
		//	ВидОбъектаРеквизита		=	"";
		//	СуществующееЗначение	=	Документ.Операция.ПолучитьАтрибут(ИдРеквизита);
		//КонецЕсли;
		
		//ТипРеквизита				=	"";
		//ПрочитатьИнформациюОТипеРеквизита(ТипОбъектаРеквизита, ВидОбъектаРеквизита, ИдРеквизита, ТипРеквизита);
		//Если		ПустоеЗначение(ТипРеквизита) = 1 Тогда
		//	ПредставлениеРеквизита		=	ТипОбъектаРеквизита + "." + ВидОбъектаРеквизита + "." + ИдРеквизита;
		//	ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);
		//	Продолжить;
		//КонецЕсли;

		Значение = УстановитьРеквизитV8(Реквизит, "Документ", Вид, ИдРеквизита);
		
		Если (ТипЗначенияСтр(СуществующееЗначение) = "Строка") Или (ПустоеЗначение(СуществующееЗначение) = 1) Тогда
			СуществующееЗначение	=	СокрЛП(СуществующееЗначение);
			Значение				=	СокрЛП(Значение);
		КонецЕсли;
		
		Если СуществующееЗначение <> Значение Тогда Возврат(0) КонецЕсли;
		
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции		//	СравнитьРеквизитыДокумента()

//--------------------------------------------------------------------------------------------------
 
Функция УстановитьСправочникПоСсылкеV8(Ссылка, Вид, СозданНовыйОбъект=0, НовыеНеСоздавать=0, ОбъектМД="", ЭтоГруппа, Объект="")
    
	Перем	Элемент;

	
	ОбъектМД = Метаданные.Справочник(Вид);

	
	//Ссылка	=	Объект.ВыбратьУзел("Ссылка");
	//Если ПустоеЗначение(Ссылка) = 1 Тогда
	//	ОбъектМД	=	Метаданные.Справочник(Вид);
	//	Если Объект.ИмяТэга = "Ссылка" Тогда
	//		Ссылка	=	Объект;
	//	Иначе
	//		Возврат("");
	//	КонецЕсли;
	//КонецЕсли;
	
	//Если ПустоеЗначение(Вид) = 1 Тогда Вид = Ссылка.ПолучитьАтрибут("Вид")	КонецЕсли;
	
	
	Если ОбъектМД.Выбран()	= 0 Тогда
		ЗаписатьОшибку("Неверный вид справочника " + Вид);
		Возврат("Ошибка");
	КонецЕсли;
      
	
	Если ПустоеЗначение(Объект) = 1 Тогда
		Объект = Ссылка;
	КонецЕсли;
	

	Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда
		Если ОбъектУжеЗагружен("Справочник" + Вид, Ссылка.ПредставлениеXML, Элемент) = 1 Тогда Возврат(Элемент) КонецЕсли;
		//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Свойство[@Имя!=""СистемноеПредставление()""]");
		РеквизитыПоиска			=	Ссылка.ВыбратьУзлы("Свойство");
		КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();
	Иначе
		//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Свойство[@Имя!=""СистемноеПредставление()""]");
		РеквизитыПоиска			=	Ссылка.ВыбратьУзлы("Свойство");
		КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();
		Если КолвоРеквизитовПоиска = 0 Тогда	//	используется внутренняя ссылка
			Если ОбъектУжеЗагружен("Справочник" + Вид, Ссылка.ПредставлениеXML, Элемент) = 1 Тогда Возврат(Элемент) КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//	Эта возможность временно отключена...
	//СистПр	=	Ссылка.ВыбратьУзел("Свойство[@Имя=""СистемноеПредставление()""]");
	//Если ПустоеЗначение(СистПр) = 0 Тогда
	//	Возврат	ЗначениеИзСтрокиВнутр(СистПр.ПолучитьАтрибут("Значение"));
	//КонецЕсли;
	
	
	Справочник 				=	СоздатьОбъект("Справочник." + Вид);
	
	ЕстьВладелец			=	ОбъектМД.Владелец.Выбран();
	ЕстьРодитель			=	?(ОбъектМД.КоличествоУровней > 1, 1, 0);
	
	ДлинаКода				=	ОбъектМД.ДлинаКода;
	ДлинаНаименования		=	ОбъектМД.ДлинаНаименования;
	
	Уникальность			=	ОбъектМД.СерииКодов;
	ЕстьКонтроль			=	ОбъектМД.КонтрольУникальности;
	АвтоНумерация			=	ОбъектМД.АвтоНумерация - 1;
	ТипКода					=	ОбъектМД.ТипКода;
	
	ИспользоватьВладельца	=	0;
	ИспользоватьРодителя	=	0;
	УчитыватьИерархию		=	0;
	
	
	Код="";	Наименование=""; Родитель=""; Владелец="";
	                          
	
	Если КолвоРеквизитовПоиска > 0 Тогда
		
		Если	ПустоеЗначение(ДлинаКода)			= 0		Тогда
			Код					=	УстановитьРеквизитV8(Ссылка.ВыбратьУзел("Свойство[@Имя=""Код""]"),			"Справочник", Вид, "Код");
		КонецЕсли;
		Если	ПустоеЗначение(ДлинаНаименования)	= 0		Тогда
			Наименование		=	УстановитьРеквизитV8(Ссылка.ВыбратьУзел("Свойство[@Имя=""Наименование""]"),	"Справочник", Вид, "Наименование");
		КонецЕсли;
		Если	ПустоеЗначение(ЕстьРодитель)		= 0		Тогда
			Родитель			=	УстановитьРеквизитV8(Ссылка.ВыбратьУзел("Свойство[@Имя=""Родитель""]"), 	"Справочник", Вид, "Родитель");
		КонецЕсли;
		Если	ПустоеЗначение(ЕстьВладелец)		= 0		Тогда
			Владелец			=	УстановитьРеквизитV8(Ссылка.ВыбратьУзел("Свойство[@Имя=""Владелец""]"),		"Справочник", Вид, "Владелец");
		КонецЕсли;
	    
	
		//	ИспользоватьВладельца	для поиска
		
		Если		ПустоеЗначение(Владелец)		= 0	Тогда
			ИспользоватьВладельца	=	1;
			Справочник.ИспользоватьВладельца(Владелец);
		ИначеЕсли	(Уникальность	= "ВПределахПодчинения") И (ЕстьКонтроль = 1) И (ЕстьВладелец = 1)	Тогда
			//	Попробуем отработать эту ситуацию при создании нового элемента / группы
			
			//ЗаписатьОшибку("Не установлена синхронизация по владельцу подчиненного справочника - " + Вид + "
			//				|	Правило:  " + гПравилоТекущегоОбъекта + "
			//				|	Узел ссылки:  " + Ссылка.ПредставлениеXML, "!!");
			//Возврат("Ошибка");
		КонецЕсли;
	    
		//	ИспользоватьРодителя	для поиска
		
		Если		ПустоеЗначение(Родитель) =	0	Тогда
			ИспользоватьРодителя	=	1;
			Справочник.ИспользоватьРодителя(Родитель);
		ИначеЕсли	(Уникальность	= "ВПределахПодчинения") И (ЕстьКонтроль = 1) И (ЕстьРодитель = 1)	Тогда
			ИспользоватьРодителя	=	1;
			Справочник.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник." + Вид));
		КонецЕсли;
		
	КонецЕсли;
	
	
	Справочник.ИспользоватьДату(РабочаяДата(), 1);	//	хотя вообще-то искать по периодическим реквизитам - плохая затея...
	
	
	УчитыватьИерархию	=	?(ИспользоватьРодителя + ИспользоватьВладельца > 0,	1,	0);
	
	                                                 
	
	
	//--------		Поиск		-------------------------------
	
	
	ПолныйПеребор	=	0;
	                            
	
	Если		КолвоРеквизитовПоиска = 0 Тогда
		
			//	Поиск не производим!
		
	ИначеЕсли	(ПустоеЗначение(Код)			= 0)	И	(КолвоРеквизитовПоиска = 1)	Тогда
	    
		Если Справочник.НайтиПоКоду(Код, 0) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа			Тогда	//	создаем новый
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;

	ИначеЕсли	(ПустоеЗначение(Наименование)	= 0)	И	(КолвоРеквизитовПоиска = 1)	Тогда

		Если		Справочник.НайтиПоНаименованию(Наименование, 0, 1) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа Тогда	//	создаем новый
		
			Справочник.ВыбратьЭлементы();
			Пока Справочник.ПолучитьЭлемент() = 1 Цикл
			
			   Если Справочник.Наименование <> Наименование Тогда
			   		Продолжить;
			   КонецЕсли;
			   
			   Если Справочник.ЭтоГруппа() <> ЭтоГруппа Тогда
			   		Продолжить;
			   КонецЕсли;
			   
			   Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда 
			   		ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); 
			   КонецЕсли;
			   	
			   Возврат Справочник.ТекущийЭлемент(); 
			   			   
			КонецЦикла;		
		
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;

	ИначеЕсли	(ПустоеЗначение(Код)			= 0)	И	(1 + ИспользоватьРодителя + ИспользоватьВладельца = КолвоРеквизитовПоиска)	Тогда
	
		Если		Справочник.НайтиПоКоду(Код, 1) = 0					Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа					Тогда	//	создаем новый
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
	
	ИначеЕсли	(ПустоеЗначение(Наименование)	= 0)	И	(1 + ИспользоватьРодителя + ИспользоватьВладельца = КолвоРеквизитовПоиска)	Тогда
	
		Если		Справочник.НайтиПоНаименованию(Наименование, 1, 1) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	//	создаем новый
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
	
	ИначеЕсли	(ЕстьКонтроль			=	1)	И
				(ПустоеЗначение(Код)	=	0)	И
	     		((Уникальность = "ВесьСправочник")	Или	(УчитыватьИерархию=1))	Тогда
		 	
		Если		Справочник.НайтиПоКоду(Код, УчитыватьИерархию)				= 0 		Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	//	создаем новый
		ИначеЕсли	СравнитьРеквизитыСправочникаV8(Справочник, РеквизитыПоиска)	= 0			Тогда	//	создаем новый
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
    
	ИначеЕсли	(1 + ИспользоватьРодителя + ИспользоватьВладельца = КолвоРеквизитовПоиска)	Тогда
	            
		РеквизитПоиска	=	Ссылка.ВыбратьУзел("Свойство[(@Имя!=""Владелец"")and(@Имя!=""Родитель"")]");
		     
		Если ПустоеЗначение(РеквизитПоиска) = 1 Тогда ПолныйПеребор = 1 КонецЕсли;
			
		Если ПолныйПеребор = 0 Тогда
			ИдРеквизита		=	РеквизитПоиска.ПолучитьАтрибут("Имя");
			РеквМД			=	ОбъектМД.Реквизит(ИдРеквизита);
			Сортировка		=	0;
			Если РеквМД.Выбран() = 1 Тогда	Сортировка = РеквМД.Сортировка	КонецЕсли;
			Если Сортировка = 1 Тогда
				Значение	=	УстановитьРеквизитV8(РеквизитПоиска, "Справочник", Вид, ИдРеквизита);
				Если		Справочник.НайтиПоРеквизиту(ИдРеквизита, Значение, 1-УчитыватьИерархию)	= 0	Тогда	//	создаем новый
				ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа											Тогда	//	создаем новый
				//ИначеЕсли	СравнитьРеквизитыСправочникаV8(Справочник, РеквизитыПоиска)	= 0				Тогда	//	создаем новый
				Иначе
					Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
					Возврат	Справочник.ТекущийЭлемент();
				КонецЕсли;
			Иначе
				ПолныйПеребор = 1;
			КонецЕсли;
		КонецЕсли;
		       
	ИначеЕсли	(ПустоеЗначение(Код)			= 0)	Тогда
	
		Если		Справочник.НайтиПоКоду(Код, УчитыватьИерархию)				= 0 		Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	ПолныйПеребор = 1;
		ИначеЕсли	СравнитьРеквизитыСправочникаV8(Справочник, РеквизитыПоиска)	= 0			Тогда	ПолныйПеребор = 1;
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
		            
	ИначеЕсли	(ПустоеЗначение(Наименование)	= 0)	Тогда
	
		Если		Справочник.НайтиПоНаименованию(Наименование, УчитыватьИерархию, 1) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	ПолныйПеребор = 1;
		ИначеЕсли	СравнитьРеквизитыСправочникаV8(Справочник, РеквизитыПоиска)	= 0			Тогда	ПолныйПеребор = 1;
		Иначе
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
		
	ИначеЕсли КолвоРеквизитовПоиска > 0	Тогда
		                          
		ПолныйПеребор = 1;
		
	КонецЕсли;
	
	          
	//------	Поиск полным перебором элементов	--------------
	
	
	Если ПолныйПеребор = 1 Тогда
		Справочник.ВыбратьЭлементы(УчитыватьИерархию);
		Пока Справочник.ПолучитьЭлемент(1-УчитыватьИерархию) = 1 Цикл
			Если 	Справочник.ЭтоГруппа() <> ЭтоГруппа 									Тогда	Продолжить	КонецЕсли;
			Если	СравнитьРеквизитыСправочникаV8(Справочник, РеквизитыПоиска)	= 0			Тогда	Продолжить	КонецЕсли;
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЦикла;
	КонецЕсли;
	
	   
	//------------------------------------------------------------
	
	
	Если ПустоеЗначение(НовыеНеСоздавать) = 0 Тогда
		ЗаписатьОшибку("Объект не найден и не создан: Справочник." + Вид + РазделительСтрок + Ссылка.ПредставлениеXML, "!");
		Возврат("#НеУстановлен");
	КонецЕсли;


	
	//------	Создаем новый объект	--------------------------
	
	// Владелец

	Если   ПустоеЗначение(Владелец) = 0 Тогда
			
		Справочник.ИспользоватьВладельца(Владелец);
		
	ИначеЕсли ЕстьВладелец = 1 Тогда
		// возможно по владельцу просто не синхронизируем
		Владелец = УстановитьРеквизитV8(Объект.ВыбратьУзел("Свойство[@Имя=""Владелец""]"), "Справочник", Вид, "Владелец");
		
		Если ПустоеЗначение(Владелец) = 0 Тогда
			
			Справочник.ИспользоватьВладельца(Владелец);
		
		Иначе	
		
			Справочник.ИспользоватьВладельца( ВременныйВладелец(ОбъектМД.Владелец.Идентификатор) );
		
		КонецЕсли;
	
	КонецЕсли;

	// Родитель

	Если ПустоеЗначение(Родитель)  = 0 Тогда
		Справочник.ИспользоватьРодителя(Родитель);
	КонецЕсли;

	Попытка
		 
		Если ЭтоГруппа = 1 Тогда
			Справочник.НоваяГруппа();
		Иначе
			Справочник.Новый();
		КонецЕсли;
		 
	Исключение
		
		Сообщить("Ошибка создания нового элемента (группы) справочника [Вид: " + Вид + ", Код: " + Код + "]");
		
	КонецПопытки;
	
	СозданНовыйОбъект = 1;
	
	//	Наименование
	
			Если ПустоеЗначение(Наименование)	=	0	Тогда
				Справочник.Наименование	=	Наименование;
			КонецЕсли;
	
	//	Код
	
			Если		ПустоеЗначение(Код)			=	0	Тогда
				Справочник.Код	=	Код;
			ИначеЕсли	ПустоеЗначение(ДлинаКода)	=	0	Тогда
				//	возможно по коду просто не синхронизируем
				Код	=	УстановитьРеквизитV8(Объект.ВыбратьУзел("Свойство[@Имя=""Код""]"), "Справочник", Вид, "Код");
				Если	ПустоеЗначение(Код) = 0 Тогда
					Справочник.Код	=	Код;
				Иначе
					Справочник.УстановитьНовыйКод();
				КонецЕсли;
			КонецЕсли;
			
	НеИспользуется		=	?(ЭтоГруппа=1, "ДляЭлемента", "ДляГруппы");

	
	Для Сч = 0 По РеквизитыПоиска.КоличествоУзлов() - 1 Цикл
		
		Реквизит					=	РеквизитыПоиска.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Имя");
		             
		Если Найти("Код,Наименование,Родитель,Владелец", ИдРеквизита) > 0 Тогда Продолжить КонецЕсли;
		
		Значение					=	УстановитьРеквизитV8(Реквизит, "Справочник", Вид, ИдРеквизита);
		РеквМД						=	ОбъектМД.Реквизит(ИдРеквизита);
		ПредставлениеРеквизита		=	" (Справочник." + Вид + "." + ИдРеквизита + ")";
		Если РеквМД.Выбран()		=	0				Тогда	ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);					Продолжить;	КонецЕсли;
		Если РеквМД.Использование	=	НеИспользуется	Тогда	ЗаписатьОшибку("Реквизит используется " + НеИспользуется + ПредставлениеРеквизита);	Продолжить;	КонецЕсли;
		Если РеквМД.Тип="Неопределенный" Тогда
			//ТипЗнач			=	Реквизит.ПолучитьАтрибут("ТипЗначения");
			//ВидЗнач			=	Реквизит.ПолучитьАтрибут("ВидЗначения");
			//Точность		=	0;
			//Если ТипЗнач = "Число" Тогда
			//	СтрТочность	=	Значение;
			//	Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			//КонецЕсли;
			//Справочник.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			ТипЗнач  = ОпределитьСтроковыйТип(Реквизит.ПолучитьАтрибут("Тип"));
			Точность = 0;
			Если ТипЗнач = "Число" Тогда
				СтрТочность	=	Значение;
				Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			КонецЕсли;
			Справочник.НазначитьТип(ИдРеквизита, ТипЗнач, СтрДлина(Значение) + 10, Точность);
		КонецЕсли;
		
		Справочник.УстановитьАтрибут(ИдРеквизита, Значение);
		
	КонецЦикла;
	                                                            
	//	набор условий "от противного"
	Если		ПустоеЗначение(Справочник.Код)	=	0	Тогда	//	код не пустой		- порядок
	ИначеЕсли	ПустоеЗначение(ЕстьКонтроль)	=	1	Тогда	//	контроль отключен	- порядок
	ИначеЕсли	ТипКода = "Числовой"					Тогда	//	код=0				- порядок
	ИначеЕсли	ПустоеЗначение(ДлинаКода)		=	1	Тогда	//	кода вообще нет!	- порядок
	Иначе
		Справочник.Код = "0";
	КонецЕсли;
	                      
	
	Если ПроверкаУникальностиОбъектаСправочника(Справочник, ЕстьКонтроль, ЕстьВладелец, Уникальность, АвтоНумерация) = 0 Тогда Возврат("Ошибка") КонецЕсли;
	
	              
	//Справочник.Записать();
	ЗаписатьОбъект(Справочник);
	
	
	Если (ЗапоминатьЗагруженныеОбъекты = 1) Или (КолвоРеквизитовПоиска = 0) Тогда
		ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент());
	КонецЕсли;
	
	
	Возврат	Справочник.ТекущийЭлемент();
	
КонецФункции	//	УстановитьСправочникПоСсылкеV8()

//--------------------------------------------------------------------------------------------------

Функция УстановитьДокументПоСсылкеV8(Ссылка, Вид="", СозданНовыйОбъект=0, НовыеНеСоздавать=0, ОбъектМД="", Объект="")
    
	Перем	Документ;
	
	//Ссылка	=	Объект.ВыбратьУзел("Ссылка");
	//Если ПустоеЗначение(Ссылка) = 1 Тогда
	//	ОбъектМД	=	Метаданные.Документ(Вид);
	//	Если Объект.ИмяТэга = "Ссылка" Тогда
	//		Ссылка	=	Объект;
	//	Иначе
	//		Возврат("");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ПустоеЗначение(Вид) = 1 Тогда Вид = Ссылка.ПолучитьАтрибут("Вид")	КонецЕсли;

	
	ОбъектМД = Метаданные.Документ(Вид);
	
	
	Если ОбъектМД.Выбран()	= 0 Тогда
		ЗаписатьОшибку("Неверный вид документа " + Вид);
		Возврат("Ошибка");
	КонецЕсли;
	                                
	
	Если ПустоеЗначение(Объект) = 1 Тогда
		Объект = Ссылка;
	КонецЕсли;
	

	Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда
		Если ОбъектУжеЗагружен("Документ" + Вид, Ссылка.ПредставлениеXML, Документ) = 1 Тогда Возврат(Документ) КонецЕсли;
		//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Свойство[@Имя!=""СистемноеПредставление()""]");
		РеквизитыПоиска			=	Ссылка.ВыбратьУзлы("Свойство");
		КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();
	Иначе
		//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Свойство[@Имя!=""СистемноеПредставление()""]");
		РеквизитыПоиска			=	Ссылка.ВыбратьУзлы("Свойство");
		КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();
		Если КолвоРеквизитовПоиска = 0 Тогда	//	используется внутренняя ссылка
			Если ОбъектУжеЗагружен("Документ" + Вид, Ссылка.ПредставлениеXML, Документ) = 1 Тогда Возврат(Документ) КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//	Эта возможность временно отключена...
	//СистПр	=	Ссылка.ВыбратьУзел("Свойство[@Имя=""СистемноеПредставление()""]");
	//Если ПустоеЗначение(СистПр) = 0 Тогда
	//	Возврат	ЗначениеИзСтрокиВнутр(СистПр.ПолучитьАтрибут("Значение"));
	//КонецЕсли;
	
	
	Документ 				=	СоздатьОбъект("Документ." + Вид);
	
	Уникальность			=	ОбъектМД.ПериодичностьНомера;
	ЕстьКонтроль			=	ОбъектМД.КонтрольУникальности;
	АвтоНумерация			=	ОбъектМД.АвтоНумерация - 1;
	ТипНомера				=	ОбъектМД.ТипНомера;
	
	НомерДок=""; ДатаДок="";
	          
	
	Если КолвоРеквизитовПоиска > 0 Тогда
		НомерДок				=	УстановитьРеквизитV8(Ссылка.ВыбратьУзел("Свойство[@Имя=""НомерДок""]"),	"Документ", Вид, "НомерДок");
		ДатаДок					=	УстановитьРеквизитV8(Ссылка.ВыбратьУзел("Свойство[@Имя=""ДатаДок""]"),	"Документ", Вид, "ДатаДок");
	КонецЕсли;
                                    
	//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Свойство");
	//КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();

	
	Если (ПустоеЗначение(ДатаДок) = 1) И (КолвоРеквизитовПоиска = 1) Тогда
		//	возможно по дате просто не синхронизируем
		ДатаДок	=	УстановитьРеквизитV8(Объект.ВыбратьУзел("Свойство[@Имя=""ДатаДок""]"),	"Документ", Вид, "ДатаДок");
		Если ПустоеЗначение(ДатаДок) = 1 Тогда
			ДатаДок	=	РабочаяДата();
		КонецЕсли;
	КонецЕсли;
	
                                    
	
	//--------		Поиск		-------------------------------
	                                    
	Если		КолвоРеквизитовПоиска = 0 Тогда
		
			//	Поиск не производим!
		
	ИначеЕсли	(ПустоеЗначение(НомерДок) = 0)	И	(КолвоРеквизитовПоиска = 1) Тогда
		
		Если		Документ.НайтиПоНомеру(НомерДок, ДатаДок) = 1 Тогда
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Документ.ТекущийДокумент()); КонецЕсли;
			Возврат	Документ.ТекущийДокумент();
		КонецЕсли;
    
	ИначеЕсли	(ПустоеЗначение(НомерДок) = 0)	И	(ПустоеЗначение(ДатаДок) = 0) И (КолвоРеквизитовПоиска = 2) Тогда

		Если		Документ.НайтиПоНомеру(НомерДок, ДатаДок) = 1 Тогда
			Если Документ.ДатаДок = ДатаДок Тогда
				Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Документ.ТекущийДокумент()); КонецЕсли;
				Возврат	Документ.ТекущийДокумент();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли   (ЕстьКонтроль 				=	1)	И
				(ПустоеЗначение(НомерДок)	=	0)	И
		     	((Уникальность	=	"Все")	Или	(ПустоеЗначение(ДатаДок) = 0))	Тогда
			 		
		Если		Документ.НайтиПоНомеру(НомерДок, ДатаДок)				= 0 Тогда	//	создаем новый
		ИначеЕсли	СравнитьРеквизитыДокументаV8(Документ, РеквизитыПоиска)	= 1 Тогда
			Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Документ.ТекущийДокумент()); КонецЕсли;
			Возврат	Документ.ТекущийДокумент();
		КонецЕсли;
		
	ИначеЕсли	КолвоРеквизитовПоиска > 0	Тогда
		
		// поиск перебором документов данного вида
		Документ.ОбратныйПорядок(1);
		
		Если ПустоеЗначение(ДатаДок) = 0 Тогда
			Документ.ВыбратьДокументы(ДатаДок, ДатаДок);
		Иначе
			Документ.ВыбратьДокументы();
		КонецЕсли;
		
		Пока Документ.ПолучитьДокумент() = 1 Цикл
			Если СравнитьРеквизитыДокументаV8(Документ, РеквизитыПоиска) = 1 Тогда
				Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Документ.ТекущийДокумент()); КонецЕсли;
				Возврат	Документ.ТекущийДокумент();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//------------------------------------------------------------
	
	Если ПустоеЗначение(НовыеНеСоздавать) = 0 Тогда
		ЗаписатьОшибку("Объект не найден и не создан: Документ." + Вид + РазделительСтрок + Ссылка.ПредставлениеXML, "!");
		Возврат("#НеУстановлен");
	КонецЕсли;
	     
	//------	создаем новый объект	--------------------------
	
	Документ.Новый();
	СозданНовыйОбъект	=	1;
	
	//	Дата
	
			Если ПустоеЗначение(ДатаДок) = 1 Тогда
				//	возможно по дате просто не синхронизируем
				ДатаДок	=	УстановитьРеквизитV8(Объект.ВыбратьУзел("Свойство[@Имя=""ДатаДок""]"),	"Документ", Вид, "ДатаДок");
				Если ПустоеЗначение(ДатаДок) = 1 Тогда
					ДатаДок	=	РабочаяДата();
				КонецЕсли;
			КонецЕсли;
			Документ.ДатаДок	=	ДатаДок;
			
	//	Номер
	
			Если ПустоеЗначение(НомерДок) = 0 Тогда
				Документ.НомерДок	=	НомерДок;
			Иначе
				НомерДок	=	УстановитьРеквизитV8(Объект.ВыбратьУзел("Свойство[@Имя=""НомерДок""]"),	"Документ", Вид, "НомерДок");
				Если ПустоеЗначение(НомерДок) = 1 Тогда
					Документ.УстановитьНовыйНомер();
				Иначе
					Документ.НомерДок	=	НомерДок;
				КонецЕсли;
			КонецЕсли;
			
	//	Операция
	
			Если ОбъектМД.БухгалтерскийУчет = 1 Тогда
				Если ОбъектМД.СоздаватьОперацию <> "ТолькоПриПроведении" Тогда
					Документ.СуществуетОперация(1);
				КонецЕсли;
			КонецЕсли;


			
	//	РеквизитыПоиска
			
	Для Сч = 0 По РеквизитыПоиска.КоличествоУзлов() - 1 Цикл
		
		Реквизит			=	РеквизитыПоиска.ПолучитьУзел(Сч);
		ИдРеквизита			=	Реквизит.ПолучитьАтрибут("Имя");
		
		// Если (ИдРеквизита = "НомерДок") Или (ИдРеквизита = "ДатаДок") Тогда Продолжить КонецЕсли;

		Если ИдРеквизита = "НомерДок" Тогда Продолжить КонецЕсли;
		
		//РеквизитОперации	=	Реквизит.ПолучитьАтрибут("ЭтоРеквизитОперации");
		//Если ПустоеЗначение(РеквизитОперации) = 1 Тогда
			ТипОбъектаРеквизита		=	"Документ";
			ВидОбъектаРеквизита		=	Вид;
		//Иначе
		//	Если Документ.СуществуетОперация() = 0 Тогда
		//		ЗаписатьОшибку("У документа вида - " + Вид + " - не существует операции!", "!!");
		//		Продолжить;
		//	КонецЕсли;
		//	ТипОбъектаРеквизита		=	"Операция";
		//	ВидОбъектаРеквизита		=	"";
		//КонецЕсли;
		
		Значение					=	УстановитьРеквизитV8(Реквизит, ТипОбъектаРеквизита, ВидОбъектаРеквизита, ИдРеквизита);
		
		ТипРеквизита				=	"";
		ПрочитатьИнформациюОТипеРеквизита(ТипОбъектаРеквизита, ВидОбъектаРеквизита, ИдРеквизита, ТипРеквизита);
		
		Если		ПустоеЗначение(ТипРеквизита) = 1 Тогда
			
			ПредставлениеРеквизита		=	ТипОбъектаРеквизита + "." + ВидОбъектаРеквизита + "." + ИдРеквизита;
			ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);
			Продолжить;
			
		ИначеЕсли	ТипРеквизита = "Неопределенный" Тогда
			
			//ТипЗнач			=	Реквизит.ПолучитьАтрибут("ТипЗначения");
			//ВидЗнач			=	Реквизит.ПолучитьАтрибут("ВидЗначения");
			//Точность		=	0;
			//Если ТипЗнач = "Число" Тогда
			//	СтрТочность	=	Значение;
			//	Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			//КонецЕсли;
			//Если	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			//	Документ.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			//Иначе
			//	Документ.Операция.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			//КонецЕсли;

			ТипЗнач  = ОпределитьСтроковыйТип(Реквизит.ПолучитьАтрибут("Тип"));
			Точность = 0;
			Если ТипЗнач = "Число" Тогда
				СтрТочность	=	Значение;
				Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			КонецЕсли;
			Документ.НазначитьТип(ИдРеквизита, ТипЗнач, СтрДлина(Значение) + 10, Точность);
			
		КонецЕсли;


		
		Если		ИдРеквизита = "ДатаДок" Тогда	// Дату уже установивли - теперь установим время

			ВремяДокумента = "";
			ДатаДокумента  = ДатаИзXML(Реквизит.ВыбратьУзел("Значение").Значение, ВремяДокумента);
			
			Документ.АвтоВремяОтключить();
		    Документ.УстановитьВремя(Число(Сред(ВремяДокумента, 1, 2)), Число(Сред(ВремяДокумента, 4, 2)), Число(Сред(ВремяДокумента, 7, 2)));
			
		Иначе // Если	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			
			Документ.УстановитьАтрибут(ИдРеквизита, Значение);
			
		//Иначе
		//	
		//	Документ.Операция.УстановитьАтрибут(ИдРеквизита, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	        
	
	//	набор условий "от противного"
	Если		ПустоеЗначение(Документ.НомерДок)	=	0	Тогда	//	номер не пустой		- порядок
	ИначеЕсли	ТипНомера = "Числовой"						Тогда	//	номер = 0			- порядок
	Иначе
		// ??? здесь можно написать алгоритм получения нового номера
		
		Документ.НомерДок = "0";
		
		//ЗаписатьОшибку("У документа '" + Вид + "' отлючен режим автоматической нумерации и не задан номер!", "!!");
		//Возврат("Ошибка");
	КонецЕсли;
	  
	
	Если ПроверкаУникальностиДокумента(Документ, ЕстьКонтроль, Уникальность, АвтоНумерация) = 0 Тогда Возврат("Ошибка") КонецЕсли;
	
	
	//Документ.Записать();
	ЗаписатьОбъект(Документ);
	
	
	Если (ЗапоминатьЗагруженныеОбъекты = 1) Или (КолвоРеквизитовПоиска = 0) Тогда
		ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Документ.ТекущийДокумент());
	КонецЕсли;

	
	Возврат	Документ.ТекущийДокумент();
	
КонецФункции		//	УстановитьДокументПоСсылкеV8()

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьОбъектСправочникаV8(Объект, Вид, ИмяПравила)

	Перем ОбъектМД;

	СозданНовыйОбъект	= 0;
	НовыеНеСоздавать    = 0;
	НеЗамещатьНайденные = 0;
	
	ДатаУстановки =ТекущаяДата();

	УзелСсылки = Объект.ВыбратьУзел("Ссылка");
	
	Если ПустоеЗначение(УзелСсылки) = 0 Тогда

		ЭтоГруппа = 0;
		
		УзелЭтоГруппа = УзелСсылки.ВыбратьУзел("Свойство[@Имя=""ЭтоГруппа""]");
		Если ПустоеЗначение(УзелЭтоГруппа) = 0 Тогда
			ЭтоГруппа = УстановитьРеквизитV8(УзелЭтоГруппа, "Справочник", Вид, "ЭтоГруппа");
			УзелСсылки.УдалитьПодчиненный(УзелЭтоГруппа);
		Иначе
			УзелЭтоГруппа = Объект.ВыбратьУзел("Свойство[@Имя=""ЭтоГруппа""]");
			Если ПустоеЗначение(УзелЭтоГруппа) = 0 Тогда
				ЭтоГруппа = УстановитьРеквизитV8(УзелЭтоГруппа, "Справочник", Вид, "ЭтоГруппа");
				Объект.УдалитьПодчиненный(УзелЭтоГруппа);
			КонецЕсли; 
		КонецЕсли;
		
		
		ТекущийОбъект = УстановитьСправочникПоСсылкеV8(УзелСсылки, Вид, СозданНовыйОбъект, НовыеНеСоздавать, ОбъектМД, ЭтоГруппа, Объект);
		
		Если ТекущийОбъект = "Ошибка" Тогда Возврат КонецЕсли;
		
		ОбъектБД = СоздатьОбъект("Справочник." + Вид);
		
		Если ПустоеЗначение(ТекущийОбъект) = 0 Тогда

			НеЗамещатьНайденные = Объект.ПолучитьАтрибут("НеЗамещать");
			
			Если ПустоеЗначение(СозданНовыйОбъект) = 1 Тогда
				Если ПустоеЗначение(НеЗамещатьНайденные) = 0 Тогда
					Если ТекущийОбъект.ПометкаУдаления() = 0 Тогда	//	этот объект не создан по ссылке из реквизитов других объектов
						Возврат;	//	найденные не замещаем
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбъектБД.НайтиЭлемент(ТекущийОбъект);
		КонецЕсли;
		
	Иначе // Ссылки нет
		                      
		ОбъектМД = Метаданные.Справочник(Вид);
	
		//Если ПустоеЗначение(НовыеНеСоздавать) = 0 Тогда Возврат КонецЕсли;	//	новые не создаем
		
		ОбъектБД = СоздатьОбъект("Справочник." + Вид);
		
		//ЭтоГруппа	=	Число(Объект.ПолучитьАтрибут("ЭтоГруппа"));

		ЭтоГруппа = 0;

		УзелЭтоГруппа = Объект.ВыбратьУзел("Свойство[@Имя=""ЭтоГруппа""]");
		Если ПустоеЗначение(УзелЭтоГруппа) = 0 Тогда
			ЭтоГруппа = УстановитьРеквизитV8(УзелЭтоГруппа, "Справочник", Вид, "ЭтоГруппа");
		КонецЕсли;
		
		Если ЭтоГруппа = 1 Тогда
			ОбъектБД.НоваяГруппа();
		Иначе
			ОбъектБД.Новый();
		КонецЕсли;
		
		ОбъектБД.УстановитьНовыйКод();
		СозданНовыйОбъект	=	1;
		
	КонецЕсли;
	    
	// Локальный обработчик "ПриЗагрузке"
	НомерСтроки = 0;
	Если ТаблицаПравилКонвертации.НайтиЗначение(ИмяПравила, НомерСтроки, "Код") = 1 Тогда
		ТаблицаПравилКонвертации.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Если ТаблицаПравилКонвертации.ЕстьОбработчикПриЗагрузке = 1 Тогда
			Отказ = Шаблон("[ПКО_ПриЗагрузке_" + ИмяПравила + "(ОбъектБД, ИмяПравила, Объект, ДатаУстановки)]");
			Если Число(Отказ) = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                          
	
	ЕстьВладелец				=	ОбъектМД.Владелец.Выбран();
	ЕстьКонтроль				=	ОбъектМД.КонтрольУникальности;
	Уникальность				=	ОбъектМД.СерииКодов;
	АвтоНумерация				=	ОбъектМД.АвтоНумерация - 1;
	
	СпособЗагрузкиПоУмолчанию	=	"ЗамещатьНеПустыми";
	СтатусУдаления				=	"Авто";
	ПометкаУдаления				=	0;
	
                                             
	ОбъектБД.ИспользоватьДату(ДатаУстановки, 1);
	
	НеИспользуется	=	?(ОбъектБД.ЭтоГруппа() = 1, "ДляЭлемента", "ДляГруппы");
	             
	//--------- Заполняем реквизиты --------------------------------------------
	
	Реквизиты	=	Объект.ВыбратьУзлы("Свойство");
	Для Сч = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
		Реквизит					=	Реквизиты.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Имя");
		НеЗамещатьРеквизит			=	Реквизит.ПолучитьАтрибут("НеЗамещать");
		Значение					=	УстановитьРеквизитV8(Реквизит, "Справочник", Вид, ИдРеквизита);

		
		Если Значение = "#НеУстановлен" Тогда
			ЗаписатьОшибку("Не установлен реквизит.  Справочник." + Вид + ": " + ОбъектБД + "  Реквизит: " + ИдРеквизита);
			Продолжить;
		КонецЕсли;

		
		Если СозданНовыйОбъект = 0 Тогда	//	Найден существующий объект
			//Если НеУстанавливатьРеквизит(СпособЗагрузкиПоУмолчанию, СпособЗагрузки, ОбъектБД, ИдРеквизита, Значение, СозданНовыйОбъект) = 1 Тогда Продолжить КонецЕсли;
			Если ПустоеЗначение(НеЗамещатьРеквизит) = 0 Тогда Продолжить КонецЕсли;   
			Если ИдРеквизита <> "ПометкаУдаления" Тогда
				Если ОбъектБД.ПолучитьАтрибут(ИдРеквизита) = Значение Тогда Продолжить КонецЕсли;	//	значение не изменилось
			КонецЕсли;
		КонецЕсли;


		Если ИдРеквизита = "ПометкаУдаления" Тогда
			ПометкаУдаления = Значение;
		Иначе
			Если Найти("Код,Наименование,Родитель,Владелец", ИдРеквизита) = 0 Тогда
				РеквМД						=	ОбъектМД.Реквизит(ИдРеквизита);
				ПредставлениеРеквизита		=	" (Справочник." + Вид + "." + ИдРеквизита + ")";
				Если РеквМД.Выбран()		=	0				Тогда	ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);	Продолжить;					КонецЕсли;
				Если РеквМД.Использование	=	НеИспользуется	Тогда	ЗаписатьОшибку("Реквизит используется " + НеИспользуется + ПредставлениеРеквизита);	Продолжить;	КонецЕсли;
				Если РеквМД.Тип="Неопределенный" Тогда
					ТипЗнач = ОпределитьСтроковыйТип(Реквизит.ПолучитьАтрибут("Тип"));
					Точность		=	0;
					Если ТипЗнач = "Число" Тогда
						СтрТочность	=	Значение;
						Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
					КонецЕсли;
					ОбъектБД.НазначитьТип(ИдРеквизита, ТипЗнач, СтрДлина(Значение) + 10, Точность);
				КонецЕсли; 
			КонецЕсли;	
			                     
			// Это помогает при отладке
			Если ФормФлРежимОтладки = 0 Тогда
				ОбъектБД.УстановитьАтрибут(ИдРеквизита, Значение);
			Иначе
				Попытка
					ОбъектБД.УстановитьАтрибут(ИдРеквизита, Значение);
				Исключение
					ЗаписатьОшибку("Неудачная попытка установки значения реквизита объекта: " + ОбъектБД + ", Реквизит: " + ИдРеквизита + " - " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	
		
	КонецЦикла;
	
	Если ПроверкаУникальностиОбъектаСправочника(ОбъектБД, ЕстьКонтроль, ЕстьВладелец, Уникальность, АвтоНумерация) = 0 Тогда Возврат КонецЕсли;
	
	                           
	// Глобальный обработчик "ПослеЗагрузкиОбъекта"
	Если мКонвертацияПослеЗагрузкиОбъекта = 1 Тогда
		Отказ = Шаблон("[Конвертация_ПослеЗагрузкиОбъекта(ОбъектБД, ИмяПравила)]");
		Если Число(Отказ) = 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
                                
	// Локальный обработчик "ПослеЗагрузки"
	НомерСтроки = 0;
	Если ТаблицаПравилКонвертации.НайтиЗначение(ИмяПравила, НомерСтроки, "Код") = 1 Тогда
		ТаблицаПравилКонвертации.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Если ТаблицаПравилКонвертации.ЕстьОбработчикПослеЗагрузки = 1 Тогда
			Отказ = Шаблон("[ПКО_ПослеЗагрузки_" + ИмяПравила + "(ОбъектБД, ИмяПравила, Объект)]");
			Если Число(Отказ) = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                          
	
	ЗаписатьОбъект(ОбъектБД);
	
	Если ПустоеЗначение(ПометкаУдаления) = 1 Тогда
		Если ОбъектБД.ПометкаУдаления() = 1 Тогда	ОбъектБД.СнятьПометкуУдаления();	КонецЕсли;
	Иначе
		Если ОбъектБД.ПометкаУдаления() = 0 Тогда	ОбъектБД.Удалить(0);				КонецЕсли;
	КонецЕсли;	                                  
	
КонецПроцедуры		//	ЗагрузитьОбъектСправочникаV8()

//--------------------------------------------------------------------------------------------------
                                                                                 
Процедура ЗагрузитьДокументV8(Объект, Вид, ИмяПравила)
	          
	Перем	ОбъектМД;
 	
	СозданНовыйОбъект	=	0;
	НовыеНеСоздавать	=	0;
	НеЗамещатьНайденные =	0;

	УзелСсылки = Объект.ВыбратьУзел("Ссылка");


	Если ПустоеЗначение(УзелСсылки) = 0 Тогда
		ТекущийОбъект = УстановитьДокументПоСсылкеV8(УзелСсылки, Вид, СозданНовыйОбъект, НовыеНеСоздавать, ОбъектМД, Объект);
		
		
		Если ТекущийОбъект = "Ошибка" Тогда Возврат КонецЕсли;
		                                           
		ОбъектБД	=	СоздатьОбъект("Документ." + Вид);    
		
		Если ПустоеЗначение(ТекущийОбъект) = 0 Тогда

			НеЗамещатьНайденные = Объект.ПолучитьАтрибут("НеЗамещать");
			
			Если СозданНовыйОбъект = 0 Тогда
				Если ПустоеЗначение(НеЗамещатьНайденные) = 0 Тогда
					Если ТекущийОбъект.ПометкаУдаления() = 0 Тогда	//	этот объект не создан по ссылке из реквизитов других объектов
						Возврат;	//	найденные не замещаем
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтатусПроведения	=	гТабКэшПараметровЗагрузки.СтатусПроведения;
			ОтменитьПроведение	=	Число(Объект.ПолучитьАтрибут("ОтменитьПроведение"));
			
			ОбъектБД.НайтиДокумент(ТекущийОбъект);

		КонецЕсли;
			
	Иначе				//	Ссылки нет
		
		//Если ПустоеЗначение(НовыеНеСоздавать) = 0 Тогда Возврат КонецЕсли;	//	новые не создаем
		ОбъектБД = СоздатьОбъект("Документ." + Вид);    
		
		ОбъектМД = Метаданные.Документ(Вид);
		
		ОбъектБД.Новый();
		СозданНовыйОбъект	=	1;
		
		Если ОбъектМД.БухгалтерскийУчет = 1 Тогда
			Если ОбъектМД.СоздаватьОперацию <> "ТолькоПриПроведении" Тогда
				ОбъектБД.СуществуетОперация(1);
			КонецЕсли;
		КонецЕсли;

		ЗначениеНомераДокумента = "";
		УзелНомераДокумента		= Объект.ВыбратьУзел("Свойство[@Имя=""НомерДок""]");
		Если ПустоеЗначение(УзелНомераДокумента) = 0 Тогда
			//ЗначениеНомераДокумента		=	УзелНомераДокумента.ПолучитьАтрибут("Значение");
			ЗначениеНомераДокумента = УстановитьРеквизитV8(УзелНомераДокумента, "Документ", Вид, "НомерДок");
		КонецЕсли;
		Если ПустоеЗначение(ЗначениеНомераДокумента) = 0 Тогда
			ОбъектБД.НомерДок			=	ЗначениеНомераДокумента;
		Иначе
			ЗначениеДатыДокумента		=	"";
			УзелДатыДокумента			=	Объект.ВыбратьУзел("Свойство[@Имя=""ДатаДок""]");
			Если ПустоеЗначение(УзелДатыДокумента) = 0 Тогда
				//ЗначениеДатыДокумента	=	Дата(УзелДатыДокумента.ПолучитьАтрибут("Значение"));
				ЗначениеДатыДокумента	=	УстановитьРеквизитV8(УзелДатыДокумента, "Документ", Вид, "ДатаДок");
			КонецЕсли;
			Если ПустоеЗначение(ЗначениеДатыДокумента) = 1 Тогда ЗначениеДатыДокумента = ФормДатаКон КонецЕсли;
			ОбъектБД.ДатаДок			=	ЗначениеДатыДокумента;
			ОбъектБД.УстановитьНовыйНомер();
		КонецЕсли;
		
	КонецЕсли;
	
	// Локальный обработчик "ПриЗагрузке"
	НомерСтроки = 0;
	Если ТаблицаПравилКонвертации.НайтиЗначение(ИмяПравила, НомерСтроки, "Код") = 1 Тогда
		ТаблицаПравилКонвертации.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Если ТаблицаПравилКонвертации.ЕстьОбработчикПриЗагрузке = 1 Тогда
			Отказ = Шаблон("[ПКО_ПриЗагрузке_" + ИмяПравила + "(ОбъектБД, ИмяПравила, Объект)]");
			Если Число(Отказ) = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                          
	
	ЕстьКонтроль				=	ОбъектМД.КонтрольУникальности;
	Уникальность				=	ОбъектМД.ПериодичностьНомера;
	АвтоНумерация				=	ОбъектМД.АвтоНумерация - 1;
	                    

	СпособЗагрузкиПоУмолчанию	=	"ЗамещатьНеПустыми";
	НеУдалятьСтроки				=	0;
	СтатусУдаления				=	"Авто";
	ПометкаУдаления				=	0;
	
	
                                             
	//--------- Заполняем реквизиты --------------------------------------------
	
	Реквизиты	=	Объект.ВыбратьУзлы("Свойство");
	Для Сч = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
		
		Реквизит					=	Реквизиты.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Имя");
		НеЗамещатьРеквизит			=	Реквизит.ПолучитьАтрибут("НеЗамещать");
		//РеквизитОперации			=	0;

		ТипОбъектаРеквизита		=	"Документ";
		ВидОбъектаРеквизита		=	Вид;
		
		//Если ПустоеЗначение(РеквизитОперации) = 1 Тогда
		//	ТипОбъектаРеквизита		=	"Документ";
		//	ВидОбъектаРеквизита		=	Вид;
		//Иначе
		//	Если ОбъектБД.СуществуетОперация() = 0 Тогда
		//		ЗаписатьОшибку("У документа вида - " + Вид + " - не существует операции!", "!!");
		//		Продолжить;
		//	КонецЕсли;
		//	ТипОбъектаРеквизита		=	"Операция";
		//	ВидОбъектаРеквизита		=	"";
		//КонецЕсли;
		
		Значение					=	УстановитьРеквизитV8(Реквизит, ТипОбъектаРеквизита, ВидОбъектаРеквизита, ИдРеквизита);
		ТипРеквизита				=	"";
		ПрочитатьИнформациюОТипеРеквизита(ТипОбъектаРеквизита, ВидОбъектаРеквизита, ИдРеквизита, ТипРеквизита);
		
		
		Если Значение = "#НеУстановлен" Тогда
			ЗаписатьОшибку("Не установлен реквизит.  Документ." + Вид + ": " + ОбъектБД + "  Реквизит: " + ИдРеквизита);
			Продолжить;
		КонецЕсли;
		

		
		Если		ПустоеЗначение(ТипРеквизита) = 1 Тогда
			
			ПредставлениеРеквизита		=	ТипОбъектаРеквизита + "." + ВидОбъектаРеквизита + "." + ИдРеквизита;
			ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);
			Продолжить;
			
		ИначеЕсли	ТипРеквизита = "Неопределенный" Тогда
			
			//ТипЗнач			=	Реквизит.ПолучитьАтрибут("ТипЗначения");
			//ВидЗнач			=	Реквизит.ПолучитьАтрибут("ВидЗначения");
			//Точность		=	0;
			//Если ТипЗнач = "Число" Тогда
			//	СтрТочность	=	Значение;
			//	Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			//КонецЕсли;
			//Если	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			//	ОбъектБД.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			//Иначе
			//	ОбъектБД.Операция.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			//КонецЕсли;
			
			ТипЗнач  = ОпределитьСтроковыйТип(Реквизит.ПолучитьАтрибут("Тип"));
			Точность = 0;
			Если ТипЗнач = "Число" Тогда
				СтрТочность	=	Значение;
				Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			КонецЕсли;
			ОбъектБД.НазначитьТип(ИдРеквизита, ТипЗнач, СтрДлина(Значение) + 10, Точность);
			
		КонецЕсли;


		
		Если СозданНовыйОбъект = 0 Тогда
			//Если НеУстанавливатьРеквизит(СпособЗагрузкиПоУмолчанию, СпособЗагрузки, ОбъектБД, ИдРеквизита, Значение, СозданНовыйОбъект) = 1 Тогда Продолжить КонецЕсли;
			Если ПустоеЗначение(НеЗамещатьРеквизит) = 0 Тогда Продолжить КонецЕсли;
			Если ИдРеквизита <> "ДатаДок" ИЛИ ИдРеквизита <> "ПометкаУдаления" Тогда
				Если ОбъектБД.ПолучитьАтрибут(ИдРеквизита) = Значение Тогда Продолжить КонецЕсли;	//	значение не изменилось
			КонецЕсли; 
		КонецЕсли;

		
		Если ИдРеквизита = "ПометкаУдаления" Тогда
			
			ПометкаУдаления = Значение;
			
		ИначеЕсли		ИдРеквизита = "ДатаДок" Тогда

			ВремяДокумента = "";
			ДатаДокумента  = ДатаИзXML(Реквизит.ВыбратьУзел("Значение").Значение, ВремяДокумента);
			

			Если ОбъектБД.Проведен() = 1 Тогда
				Если (ДатаДокумента <> ОбъектБД.ДатаДок) Или (ОбъектБД.ПолучитьВремя() <> ВремяДокумента) Тогда
					ЗаписатьОшибку("Изменены дата или время проведенного документа - " + ОбъектБД + "!
									|Проведение документа отменено.", "!");
					ОбъектБД.СделатьНеПроведенным();
				Иначе
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			
			//Если СозданНовыйОбъект = 0 Тогда	//	Найден
			//	Если ОбъектБД.ПолучитьВремя() = Значение Тогда Продолжить КонецЕсли;	//	значение не изменилось
			//	Если ОбъектБД.Проведен() = 1 Тогда
			//		ЗаписатьОшибку("Изменено время проведенного документа - " + ОбъектБД + "!
			//						|Проведение документа отменено.", "!");
			//		ОбъектБД.СделатьНеПроведенным();
			//	КонецЕсли;
			//КонецЕсли;

			ОбъектБД.ДатаДок = ДатаДокумента;
			ОбъектБД.АвтоВремяОтключить();
		    ОбъектБД.УстановитьВремя(Число(Сред(ВремяДокумента, 1, 2)), Число(Сред(ВремяДокумента, 4, 2)), Число(Сред(ВремяДокумента, 7, 2)));
		
		//ИначеЕсли	ПустоеЗначение(РеквизитОперации) = 1	Тогда
		Иначе
			
			ОбъектБД.УстановитьАтрибут(ИдРеквизита, Значение);
			
		//Иначе
		//			  
		//	Если СозданНовыйОбъект = 0 Тогда	//	Найден
		//		Если ОбъектБД.Операция.ПолучитьАтрибут(ИдРеквизита) = Значение Тогда Продолжить КонецЕсли;	//	значение не изменилось
		//	КонецЕсли;
		//	
		//	ОбъектБД.Операция.УстановитьАтрибут(ИдРеквизита, Значение);
			
		КонецЕсли;
		
	КонецЦикла;


	
	//--------- ТабличнаяЧасть ----------------------------------------------------------

	
	ТЧ = Объект.ВыбратьУзел("ТабличнаяЧасть");

	Если ПустоеЗначение(ТЧ) = 0 Тогда
	
		НеЗамещатьТЧ    = ТЧ.ПолучитьАтрибут("НеЗамещать");

		Строки			=	ТЧ.ВыбратьУзлы("Запись");
		КоличествоСтрок	=	Строки.КоличествоУзлов();
		
		Если ПустоеЗначение(НеЗамещатьТЧ) = 1 Тогда
			Если ПустоеЗначение(КоличествоСтрок) = 0 Тогда ОбъектБД.УдалитьСтроки() КонецЕсли;
		КонецЕсли;
		
		Для СчСтрок = 0 По КоличествоСтрок - 1 Цикл
			СтрокаДокумента	=	Строки.ПолучитьУзел(СчСтрок);

			Реквизиты		=	СтрокаДокумента.ВыбратьУзлы("Свойство");
			КолвоРеквизитов	=	Реквизиты.КоличествоУзлов();
			               
			Если ПустоеЗначение(КолвоРеквизитов) = 0 Тогда
				ОбъектБД.НоваяСтрока();
			Иначе
				Продолжить;
			КонецЕсли;

			
			Для Сч = 0 По КолвоРеквизитов - 1 Цикл
				Реквизит					=	Реквизиты.ПолучитьУзел(Сч);
				ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Имя");
				Значение					=	УстановитьРеквизитV8(Реквизит, "Документ", Вид, ИдРеквизита);
				
				Если Значение = "#НеУстановлен" Тогда
					ЗаписатьОшибку("Не установлен реквизит.  Документ." + Вид + ": " + ОбъектБД + "  Реквизит: " + ИдРеквизита);
					Продолжить;
				КонецЕсли;

				
				ТипРеквизита				=	"";
				ПрочитатьИнформациюОТипеРеквизита("Документ", Вид, ИдРеквизита, ТипРеквизита);
				Если 		ПустоеЗначение(ТипРеквизита) = 1 Тогда
					ПредставлениеРеквизита		=	"Документ." + Вид + "." + ИдРеквизита;
					ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);
					Продолжить;
				ИначеЕсли	ТипРеквизита = "Неопределенный" Тогда
					//ТипЗнач			=	Реквизит.ПолучитьАтрибут("ТипЗначения");
					//ВидЗнач			=	Реквизит.ПолучитьАтрибут("ВидЗначения");
					//Точность		=	0;
					//Если ТипЗнач = "Число" Тогда
					//	СтрТочность	=	Значение;
					//	Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
					//КонецЕсли;
					//ОбъектБД.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
					ТипЗнач  = ОпределитьСтроковыйТип(Реквизит.ПолучитьАтрибут("Тип"));
					Точность = 0;
					Если ТипЗнач = "Число" Тогда
						СтрТочность	=	Значение;
						Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
					КонецЕсли;
					ОбъектБД.НазначитьТип(ИдРеквизита, ТипЗнач, СтрДлина(Значение) + 10, Точность);
				КонецЕсли;
				ОбъектБД.УстановитьАтрибут(ИдРеквизита, Значение);
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли; // загрузка табл. части
	
	//--------------------------------------------------------------------------
	
	Если ПроверкаУникальностиДокумента(ОбъектБД, ЕстьКонтроль, Уникальность, АвтоНумерация) = 0 Тогда Возврат КонецЕсли;
	                         
	// Глобальный обработчик "ПослеЗагрузкиОбъекта"
	Если мКонвертацияПослеЗагрузкиОбъекта = 1 Тогда
		Отказ = Шаблон("[Конвертация_ПослеЗагрузкиОбъекта(ОбъектБД, ИмяПравила)]");
		Если Число(Отказ) = 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
                                
	// Локальный обработчик "ПослеЗагрузки"
	НомерСтроки = 0;
	Если ТаблицаПравилКонвертации.НайтиЗначение(ИмяПравила, НомерСтроки, "Код") = 1 Тогда
		ТаблицаПравилКонвертации.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Если ТаблицаПравилКонвертации.ЕстьОбработчикПослеЗагрузки = 1 Тогда
			Отказ = Шаблон("[ПКО_ПослеЗагрузки_" + ИмяПравила + "(ОбъектБД, ИмяПравила, Объект)]");
			Если Число(Отказ) = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                          

	ЗаписатьОбъект(ОбъектБД);
	
	Если ПустоеЗначение(ПометкаУдаления) = 1 Тогда
		Если ОбъектБД.ПометкаУдаления() = 1 Тогда	ОбъектБД.СнятьПометкуУдаления();	КонецЕсли;
	Иначе
		Если ОбъектБД.ПометкаУдаления() = 0 Тогда	ОбъектБД.Удалить(0);				КонецЕсли;
	КонецЕсли;	                                  
	
КонецПроцедуры		//	ЗагрузитьДокументV8()
                    
//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьОбъектV8()

	Объект     = гФайл.ТекущийЭлементВВидеОбъекта();

	ТипОбъекта = Объект.ПолучитьАтрибут("Тип"); 
	ИмяПравила = Объект.ПолучитьАтрибут("ИмяПравила");
	ВидОбъекта = ОтделитьРазделителем(ТипОбъекта, ".");
                                                
	// Глобальный обработчик "ПередЗагрузкойОбъекта"
	Если мКонвертацияПередЗагрузкойОбъекта = 1 Тогда
		Отказ = Шаблон("[Конвертация_ПередЗагрузкойОбъекта(ИмяПравила)]");
		Если Число(Отказ) = 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Локальный обработчик "ПередЗагрузкой"
	НомерСтроки = 0;
	Если ТаблицаПравилКонвертации.НайтиЗначение(ИмяПравила, НомерСтроки, "Код") = 1 Тогда
		ТаблицаПравилКонвертации.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Если ТаблицаПравилКонвертации.ЕстьОбработчикПередЗагрузкой = 1 Тогда
			Отказ = Шаблон("[ПКО_ПередЗагрузкой_" + ИмяПравила + "(ИмяПравила)]");
			Если Число(Отказ) = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                          
	
	Если ТипОбъекта = "СправочникСсылка" Тогда
		ЗагрузитьОбъектСправочникаV8(Объект, ВидОбъекта, ИмяПравила);
	ИначеЕсли ТипОбъекта = "ДокументСсылка" Тогда
		ЗагрузитьДокументV8(Объект, ВидОбъекта, ИмяПравила);
	КонецЕсли;

КонецПроцедуры		//	ЗагрузитьОбъектV8()


//**************************************************************************************************
//****		Формат2 Окончание		****************************************************************
//**************************************************************************************************


Процедура ЗагрузитьДанные()
	
	Если ПроверитьИсходныеДанные("Начало")	=	0 Тогда	Возврат	КонецЕсли;
	
	гПравила = "";
	
	ТаблицаПоследовательностей();
	
	гПоследнийПроведенныйДокумент	=	'00.00.0000';
	гСчетчикЗагруженныхОбъектов		=	0;
	гФайл							=	гXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
	
	гФайл.СвязатьСФайлом(ФормИмяФайлаДанных);

	ТипТега = гФайл.Спуститься();

	//Если ЗапоминатьЗагруженныеОбъекты = 1 Тогда                                          
		ТабЗагруженныхОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		ТабЗагруженныхОбъектов.НоваяКолонка("Вид",			"Строка");
		ТабЗагруженныхОбъектов.НоваяКолонка("ТабОбъектов",	"ТаблицаЗначений");
	//КонецЕсли;
	
	
	//--------------------------------------------
	
	
	СвойстваТекущегоУзла	=	гФайл.СвойстваТекущегоУзла;
	ИмяТега					=	СвойстваТекущегоУзла.Имя;
	
	Если		ИмяТега	=	"ФайлОбмена" 					Тогда
		  
		Для СчАтрибутов = 0 По СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		    ИмяАтрибута	=	СвойстваТекущегоУзла.НаименованиеАтрибута(СчАтрибутов);
			Если	ИмяАтрибута = "ВерсияФормата"			Тогда
				ВерсияФормата		=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
			ИначеЕсли	ИмяАтрибута = "ДатаВыгрузки" Тогда
				ДатаВыгрузки		=	ДатаИзXML(СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов));
			ИначеЕсли	ИмяАтрибута = "НачалоПериодаВыгрузки" Тогда
				ФормДатаНач			=	ДатаИзXML(СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов));
			ИначеЕсли	ИмяАтрибута = "ОкончаниеПериодаВыгрузки" Тогда
				ФормДатаКон			=	ДатаИзXML(СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов));
			ИначеЕсли	ИмяАтрибута = "ИмяКонфигурацииИсточника" Тогда
				
			ИначеЕсли	ИмяАтрибута = "ИмяКонфигурацииПриемника" Тогда
				ИдКонфигурации		=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
			ИначеЕсли	ИмяАтрибута = "Комментарий" Тогда

			ИначеЕсли	ИмяАтрибута = "ИдПравилКонвертации"		Тогда
				ИдПравилКонвертации	=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИдКонфигурации <> СокрЛП(Метаданные.Идентификатор) Тогда
		Если Вопрос("Выбранный файл данных возможно не предназначен
					|для данной конфигурации!
					|Идентификатор текущей конфигурации:  '" + Метаданные.Идентификатор + "'
					|Идентификатор конфигурации, указанный
					|в файле загрузки:  '" + ИдКонфигурации + "'
					|Продолжить загрузку!", 4)  <> 6 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Сообщить("Начало загрузки:		" + ТекущееВремя() );
	
	мКонвертацияПередЗагрузкойДанных  = 0;
	мКонвертацияПослеЗагрузкиДанных   = 0; 
	мКонвертацияПередЗагрузкойОбъекта = 0;
	мКонвертацияПослеЗагрузкиОбъекта  = 0;
	
	
	Если ФормФлРежимОтладки = 0 Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	
	Пока ТипТега <> 4 Цикл		//	пока не достигнут конец файла
		
		Если ТипТега <> 1 Тогда	ТипТега = гФайл.Следующий(); Продолжить КонецЕсли;	//	пропускаем концы уровней и инструкции
		
		ИмяТега	=	гФайл.СвойстваТекущегоУзла.Имя;
		
		
		Если ФормФлРежимОтладки = 0 Тогда
			Если гСчетчикЗагруженныхОбъектов % КоличествоОбъектовНаТранзакцию  = 0 Тогда
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
		
		Если ИмяТега = "ПравилаОбмена" Тогда
			ЗагрузитьПравилаКонвертации();
			
		  	// Глобальный обработчик "ПередЗагрузкойДанных"
			Если мКонвертацияПередЗагрузкойДанных = 1 Тогда
				Отказ = Шаблон("[Конвертация_ПередЗагрузкойДанных()]");
				Если Число(Отказ) = 1 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяТега = "Объект" Тогда
			ЗагрузитьОбъектV8();
		Иначе
			ТипТега = гФайл.Спуститься();
			Продолжить;
		КонецЕсли;
		
		ТипТега = гФайл.Следующий();
		
		гСчетчикЗагруженныхОбъектов	=	гСчетчикЗагруженныхОбъектов + 1;
		
		Если гСчетчикЗагруженныхОбъектов % 10 = 0 Тогда
			Состояние("Обработано " + гСчетчикЗагруженныхОбъектов + " объектов");
		КонецЕсли;

	КонецЦикла;

	
	Если ПустоеЗначение(гСписокВспомогательныхОбъектов) = 0 Тогда
		Сообщить("Удалим вспомогательные объекты", "");
		УдалитьОбъекты(гСписокВспомогательныхОбъектов, 1);
	КонецЕсли;
	
	             
	Если ФормФлРежимОтладки = 0 Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	                                                        
	
	Сообщить("Конец загрузки:		" + ТекущееВремя() );	//Мусор
	

	Если гСчетчикЗагруженныхОбъектов > 0 Тогда
		Коммент    = "Загружено " + гСчетчикЗагруженныхОбъектов + " объектов";
		ТипСобытия = "Обработка";
		Событие    = "Выполнена обработка ""Загрузка данных""";
		ЗаписьЖурналаРегистрации(Коммент, ТипСобытия, Событие, , 2);
	КонецЕсли;
	
	
	Если Восстанавливать = 1 Тогда
		КонДокумент	=	?(Метаданные.Регистр()=0, '00.00.0000', ПолучитьПозициюТА());
		ВосстановитьПоследовательности(гПоследнийПроведенныйДокумент, КонДокумент);
	КонецЕсли;

  	// Глобальный обработчик "ПослеЗагрузкиДанных"
	Если мКонвертацияПослеЗагрузкиДанных = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПослеЗагрузкиДанных()]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	
	Предупреждение("Загрузка завершена! 
					|Обработано объектов:  " + Строка(гСчетчикЗагруженныхОбъектов-1) );
					
	
	Форма.Параметр = СписокОшибок;
	
КонецПроцедуры		//	ЗагрузитьДанные()

//--------------------------------------------------------------------------------------------------

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл настройки (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

//------------------------------------------------------------------------------------------------

Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Процедура ПриОткрытии()
	                          
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	Если Число(гXMLАнализатор.ВерсияАнализатора) < 2 Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	                                                                                      
	//Если Число(гXMLАнализатор.ВерсияБазовогоАнализатора) < 4 Тогда
	//	Сообщить("Для работы с программой рекомендуется установить Microsoft XML Parser версии 4 !");
	//КонецЕсли;
	
	
	Если Метаданные.Последовательность() = 0 Тогда
		Форма.Восстанавливать.Видимость(0);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////////////////////////////////////////////////////////////////////////////////

гТабКэшПараметровЗагрузки			=	СоздатьОбъект("ТаблицаЗначений");
гТабКэшПараметровЗагрузки.НоваяКолонка("Ид",						"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("Дата",						"Дата");
гТабКэшПараметровЗагрузки.НоваяКолонка("ЗамещатьНайденные",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("НовыеНеСоздавать",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("СпособЗагрузки",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусУдаления",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроводок",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроведения",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьОперации",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьЗаписиЖР",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("НеУдалятьСтроки",			"Число");

гТабКэшПараметровЗагрузки.НоваяСтрока();
гТабКэшПараметровЗагрузки.Ид						=	"ПараметрыПоУмолчанию";
гТабКэшПараметровЗагрузки.Дата						=	РабочаяДата();				//	???
гТабКэшПараметровЗагрузки.ЗамещатьНайденные			=	1;
гТабКэшПараметровЗагрузки.СпособЗагрузки			=	"ЗамещатьНеПустыми";
гТабКэшПараметровЗагрузки.НовыеНеСоздавать			=	0;
гТабКэшПараметровЗагрузки.СтатусУдаления			=	"Авто";
гТабКэшПараметровЗагрузки.СтатусПроводок			=	"Авто";
гТабКэшПараметровЗагрузки.СтатусПроведения			=	"Авто";
гТабКэшПараметровЗагрузки.ЗагружатьОперации			=	1;
гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР			=	1;
гТабКэшПараметровЗагрузки.НеУдалятьСтроки			=	0;

//--------------------------------------------------------------------------------------------------
	
ТаблицаПравилКонвертации = СоздатьОбъект("ТаблицаЗначений");
ТаблицаПравилКонвертации.НоваяКолонка("Код","Строка");
ТаблицаПравилКонвертации.НоваяКолонка("ЕстьОбработчикПередЗагрузкой","Число"); 
ТаблицаПравилКонвертации.НоваяКолонка("ЕстьОбработчикПриЗагрузке","Число"); 
ТаблицаПравилКонвертации.НоваяКолонка("ЕстьОбработчикПослеЗагрузки","Число");
	
//--------------------------------------------------------------------------------------------------


РасположениеФайла(гСтрПуть, гИмяФайла);

гПутьОбъекта_ДаннаяОбработка	=	гСтрПуть + гИмяФайла;
Если ПустоеЗначение(гПутьОбъекта_ДаннаяОбработка) = 1 Тогда
	гПутьОбъекта_ДаннаяОбработка =	"Обработка.ЗагрузкаДанных";
КонецЕсли;

//--------------------------------------------------------------------------------------------------

СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);

гПутьОбъекта_КомпонентаV7plus			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);

//--------------------------------------------------------------------------------------------------

ФормИмяФайлаДанных						=	КаталогПользователя()	+	"CDData.xml";
КоличествоОбъектовНаТранзакцию 				=	100;		//	на одну транзакцию
Восстанавливать							=	0;
ФормФлОчищатьБазу						=	1;
ФормФлРежимОтладки						=	0;        
ЗапоминатьЗагруженныеОбъекты            =   1;

СписокОшибок = СоздатьОбъект("СписокЗначений");