
// строка поиска
Перем мСтрокаПоиска;
// строка по которой ограничиваем поиск
Перем мСтрокаДляОграничения;
// число по которому ищем
Перем мЧислоДляОграничения;
// хранит точность округления для поиска по числу
Перем мТочностьОкругления;
// хранит число знаков после запятой для точности ограничения по числу
Перем мЧислоЗнаковПослеЗапятойПриОграниченийПоЧислу;

// Индикатор прогресса
Перем мФормаПрогрессора Экспорт;


// храни тип Строка
Перем мТипСтрока;
// храни тип число
Перем мТипЧисло;
// хранит все ссылки справочников
Перем мВсеСсылкиСправочников;
// хранит все ссылки ПВХ
Перем мВсеСсылкиПлановВидовХарактеристик;
// хранит все ссылки перечислений
Перем мВсеСсылкиПеречислений;



Перем мУникальныйНомер;
Перем мНеОграничиватьКоличествоОбъектовПоиска;

// процедура выделяет строку начала и окончания по разделителю
Процедура ВыделитьСтрокиПоРазделителю(Знач ИсходнаяСтрока, СтрокаРазделитель, СтрокаНачала, СтрокаКонца) Экспорт
	
	ПозицияРазделителя = Найти(ИсходнаяСтрока, СтрокаРазделитель);
	Если ПозицияРазделителя = 0 Тогда
		СтрокаНачала = ИсходнаяСтрока;
		СтрокаКонца = "";
	Иначе
		СтрокаНачала = Лев(ИсходнаяСтрока, ПозицияРазделителя - 1);
		СтрокаКонца = Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - ПозицияРазделителя - ( СтрДлина(СтрокаРазделитель) - 1));
	КонецЕсли
	
КонецПроцедуры

// функция по имени типа объекта и по имени самого объекта возвращает метаданные объекта
Функция ПолучитьМетаданныеОбъекта(Знач ИмяТипаОбъекта, Знач ИмяОбъекта) Экспорт
	
	ВрегИмяТипаОбъекта = Врег(ИмяТипаОбъекта); 
	
	Если ВрегИмяТипаОбъекта = "РЕГИСТРСВЕДЕНИЙ" Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип("РЕГИСТРСВЕДЕНИЙНаборЗаписей." +  ИмяОбъекта));
	Иначе
		
	    // тут могут быть и табличные части, это надо отдельно отрабатывать...
		ПозицияТочки = Найти(ИмяОбъекта, ".");
		// точка есть - значит точно табличная часть
		Если ПозицияТочки > 0 Тогда
			ПрефиксПоиска = "ТабличнаяЧасть";
			СтрокаТипаОбъекта = "";
			СтрокаИмениОбъекта = "";
			ВыделитьСтрокиПоРазделителю(ИмяОбъекта, ".", СтрокаТипаОбъекта, СтрокаИмениОбъекта);
			ИмяОбъектаПоиска = СтрокаТипаОбъекта + ".ТабличныеЧасти." + СтрокаИмениОбъекта; 	
		Иначе
			ПрефиксПоиска = "Ссылка";
			ИмяОбъектаПоиска = ИмяОбъекта;
		КонецЕсли;
		
		Если ВрегИмяТипаОбъекта = "СПРАВОЧНИКИ" Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип("Справочник" + ПрефиксПоиска + "." +  ИмяОбъекта));
		ИначеЕсли ВрегИмяТипаОбъекта = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип("ПланВидовХарактеристик" + ПрефиксПоиска + "." +  ИмяОбъекта));
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат МетаданныеОбъекта;
	
КонецФункции

// Функция определяет номер типа ограничения
Функция ОпределитьНомерТипаОграничения(ТипДанных) Экспорт
	
	// анализируем с какими полями мы имеем дело
	// мы можем организовать поиск только по числу, строке, ссылке на справочник, ПВХ, перечисление и все
	Если ТипДанных = мТипСтрока	ИЛИ ТипДанных = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
		
		Возврат 1;		
				
	ИначеЕсли ТипДанных = мТипЧисло ИЛИ ТипДанных = Метаданные.СвойстваОбъектов.ТипКодаСправочника.ЧИСЛО Тогда
		
		Возврат 2;
	
	ИначеЕсли мВсеСсылкиСправочников.СодержитТип(ТипДанных) Тогда
		
		Возврат 3;
		
	ИначеЕсли мВсеСсылкиПлановВидовХарактеристик.СодержитТип(ТипДанных) Тогда
		
		Возврат 4;
		
	ИначеЕсли мВсеСсылкиПеречислений.СодержитТип(ТипДанных) Тогда
		
		Возврат 5;
		
	КонецЕсли;

	Возврат -1;
	
КонецФункции

// функция определяет можем ли мы по данному типу организовать поиск по строке или нет
Функция ОпределитьМожноОрганизоватьПоискПоСтроке(Типы) Экспорт
	
	Для Каждого ТипПоля Из Типы Цикл
		
		НомерТипаОграничения = ОпределитьНомерТипаОграничения(ТипПоля);
		Если НомерТипаОграничения > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// функция определяет можно ли наложить ограничения на все допустимые типы колонки
Функция ОпределитьВозможностьОграниченияПоВсемТипам(Типы) Экспорт
	
	Если ТипЗнч(Типы) <> Тип("Массив") Тогда
		
		НомерТипаОграничения = ОпределитьНомерТипаОграничения(Типы);
		Возврат (НомерТипаОграничения > 0);
	    		
	КонецЕсли;
	
	Для Каждого ТипПоля Из Типы Цикл
		
		НомерТипаОграничения = ОпределитьНомерТипаОграничения(ТипПоля);
		Если НомерТипаОграничения = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


// Процедура заполняет список значений именами полей
Процедура ЗаполнитьСписокПолейПоОбъекту(СписокЗначенийПолей, ОбъектПолей) Экспорт
	
	Для Каждого Реквизит Из ОбъектПолей Цикл
		
		ТипыДанных = Реквизит.Тип.Типы();
		// нас не все поля интересуют а только те по типам которых мы умеем искать данные
		МожемОрганизоватьПоиск = ОпределитьМожноОрганизоватьПоискПоСтроке(ТипыДанных);
		
		Если МожемОрганизоватьПоиск Тогда 
			
			СтрокаПоля = СписокЗначенийПолей.Добавить();
			СтрокаПоля.Значение = ВРЕГ(Реквизит.Имя);
			СтрокаПоля.Представление = Реквизит.Синоним;
			СтрокаПоля.ТипПоля = ТипыДанных;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// функция по метаданным объекта возвращает список полей этого объекта
Функция ВернутьСписокПолейОбъекта(СтрокаТипаОбъекта, СтрокаИмениОбъекта, МетаданныеОбъекта) Экспорт
	
	СписокЗначенийПолей = Новый ТаблицаЗначений();
	СписокЗначенийПолей.Колонки.Добавить("Значение", , "Значение", 60);
	СписокЗначенийПолей.Колонки.Добавить("Представление", , "Представление", 60);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Булево"));
	СписокЗначенийПолей.Колонки.Добавить("Пометка", Новый ОписаниеТипов(МассивТипов), "Представление", 60);
	СписокЗначенийПолей.Колонки.Добавить("ТипПоля", , "ТипПоля", 60);
		
	
	Если ВРЕГ(СтрокаТипаОбъекта) = "СПРАВОЧНИКИ" 
		ИЛИ ВРЕГ(СтрокаТипаОбъекта) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		
		// могут быть еще и табличные части
		ПозицияТочки = Найти(СтрокаИмениОбъекта, ".");
		
		Если ПозицияТочки = 0 Тогда
			
			// код и наименование надо добавить
			Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
				
				СтрокаПоля = СписокЗначенийПолей.Добавить();
				СтрокаПоля.Значение = "КОД";
				СтрокаПоля.Представление = "КОД";
				
				// для справочника тип кода не обязательно строка
				Если ВРЕГ(СтрокаТипаОбъекта) = "СПРАВОЧНИКИ" Тогда
					МассивТипов = Новый Массив();
					МассивТипов.Добавить(МетаданныеОбъекта.ТипКода);
					СтрокаПоля.ТипПоля = МассивТипов;
				Иначе
					// для ПВХ тип кода - это строка
					МассивТипов.Добавить(мТипСтрока);
				КонецЕсли;
				
			КонецЕсли;

			Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
				
				СтрокаПоля = СписокЗначенийПолей.Добавить();
				СтрокаПоля.Значение = "НАИМЕНОВАНИЕ";
				СтрокаПоля.Представление = "Наименование";
				МассивТипов = Новый Массив();
				МассивТипов.Добавить(мТипСтрока);
				СтрокаПоля.ТипПоля = МассивТипов;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСписокПолейПоОбъекту(СписокЗначенийПолей, МетаданныеОбъекта.Реквизиты); 	
		
	ИначеЕсли ВРЕГ(СтрокаТипаОбъекта) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		
		ЗаполнитьСписокПолейПоОбъекту(СписокЗначенийПолей, МетаданныеОбъекта.Измерения);
		ЗаполнитьСписокПолейПоОбъекту(СписокЗначенийПолей, МетаданныеОбъекта.Ресурсы);
		ЗаполнитьСписокПолейПоОбъекту(СписокЗначенийПолей, МетаданныеОбъекта.Реквизиты);
		
	КонецЕсли;	
	
	Возврат СписокЗначенийПолей;
	
КонецФункции

// функция возвращает полное имя объекта по его имени
Функция ПолучитьПолноеИмяОбъекта(ИмяОбъекта, СинонимТаблицы) Экспорт
	
	Если ИмяОбъекта = "" Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаТипаОбъекта = "";
	СтрокаИмениОбъекта = "";
	ВыделитьСтрокиПоРазделителю(ИмяОбъекта, ".", СтрокаТипаОбъекта, СтрокаИмениОбъекта);
	МетаданныеОбъекта = ПолучитьМетаданныеОбъекта(СтрокаТипаОбъекта, СтрокаИмениОбъекта);
	
	// для периодического регистра сведений необходимо брать срез последних данных
	Если ВРЕГ(СтрокаТипаОбъекта) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ТаблицаОбъекта = МетаданныеОбъекта.ПолноеИмя();	
		Иначе
			ТаблицаОбъекта = МетаданныеОбъекта.ПолноеИмя() + ".СрезПоследних()";
		КонецЕсли;
		
	Иначе
		ТаблицаОбъекта = МетаданныеОбъекта.ПолноеИмя();
	КонецЕсли;

	СинонимТаблицы = МетаданныеОбъекта.Представление(); 
    Возврат ТаблицаОбъекта;
	
КонецФункции

// функция добавляет новый объект для поиска в дерево
Функция ДобавитьНовыйОбъектПоискаВДерево(Дерево, ИмяОбъектаПоиска, ИмяПользовательскоеОписаниеТаблицыПоиска) Экспорт
	
	СтрокаПредка = Дерево.Строки.Добавить();
	СтрокаПредка.ИмяОбъекта = ИмяОбъектаПоиска;
	
	СинонимТаблицы = "";
	ТаблицаОбъекта = ПолучитьПолноеИмяОбъекта(ИмяОбъектаПоиска, СинонимТаблицы);
	СтрокаПредка.ТаблицаПоиска = ТаблицаОбъекта;
	СтрокаПредка.УникальноеИмяТаблицы = СформироватьУникальноеИмяТаблицы(ТаблицаОбъекта);   
	
	Если ПустаяСтрока(ИмяПользовательскоеОписаниеТаблицыПоиска) Тогда
		СтрокаПредка.ОписаниеТаблицыПоиска = СинонимТаблицы;
	Иначе
		СтрокаПредка.ОписаниеТаблицыПоиска = ИмяПользовательскоеОписаниеТаблицыПоиска;
	КонецЕсли;
			
	СтрокаПредка.ТипОбъектаПоиска = Тип(СтрЗаменить(ТаблицаОбъекта, "Справочник.", "СправочникСсылка."));
	
	Возврат СтрокаПредка;
	
КонецФункции

// Функция находит строку в дереве по таблице поиска и полю связки
Функция НайтиСтрокуДереваПоТаблицеПоискаИПолюСвязки(Дерево, Знач ТаблицаОбъекта, Знач ИмяПолеСвязки) Экспорт
	
	СтруктураПоискаСтрокиПредка = Новый Структура();
	СтруктураПоискаСтрокиПредка.Вставить("ТаблицаПоиска", ТаблицаОбъекта);
	СтруктураПоискаСтрокиПредка.Вставить("ПолеСвязки", ИмяПолеСвязки);
       
	МассивСтрокПредкаДанных = Дерево.Строки.НайтиСтроки(СтруктураПоискаСтрокиПредка, Ложь);
	Если (МассивСтрокПредкаДанных.Количество() = 0) Тогда
		СтрокаПредкаДанных = Неопределено;
	Иначе
		СтрокаПредкаДанных = МассивСтрокПредкаДанных[0];
	КонецЕсли;

	Возврат СтрокаПредкаДанных;

КонецФункции

// функция добавляет новую строку с областью поиска в дерево
Функция ДобавитьНовуюОбластьПоискаВДерево(СтрокаПредка, ИмяТаблицаПоиска, ИмяПолеПоиска, ИмяПолеСвязки, ИмяПользовательскоеОписаниеТаблицыПоиска) Экспорт
				
	// а есть ли права для работы с таблицей
	СтрокаТипаОбъекта = "";
	СтрокаИмениОбъекта = "";
	ВыделитьСтрокиПоРазделителю(ИмяТаблицаПоиска, ".", СтрокаТипаОбъекта, СтрокаИмениОбъекта);
	МетаданныеОбъекта = ПолучитьМетаданныеОбъекта(СтрокаТипаОбъекта, СтрокаИмениОбъекта);

	// определим есть ли у пользователя права на чтение данных из таблицы
	НаличиеПраваЧтения = ПравоДоступа("Чтение", МетаданныеОбъекта);
	Если НЕ НаличиеПраваЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СинонимТаблицы = "";
	ТаблицаОбъекта = ПолучитьПолноеИмяОбъекта(ИмяТаблицаПоиска, СинонимТаблицы);
			
	// табличная часть в имени таблицы нам не нужна
	ТаблицаОбъекта = СтрЗаменить(ТаблицаОбъекта, ".ТабличнаяЧасть", "");
	
	СтрокаПредкаДанных = НайтиСтрокуДереваПоТаблицеПоискаИПолюСвязки(СтрокаПредка, ТаблицаОбъекта, ИмяПолеСвязки);
			
	Если СтрокаПредкаДанных = Неопределено Тогда
		
		СтрокаПредкаДанных = СтрокаПредка.Строки.Добавить();
		// нулем выделяем основную таблицу поиска, а все остальные единицей помечаем
		СтрокаПредкаДанных.ИмяОбъекта = ?(ТаблицаОбъекта = СтрокаПредка.ТаблицаПоиска, 0, 1);
		СтрокаПредкаДанных.ТаблицаПоиска = ТаблицаОбъекта;
		СтрокаПредкаДанных.УникальноеИмяТаблицы = СформироватьУникальноеИмяТаблицы(ТаблицаОбъекта);

		СтрокаПредкаДанных.ПолеСвязки = ИмяПолеСвязки;
			
		Если ПустаяСтрока(ИмяПользовательскоеОписаниеТаблицыПоиска) Тогда
			СтрокаПредкаДанных.ОписаниеТаблицыПоиска = СинонимТаблицы;
		Иначе
			СтрокаПредкаДанных.ОписаниеТаблицыПоиска = ИмяПользовательскоеОписаниеТаблицыПоиска;
		КонецЕсли;
			
		СписокПолейОбъекта = ВернутьСписокПолейОбъекта(СтрокаТипаОбъекта, СтрокаИмениОбъекта, МетаданныеОбъекта);
		СтрокаПредкаДанных.СписокПолей = СписокПолейОбъекта;
		СтрокаПредкаДанных.Пометка = Истина;
		
	КонецЕсли;
		
	// ищем нужную строку в списке полей и отмечаем ее
	СписокПолейОбъекта = СтрокаПредкаДанных.СписокПолей;
	СтрокаПоля = СписокПолейОбъекта.Найти(ВРег(ИмяПолеПоиска), "Значение");
	Если СтрокаПоля <> Неопределено Тогда
		СтрокаПоля.Пометка = Истина;	
	КонецЕсли;
	
	Возврат СтрокаПредкаДанных;
	
КонецФункции

// Функция загружает в дерево поиска данные
// Возвращаемые параметры
//		РезультатаЗагрузки - булево. Удачно или нет произошла загрузка данных макета
Функция ЗагрузитьДеревоПоискаИзМакета(ДеревоПоискаДляОбъектов) Экспорт
	
	ДеревоПоискаДляОбъектов.Строки.Очистить();
	
	МакетДанных = ПолучитьМакет("ФорматПоиска");
	
	СтрокаПредка = Неопределено;
		
	ВсегоЗаписей = МакетДанных.ВысотаТаблицы - 1;
	Для Сч = 2 По МакетДанных.ВысотаТаблицы Цикл
		
		// если все интересующие нас колонки пустые, то эту строку не обрабатываем
		ИмяОбъектаПоиска = СокрЛП(МакетДанных.Область(Сч, 1, Сч, 1).Текст);
		ИмяТаблицаПоиска = СокрЛП(МакетДанных.Область(Сч, 2, Сч, 2).Текст);
		ИмяПользовательскоеОписаниеТаблицыПоиска = СокрЛП(МакетДанных.Область(Сч, 3, Сч, 3).Текст);
		ИмяПолеПоиска = СокрЛП(МакетДанных.Область(Сч, 4, Сч, 4).Текст);
		ИмяПолеСвязки = Врег(СокрЛП(МакетДанных.Область(Сч, 5, Сч, 5).Текст));
		
		// если ни имя поля поиска ни имя объекта поиска не задано ни таблицы поиска, то и смотреть то нечего - пропускаем строку
		Если НЕ ЗначениеЗаполнено(ИмяОбъектаПоиска) И НЕ ЗначениеЗаполнено(ИмяПолеПоиска) И НЕ ЗначениеЗаполнено(ИмяТаблицаПоиска) Тогда
			Продолжить;	
		КонецЕсли;
		
		// задано имя таблицы - значит это описание объекта
		Если ЗначениеЗаполнено(ИмяОбъектаПоиска) Тогда
			
			СтрокаПредка = ДобавитьНовыйОбъектПоискаВДерево(ДеревоПоискаДляОбъектов, ИмяОбъектаПоиска, ИмяПользовательскоеОписаниеТаблицыПоиска);			
			Продолжить;
			
		КонецЕсли;
		
		// если это описание поля ограничений, то найдем для него предка или создадим
		Если ИмяТаблицаПоиска = "" Тогда
			ИмяТаблицаПоиска = СтрокаПредка.ИмяОбъекта;	
		КонецЕсли;	
		
		СтрокаДерева = ДобавитьНовуюОбластьПоискаВДерево(СтрокаПредка, ИмяТаблицаПоиска, ИмяПолеПоиска, ИмяПолеСвязки, ИмяПользовательскоеОписаниеТаблицыПоиска);
								
	КонецЦикла;
	
	// если в дереве строк нет вообще то и делать то нечего
	Если ДеревоПоискаДляОбъектов.Строки.Количество() = 0 Тогда
		
		#Если Клиент Тогда
		Предупреждение("Нет ни одного объекта данных по которому поиск поддержан.");
		#КонецЕсли
	
		Возврат Ложь;
	Иначе
		
		// сортируем строки дерево по ИмениОбъекта и ТаблицаПоиска
		ДеревоПоискаДляОбъектов.Строки.Сортировать("ИмяОбъекта,ТаблицаПоиска", Истина); 

	КонецЕсли;
	
	Возврат Истина;
        
КонецФункции

// функция генерирует по таблице уникальное имя в запросе
Функция ПолучитьУникальноеИмяЗапроса(ИмяТаблицы)
	
	мУникальныйНомер = мУникальныйНомер + 1;
	Возврат ИмяТаблицы + "УникальноеИмя" + Строка(мУникальныйНомер);
	
КонецФункции

//Функция возвращает имя таблицы для Запроса
Функция СформироватьУникальноеИмяТаблицы(Знач ПолноеИмяТаблицы)
	
	ЗаголовокНачала = "";
	СтрокаНачала = "";
	СтрокаКонца = ПолноеИмяТаблицы;
		
	Пока СтрокаКонца <> "" Цикл
		
		ПредыдущееНачалоСтроки = СтрокаНачала;
		ТекущееИмяТаблицы = СтрокаКонца;
		ВыделитьСтрокиПоРазделителю(ТекущееИмяТаблицы, ".", СтрокаНачала, СтрокаКонца);
		
		Если ЗаголовокНачала = "" Тогда
			ЗаголовокНачала = СтрокаНачала;
		КонецЕсли;
		
	КонецЦикла;
	
	// для регистра сведений может быть СрезПоследних()
	Если Найти(СтрокаНачала, "(") > 0 Тогда
		СтрокаНачала = ЗаголовокНачала + ПредыдущееНачалоСтроки;
	КонецЕсли;
	
	Возврат ПолучитьУникальноеИмяЗапроса(ЗаголовокНачала + СтрокаНачала);
	
КонецФункции

// функция возвращает строку ограничения
Функция ВернутьСтрокуОграниченияСГлавнойТаблицейВыборки(ИмяТекущейТаблицы, ПолеТекущейТаблицы, БазоваяТаблицаПоиска)
	
	Если ПустаяСтрока(ИмяТекущейТаблицы) ИЛИ (ПустаяСтрока(ПолеТекущейТаблицы) И (БазоваяТаблицаПоиска <> Неопределено)) Тогда
		Возврат "";
	КонецЕсли;
	
	Если БазоваяТаблицаПоиска <> Неопределено Тогда
		
		// Если базовая таблица ограничений не задана, то ограничение не составить
		Если ПустаяСтрока(БазоваяТаблицаПоиска)
			ИЛИ ПустаяСтрока(ПолеТекущейТаблицы) Тогда
			Возврат "";	
		КонецЕсли;
		
		Возврат "
			| (" + ИмяТекущейТаблицы + "." + ПолеТекущейТаблицы + " ССЫЛКА " + БазоваяТаблицаПоиска + ")";
			
	Иначе
		
		Если ПустаяСтрока(ПолеТекущейТаблицы) Тогда
			СтрокаПоляТекущейТаблицы = "Ссылка";
		Иначе
			СтрокаПоляТекущейТаблицы = ПолеТекущейТаблицы;
		КонецЕсли;
		
		Возврат "
			| (" + ИмяТекущейТаблицы + "." + СтрокаПоляТекущейТаблицы + " В (&СписокСсылокОграничений) )";
		
	КонецЕсли;
	
КонецФункции

// функция формирует для выбора строку из ключевых полей
Функция СформироватьКлючевыеПоляДляЗапроса(ТаблицаПоиска, УникальноеИмяТаблицы)
	
	ПоляДляВыборки = "";
	Если ТаблицаПоиска = "" Тогда
		Возврат ПоляДляВыборки;
	КонецЕсли;
	
	СтрокаТипаОбъекта = "";
	СтрокаИмениОбъекта = "";
	ВыделитьСтрокиПоРазделителю(ТаблицаПоиска, ".", СтрокаТипаОбъекта, СтрокаИмениОбъекта);
		
	Если Врег(СтрокаТипаОбъекта) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		
		СтрокаИмениОбъекта = ПолучитьИсходноеИмяРегистра(СтрокаИмениОбъекта);
		
		Регистр = РегистрыСведений[СтрокаИмениОбъекта].СоздатьНаборЗаписей().Метаданные();
		
		СписокПолейКлюча = ПолучитьСписокКолонокРегистраКлючаЗаписи(Регистр);
		
		// пробегаем все реквизиты, измерения и ресурсы и все поля в допустимые для ограничений добавляем
		Для Каждого Колонка Из СписокПолейКлюча Цикл
			
			Если ПоляДляВыборки <> "" Тогда
				ПоляДляВыборки = ПоляДляВыборки + "," + Символы.ПС;
			КонецЕсли;
			
			ПоляДляВыборки = ПоляДляВыборки + УникальноеИмяТаблицы + "." + Колонка.Значение  + " "	;
		КонецЦикла;
								
	Иначе
		// получим имя таблицы, что бы оно нормально выглядело для пользователя
		ПоляДляВыборки = УникальноеИмяТаблицы + ".Ссылка ";
		
	КонецЕсли;
	
	Если ПоляДляВыборки <> "" Тогда
		ПоляДляВыборки = "," + Символы.ПС + ПоляДляВыборки;
	КонецЕсли;

	Возврат ПоляДляВыборки;
	
КонецФункции

// функция по имени таблицы и полю поиска формирует начало запроса для выборки данных
Функция СформироватьНачалоЗапроса(Знач ТаблицаПоиска, Знач ИмяПоляВозврата, Знач НужноРазрешенные, Знач КоличествоСтрокДляВыбора, 
		Знач УникальноеИмяТаблицы, Знач ИмяПоляПоискаДанныхДляПользователя = Неопределено, Знач ИмяПоляПоиска = Неопределено,
		Знач РасширенныйПоиск = Истина)
	
	СтрокаИмяПоляПоиска =?(НЕ ЗначениеЗаполнено(ИмяПоляВозврата), "Ссылка", ИмяПоляВозврата); 
	СтрокаИмениПоляПоиска = ?(НЕ ЗначениеЗаполнено(ИмяПоляПоискаДанныхДляПользователя), "Выразить ( """" Как Строка(100)) КАК ИМЯПОЛЯПОИСКА", "Выразить(""" + ИмяПоляПоискаДанныхДляПользователя + """ Как Строка(100)) КАК ИМЯПОЛЯПОИСКА");
	СтрокаЗначениеПоляПоиска = ?(НЕ ЗначениеЗаполнено(ИмяПоляПоиска), "", ", Представление(" + УникальноеИмяТаблицы + "." + ИмяПоляПоиска + ") КАК ПредставлениеНайденногоЗначения");
	СтрокаВыбораРазличных = ?(НЕ ЗначениеЗаполнено(ИмяПоляПоиска) ИЛИ НЕ РасширенныйПоиск, " РАЗЛИЧНЫЕ ", "");
	
	НачалоЗапроса = ?(НужноРазрешенные, "ВЫБРАТЬ " + СтрокаВыбораРазличных + " РАЗРЕШЕННЫЕ  ", 
			Символы.ПС + " ОБЪЕДИНИТЬ " + Символы.ПС + " ВЫБРАТЬ " + СтрокаВыбораРазличных );
			
	СтрокаКлючевыхПолей =  СформироватьКлючевыеПоляДляЗапроса(ТаблицаПоиска, УникальноеИмяТаблицы);

	НачалоЗапроса = ?(КоличествоСтрокДляВыбора = 0, НачалоЗапроса, 
		НачалоЗапроса + " Первые " + СтрЗаменить(Строка(КоличествоСтрокДляВыбора), Символы.НПП, "") + " ");
		
		
	ДополнительныеПоляВыборки = ?(РасширенныйПоиск,
	",
		| " + СтрокаИмениПоляПоиска + "
		| " + СтрокаЗначениеПоляПоиска + "
		| " + СтрокаКлючевыхПолей + "
		| ", 	"");
	
	НачалоЗапроса = НачалоЗапроса + Символы.ПС + 
		УникальноеИмяТаблицы + "." + СтрокаИмяПоляПоиска + " КАК УникальныйОбъектПоиска 
		| " + ДополнительныеПоляВыборки + "
		| 
		| ИЗ 
		| " + ТаблицаПоиска + " КАК " + УникальноеИмяТаблицы + "
		|
		| ";
		
	Возврат НачалоЗапроса;
	
КонецФункции

// функция находит все ссылки перечисления удовлетворяющие условиям ограничений по строке
Функция НайтиВсеСсылкиДляПеречисления(ОбъектПеречисление, СтрокаПоиска)
	
	РезультирующийМассивСсылок = Новый Массив();
	ВрегСтрокаПоиска = Врег(СтрокаПоиска); 
	
	Для Каждого ОчередноеПеречисление Из ОбъектПеречисление Цикл
		
		ПозицияНахождения = Найти(ВРЕГ(Строка(ОчередноеПеречисление)), ВрегСтрокаПоиска);
		Если ПозицияНахождения > 0 Тогда
			РезультирующийМассивСсылок.Добавить(ОчередноеПеречисление);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультирующийМассивСсылок; 
	
КонецФункции

// Функция формирует ограничение по числовому полю
Функция СформироватьОграничениеПоЧисловомуПолю(ИмяПоля, СоставнойТипПоля = Ложь, СтрокаДополнительногоОграничения = "")
	
	ДополнительноеОграничение = ?(Пустаястрока(СтрокаДополнительногоОграничения), "", "(" + СтрокаДополнительногоОграничения + ") И ");
	
	// если по числу задано ограничение, то ограничиваем, иначе Ложь возвращаем
	Если мЧислоДляОграничения <> Неопределено Тогда
		
		СтрокаИмяПоля = ?(СоставнойТипПоля, " Выразить (" + ИмяПоля + " Как Число) ", ИмяПоля);
		
		СтрокаПриведения = " КАК Число(32, " + Строка(мЧислоЗнаковПослеЗапятойПриОграниченийПоЧислу) + ")";
		СтокаТочностиОкругления = СтрЗаменить(Строка(мТочностьОкругления), Символы.НПП, "");
		СтокаТочностиОкругления = СтрЗаменить(СтокаТОчностиОкругления, ",", ".");
						
		Ограничение = "	
		|Когда " + ДополнительноеОграничение + " ( НЕ(Выразить (" + ИмяПоля + "  КАК Число) Есть NULL) И " + ИмяПоля + " >= 0 ) Тогда 
	    |
	   	|		Выразить (" + СтрокаИмяПоля + " - " + СтокаТочностиОкругления + СтрокаПриведения + ") = Выразить ( &ТекстАвтоПодбораЧисло " + СтрокаПриведения + ") 
	   	|
		|Когда " + ДополнительноеОграничение + " ( НЕ(Выразить (" + ИмяПоля + "  КАК Число) Есть NULL) И " + ИмяПоля + " < 0 ) Тогда 
	    |
	   	|		Выразить (" + СтрокаИмяПоля + " + " + СтокаТочностиОкругления + СтрокаПриведения + ") = Выразить ( &ТекстАвтоПодбораЧисло " + СтрокаПриведения + ") 
	    | 
		| ";

	Иначе
		
		Ограничение = "
		|Когда " + ДополнительноеОграничение + " ( НЕ(Выразить (" + ИмяПоля + "  КАК Число) Есть NULL) И " + ИмяПоля + " >= 0 ) Тогда 
		|	Ложь
		| ";
		
	КонецЕсли;
	
	Возврат Ограничение;
	
КонецФункции

//Функция формирует ограничение по строковому полю
Функция СформироватьОграничениеПоСтроковомуПолю(ИмяПоля)
	
	Ограничение = "
				|	(" + ИмяПоля + "  ПОДОБНО &ТекстАвтоПодбора + " + """""" + " СПЕЦСИМВОЛ " + " ""~"" )";
				
	Возврат Ограничение;			
	
КонецФункции

// функция формирует условия ограничений одной таблицы к другой
Функция СформироватьСтрокуСоединенияТаблиц(УникальноеИмяТаблицыЗапроса, ИмяПоляПоиска, ТаблицаПрисоединения, УникальноеИмяТаблицыПрисоединения)
	
	УникальноеИмяТаблицыПрисоединения = ПолучитьУникальноеИмяЗапроса("Справочник" + ТаблицаПрисоединения); 
	
	Возврат "Левое соединение Справочник." + ТаблицаПрисоединения + " КАК " + УникальноеИмяТаблицыПрисоединения + " ПО (" 
		+ УникальноеИмяТаблицыЗапроса + "." + ИмяПоляПоиска + " = " + УникальноеИмяТаблицыПрисоединения + ".Ссылка)";
		
КонецФункции
	
// функция формирует строку ограничений для одного конкретного типа
Функция СформироватьОграничениеПоТипу(ИмяПоляПоиска, УникальноеИмяТаблицыЗапроса, ТипПоля, ФормироватьСложноеОграничениеПоПолю, 
			Построитель, СтрокаСоединения, ИмяОсновнойТаблицыПоискаДляОграничений = Неопределено)
	
	Ограничение = "";
	УсловиеОграничения = "";
	СтрокаСоединения = "";
	ИмяПоляОграничений = УникальноеИмяТаблицыЗапроса + "." + ИмяПоляПоиска;
	
	
	НомерОграничения = ОпределитьНомерТипаОграничения(ТипПоля);
	
	// анализируем с какими полями мы имеем дело
	Если НомерОграничения = 1 Тогда
		
		// код у справочников не имеет тип ни строка ни число
		ИмяПоляОграничений = ?(ФормироватьСложноеОграничениеПоПолю И (ТипПоля = мТипСтрока), 
				"Выразить (" + ИмяПоляОграничений + " Как СТРОКА )", ИмяПоляОграничений);
		
		Ограничение = СформироватьОграничениеПоСтроковомуПолю(ИмяПоляОграничений);
				
		УсловиеОграничения = "НЕ (" + ИмяПоляОграничений + " ЕСТЬ NULL) ";		
				
	ИначеЕсли НомерОграничения = 2 Тогда
		
		// с числом ограничение не обычное
		ФормироватьВнутренниеПриведениеКЧислу = ?(ТипПоля = Метаданные.СвойстваОбъектов.ТипКодаСправочника.ЧИСЛО, Ложь, ФормироватьСложноеОграничениеПоПолю);
		Ограничение = СформироватьОграничениеПоЧисловомуПолю(ИмяПоляОграничений, ФормироватьВнутренниеПриведениеКЧислу);
		Возврат Ограничение;
		
	// если тип есть ссылка на справочник, то надо проанализировать что является представлением справочника и по этому полю и ограничить
	ИначеЕсли НомерОграничения = 3 Тогда
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипПоля);
		ИмяТаблицыСправочникаОграничений = "Справочник." + МетаданныеСправочника.Имя;
		
		Если ИмяОсновнойТаблицыПоискаДляОграничений <> Неопределено Тогда
			
			Если Врег(ИмяТаблицыСправочникаОграничений) <> Врег(ИмяОсновнойТаблицыПоискаДляОграничений) Тогда
				// ограничение должны быть только по основной таблице
				Возврат "";
			КонецЕсли;
				
		КонецЕсли;
		
		УсловиеОграничения = ИмяПоляОграничений + " Ссылка " + ИмяТаблицыСправочникаОграничений;
		
		// надо нужный справочник присоединить
		УникальноеИмяТаблицыПрисоединения = "";
        СтрокаСоединения = СформироватьСтрокуСоединенияТаблиц(УникальноеИмяТаблицыЗапроса, ИмяПоляПоиска, 
				МетаданныеСправочника.Имя, УникальноеИмяТаблицыПрисоединения);
		
		// какое основное представление
		Если МетаданныеСправочника.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
			
			// а есть ли код у справочника то?
			Если МетаданныеСправочника.ДлинаКода = 0 Тогда
				Возврат "";
			КонецЕсли;
					
			// а код то и не обязательно всегда строка, может быть и число
			Если  МетаданныеСправочника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				
				Ограничение = СформироватьОграничениеПоСтроковомуПолю(УникальноеИмяТаблицыПрисоединения + ".Код");
					
			Иначе
				
				// ограничение накладываем на присоединенный справочник
				Ограничение = СформироватьОграничениеПоЧисловомуПолю(УникальноеИмяТаблицыПрисоединения + ".Код", Ложь, УсловиеОграничения);
				Возврат Ограничение;
						
			КонецЕсли;
		Иначе
			// а может и наименования то нет
			Если МетаданныеСправочника.ДлинаНаименования = 0 Тогда
				Возврат "";
			КонецЕсли;
			
			Ограничение = СформироватьОграничениеПоСтроковомуПолю(УникальноеИмяТаблицыПрисоединения + ".Наименование");
			
		КонецЕсли;
						
	// если тип есть ссылка на ПланВидовХарактеристик, то надо проанализировать что является представлением и по этому полю и ограничить
	ИначеЕсли НомерОграничения = 4 Тогда
		
		МетаданныеПВХ = Метаданные.НайтиПоТипу(ТипПоля);
		// какое основное представление
		Если МетаданныеПВХ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
			
			Если МетаданныеПВХ.ДлинаКода = 0 Тогда
				Возврат "";
			КонецЕсли;
			
			Ограничение = СформироватьОграничениеПоСтроковомуПолю(ИмяПоляОграничений + ".Код");
	
		Иначе
			
			// а может и наименования то нет
			Если МетаданныеПВХ.ДлинаНаименования = 0 Тогда
				Возврат "";
			КонецЕсли;
			
			Ограничение = СформироватьОграничениеПоСтроковомуПолю(ИмяПоляОграничений + ".Наименование");
	
		КонецЕсли;
			
		УсловиеОграничения = ИмяПоляОграничений + " Ссылка ПланВидовХарактеристик." + МетаданныеПВХ.Имя;	
		
	// перечисления
	ИначеЕсли НомерОграничения = 5 Тогда
		
		МетаданныеПеречисления = Метаданные.НайтиПоТипу(ТипПоля);
		// ищем все перечисления удовлетворяющие условиям
		ТекущееПеречисление = Перечисления[МетаданныеПеречисления.Имя];
		МассивЗначенийПеречислений = НайтиВсеСсылкиДляПеречисления(ТекущееПеречисление, мСтрокаПоиска);
		
		ИмяПараметраОграничений = "СписокПараметровПеречисления" + МетаданныеПеречисления.Имя;
		УсловиеОграничения = ИмяПоляОграничений + " Ссылка Перечисление." + МетаданныеПеречисления.Имя;
		Если МассивЗначенийПеречислений.Количество() > 0 Тогда
			//есть по чему ограничить
			Построитель.Параметры.Вставить(ИмяПараметраОграничений, МассивЗначенийПеречислений);
			
			Ограничение = "
				|	(" + ИмяПоляОграничений + "  В (&"+ ИмяПараметраОграничений +") )";
			
		Иначе
			// искать не по чему
			Ограничение = "
				|	ЛОЖЬ";				
				
		КонецЕсли;
		
	Иначе
		// не к чему не подошло
		Возврат "";

	КонецЕсли;
	
	Если ФормироватьСложноеОграничениеПоПолю И НЕ ПустаяСтрока(Ограничение) Тогда
		
		Ограничение = "КОГДА " + УсловиеОграничения + " ТОГДА " + Символы.ПС + Ограничение;
				
	КонецЕсли;
	
	// если не смогли записать ограничение то пишем ЛОЖЬ
	Если НЕ ФормироватьСложноеОграничениеПоПолю И ПустаяСтрока(Ограничение) Тогда
		
		Ограничение = "ЛОЖЬ";
				
	КонецЕсли;
 	
	Возврат Ограничение;
	
КонецФункции

// функция возвращает ограничение по полю
Функция ВернутьСтрокуОграниченийДляПоля(ИмяПоляПоиска, УникальноеИмяТаблицыЗапроса, МассивТиповПоля, Построитель, 
		СтрокаДополнительногоСоединения, ИмяОсновнойТаблицыПоискаДляОграничений = Неопределено)
	
	СтрокаДополнительногоСоединения = "";
	Если МассивТиповПоля = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	// по числу всегда ограничение сложное
	МножествоТиповУПоля = (МассивТиповПоля.Количество() > 1);
	СложноеОграничениеПоПолю = МножествоТиповУПоля ИЛИ (МассивТиповПоля.Найти(мТипЧисло) <> Неопределено);
	Если СложноеОграничениеПоПолю Тогда
		ИтоговоеОграничение = "Выбор " + Символы.ПС;
	Иначе 
		ИтоговоеОграничение = "";
	КонецЕсли;
	
	Для Каждого ТипДанных Из МассивТиповПоля Цикл
		
		СтрокаТекущегоСоединения = "";
		ТекущееОграничение = СформироватьОграничениеПоТипу(ИмяПоляПоиска, УникальноеИмяТаблицыЗапроса, ТипДанных, 
				МножествоТиповУПоля, Построитель, СтрокаТекущегоСоединения, ИмяОсновнойТаблицыПоискаДляОграничений);
			
		Если НЕ ПустаяСтрока(ТекущееОграничение) Тогда
			ИтоговоеОграничение = ИтоговоеОграничение + Символы.ПС + ТекущееОграничение;
			
			Если НЕ ПустаяСтрока(СтрокаТекущегоСоединения) Тогда
				СтрокаДополнительногоСоединения = СтрокаДополнительногоСоединения + Символы.ПС + СтрокаТекущегоСоединения;
			КонецЕсли;

		КонецЕсли;
					
	КонецЦикла;
	
	Если СложноеОграничениеПоПолю Тогда
		ИтоговоеОграничение = ИтоговоеОграничение + Символы.ПС + "Иначе ЛОЖЬ Конец";
	КонецЕсли;

	Возврат ИтоговоеОграничение;
		
КонецФункции

// Функция возвращает имя регистра без части СрезПоследних()
Функция ПолучитьИсходноеИмяРегистра(Знач ИмяРегистра)
	
	ПозицияСкобки = Найти(ИмяРегистра, ".");
	Если ПозицияСкобки = 0 Тогда
		Возврат ИмяРегистра
	Иначе
		НазваниеРегистра = "";
		СтрокаДополнениеРегистра = "";
		ВыделитьСтрокиПоРазделителю(ИмяРегистра, ".", НазваниеРегистра, СтрокаДополнениеРегистра);
		
		Возврат НазваниеРегистра; 
	КонецЕсли;
	
КонецФункции

//Функция формирует строку что бы построитель отчета мог понимать как ограничивать по ней данные
Функция СформироватьСтрокуОграниченийДляПостроителяОтчетов(Знач ТаблицыПоиска, Знач УникальноеИмяТаблицы)
	
	Ограничения = "";
	Если ТаблицыПоиска = "" Тогда
		Возврат Ограничения;
	КонецЕсли;
	
	СтрокаТипаОбъекта = "";
	СтрокаИмениОбъекта = "";
	ВыделитьСтрокиПоРазделителю(ТаблицыПоиска, ".", СтрокаТипаОбъекта, СтрокаИмениОбъекта);
		
	Если Врег(СтрокаТипаОбъекта) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		
		СтрокаИмениОбъекта = ПолучитьИсходноеИмяРегистра(СтрокаИмениОбъекта);
		
		Регистр = РегистрыСведений[СтрокаИмениОбъекта].СоздатьНаборЗаписей().Метаданные();
		
		// пробегаем все реквизиты, измерения и ресурсы и все поля в допустимые для ограничений добавляем
		Для Каждого Колонка Из Регистр.Измерения Цикл
			Если Ограничения <> "" Тогда
				Ограничения = Ограничения + "," + Символы.ПС;
			КонецЕсли;
			Ограничения = Ограничения + УникальноеИмяТаблицы + "." + Колонка.Имя  + ".* ";
		КонецЦикла;
		
		Для Каждого Колонка Из Регистр.Ресурсы Цикл
			Ограничения = Ограничения + "," + Символы.ПС;
			Ограничения = Ограничения + УникальноеИмяТаблицы + "." + Колонка.Имя  + ".* ";
		КонецЦикла;
		
		Для Каждого Колонка Из Регистр.Реквизиты Цикл
			Ограничения = Ограничения + "," + Символы.ПС;
			Ограничения = Ограничения + УникальноеИмяТаблицы + "." + Колонка.Имя  + ".* ";
		КонецЦикла;
		
		Если Ограничения <> "" Тогда
			Ограничения = "ГДЕ " + Символы.ПС + Ограничения;
		КонецЕсли;
	
	Иначе
		// получим имя таблицы, что бы оно нормально выглядело для пользователя
		ПозицияУникальногоИмени = Найти(УникальноеИмяТаблицы, "УникальноеИмя");
		// все что после постфикса нас не интересует
		ИмяТаблицыДЛяПользователя = Сред(УникальноеИмяТаблицы, 1, ПозицияУникальногоИмени - 1);
		Ограничения = "ГДЕ " + УникальноеИмяТаблицы + ".Ссылка.* КАК " + ИмяТаблицыДЛяПользователя + " ";
		
	КонецЕсли;
	
	ОграничениеПостроителю = "{" + Ограничения + "}";
	Возврат ОграничениеПостроителю;
	
КонецФункции

//функция возвращает есть ли дополнительные ограничения в отборе
Функция ОпределитьНаличиеДопОграниченийВОтборе(ДополнительныеОтборы, Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	Если (ДополнительныеОтборы = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаОтбора Из ДополнительныеОтборы Цикл
		
		ИспользоватьПараметр = ОпределитьИспользоватьПараметрВОтборе(СтрокаОтбора, НеИспользуемыеПараметрыОтбора);
		
		// отбор не используется
		Если ИспользоватьПараметр <> Истина Тогда
			Продолжить;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// функция определяет нужно использовать параметр в отборе или нет
Функция ОпределитьИспользоватьПараметрВОтборе(СтрокаОтбора, НеИспользуемыеПараметрыОтбора) Экспорт
	
	// отбор не используется
	Если Не СтрокаОтбора.Использование Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Врег(СтрокаОтбора.Имя) = "ССЫЛКА" Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если НеИспользуемыеПараметрыОтбора <> Неопределено
		И НеИспользуемыеПараметрыОтбора.НайтиПоЗначению(СтрокаОтбора.Имя) <> Неопределено Тогда
			
		Возврат Ложь;
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// процедура дополняет отборы построителя
Процедура ДополнитьОтборыПостроителя(Построитель, Знач ДополнительныеОтборы = Неопределено,
	Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	// надо еще доп отборы перенести если они есть
	Если (ДополнительныеОтборы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
		
	ОтборПостроителя = Построитель.Отбор;
	ИмяТаблицыПоиска = ОтборПостроителя.ПолучитьДоступныеПоля()[0].Имя; 
	ДоступныеПоляОтбора = ОтборПостроителя.ПолучитьДоступныеПоля()[0].Поля;
		
	Для Каждого СтрокаОтбора Из ДополнительныеОтборы Цикл
		
		ИспользоватьПараметр = ОпределитьИспользоватьПараметрВОтборе(СтрокаОтбора, НеИспользуемыеПараметрыОтбора);
		
		// отбор не используется
		Если ИспользоватьПараметр <> Истина Тогда
			Продолжить;
		КонецЕсли;
							
		// можем ли мы по этому полю ограничивать
		ПолеОтбора = ДоступныеПоляОтбора.Найти(СтрокаОтбора.Имя);
		Если ПолеОтбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// надо то же самое перетащить в отбор построителю запросов
		СтрокаОтбораПостроителя = ОтборПостроителя.Найти(СтрокаОтбора.Имя);
		Если СтрокаОтбораПостроителя = Неопределено Тогда
			СтрокаОтбораПостроителя = ОтборПостроителя.Добавить(ИмяТаблицыПоиска + "." + СтрокаОтбора.Имя, СтрокаОтбора.Имя, СтрокаОтбора.Представление);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(СтрокаОтбораПостроителя, СтрокаОтбора);
			
	КонецЦикла;
	
КонецПроцедуры

// процедура Копирует отбор от одного построителя запроса другому
Процедура КопироватьОтборПостроителяЗапроса(ПостроительПриемник, ПостроительИсточник)
	
	Для Каждого СтрокаОтбора Из ПостроительИсточник.Отбор Цикл
		
		СтрокаОтбораПостроителя = ПостроительПриемник.Отбор.Добавить(СтрокаОтбора.ПутьКДанным, СтрокаОтбора.Имя, СтрокаОтбора.Представление);
		ЗаполнитьЗначенияСвойств(СтрокаОтбораПостроителя, СтрокаОтбора);	
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает текст запроса построителю отчетов с сохранением настроек
Процедура УстановитьЗапросПостроителюОтчетов(Построитель, ТекстЗапроса)
	
	// Устанавливаем запрос построителю
	Если ТипЗнч(Построитель) = Тип("ПостроительЗапроса") Тогда
		
		// надо настройку отбора сохранить
		Если Построитель.Отбор <> Неопределено
			И (Построитель.Отбор.Количество() <> 0) Тогда
			
			ВременныйПостроительЗапроса = Новый ПостроительЗапроса;
			ВременныйПостроительЗапроса.Текст = Построитель.Текст;
			
			// отбор копируем
			КопироватьОтборПостроителяЗапроса(ВременныйПостроительЗапроса, Построитель);
		Иначе
			ВременныйПостроительЗапроса = Неопределено;	
		КонецЕсли;
			
		Попытка
			Построитель.Текст = ТекстЗапроса;
		Исключение
		КонецПопытки;
		
		// назад возвращаем установленный ранее отбор
		Если ВременныйПостроительЗапроса <> Неопределено Тогда
			КопироватьОтборПостроителяЗапроса(Построитель, ВременныйПостроительЗапроса);
		КонецЕсли;
		
	Иначе
		
		// это построитель отчета
		НастройкиПостроителя = Построитель.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
		Попытка
			Построитель.Текст = ТекстЗапроса;
		Исключение
		КонецПопытки;
	  	Построитель.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
	
	КонецЕсли;
		
КонецПроцедуры

// функция объединяет ограничения для запроса
Функция ОбъединитьОграниченияДляЗапроса(Ограничение1, Ограничение2, СвязкаОграничений = "И")
	
	Если ПустаяСтрока(Ограничение1) ИЛИ ПустаяСтрока(Ограничение2) Тогда
		
		Если ПустаяСтрока(Ограничение1) Тогда
			Возврат Ограничение2;	
		Иначе
			Возврат Ограничение1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ограничение1 + " " + СвязкаОграничений + " " + Ограничение2; 
	
КонецФункции

// Процедура собирает части запроса в единый запрос
Процедура СоединитьЧастиВЗапрос(ИтоговыйЗапрос, Знач НачалоЗапроса, Знач ОграничениеПоСтроке, Знач ОграничениеПостроителю)
	
	// добавляем к секции ограничений ГДЕ
	СтрокаОграниченияПоСтроке = ?(ПустаяСтрока(ОграничениеПоСтроке), "", "ГДЕ " + ОграничениеПоСтроке);
				
	ИтоговыйЗапрос = ИтоговыйЗапрос + Символы.ПС + НачалоЗапроса + СтрокаОграниченияПоСтроке + Символы.ПС + ОграничениеПостроителю;
	
КонецПроцедуры

// функция возвращает строку итогов для запроса
Функция ВернутьСтрокуИтоговДляЗапроса(Знач ИмяТаблицы, Знач ИмяПоля)
	
	СтрокаИтогов = "
		|
		|	УПОРЯДОЧИТЬ ПО " + ИмяТаблицы + "." + ?(ПустаяСтрока(ИмяПоля), "Ссылка", ИмяПоля) + "
		|	ИТОГИ ПО " + ИмяТаблицы + "." + ?(ПустаяСтрока(ИмяПоля), "Ссылка", ИмяПоля);

	Возврат СтрокаИтогов;
	
КонецФункции

// процедура формирует простой - примитивный запрос поиска для наложения дополнительных ограничений
Процедура СформироватьПримитивныйЗапросПоиска(СтрокаДереваПредка, Знач ИмяТаблицыПоиска = "")
	
	ТекущийЗапросПостроителю = СформироватьЗапросПостроителюПоПараметрам(СтрокаДереваПредка, 1, ИмяТаблицыПоиска);
	УстановитьЗапросПостроителюОтчетов(СтрокаДереваПредка.Построитель, ТекущийЗапросПостроителю);

КонецПроцедуры

// процедура формирует запрос построителю по указанным параметрам
Функция СформироватьЗапросПостроителюПоПараметрам(СтрокаДереваПредка, КоличествоСтрокДляВыбора, ИмяОсновнойТаблицыПоискаДляОграничений,
	ТекущийЗапросПостроителю = "", ИмяПоляПоиска = "", ПредставлениеПоляПоиска = "", ТипПоляПоиска = Неопределено, Знач РасширенныйПоиск = Ложь)
	
	Построитель = СтрокаДереваПредка.Построитель; 
	ЗапросПостроителю = ТекущийЗапросПостроителю;
		
	ОграничениеПостроителю = СформироватьСтрокуОграниченийДляПостроителяОтчетов(СтрокаДереваПредка.ТаблицаПоиска, СтрокаДереваПредка.УникальноеИмяТаблицы);
	ОграничениеПоПолюСсылки = "";
	
	// ограничение по полю ссылки делаем
	ОграничениеПоПолюСсылки = ВернутьСтрокуОграниченияСГлавнойТаблицейВыборки(СтрокаДереваПредка.УникальноеИмяТаблицы, СтрокаДереваПредка.ПолеСвязки, 
		ИмяОсновнойТаблицыПоискаДляОграничений);
		
	СтрокаИтогов = ?(РасширенныйПоиск, ВернутьСтрокуИтоговДляЗапроса(СтрокаДереваПредка.УникальноеИмяТаблицы, СтрокаДереваПредка.ПолеСвязки), "");
			
	Если НЕ ПустаяСтрока(ИмяПоляПоиска) Тогда
		
		ОграничениеПоСтроке = "";
		
		НачалоЗапроса = СформироватьНачалоЗапроса(СтрокаДереваПредка.ТаблицаПоиска, СтрокаДереваПредка.ПолеСвязки, 
				ЗапросПостроителю = "", КоличествоСтрокДляВыбора, СтрокаДереваПредка.УникальноеИмяТаблицы, ПредставлениеПоляПоиска, ИмяПоляПоиска,
				РасширенныйПоиск);
					
		СтрокаДополнительногоСоединения = "";	
		// если имя поля поиска совпадает с именем поля связки с главной таблицей то поиск можно ограничить
		Если Врег(ИмяПоляПоиска) = Врег(СтрокаДереваПредка.ПолеСвязки) Тогда
			// ограничиваем поиск
			ОграничениеПоСтроке = ВернутьСтрокуОграниченийДляПоля(ИмяПоляПоиска, СтрокаДереваПредка.УникальноеИмяТаблицы, 
					ТипПоляПоиска, Построитель, СтрокаДополнительногоСоединения, ИмяОсновнойТаблицыПоискаДляОграничений);
		Иначе
			ОграничениеПоСтроке = ВернутьСтрокуОграниченийДляПоля(ИмяПоляПоиска, СтрокаДереваПредка.УникальноеИмяТаблицы, 
					ТипПоляПоиска, Построитель, СтрокаДополнительногоСоединения);
		КонецЕсли;
					
		Если НЕ ПустаяСтрока(СтрокаДополнительногоСоединения) Тогда
			НачалоЗапроса = НачалоЗапроса + Символы.ПС + СтрокаДополнительногоСоединения + Символы.ПС;
		КонецЕсли;
			
		ОграничениеПоСтроке = ОбъединитьОграниченияДляЗапроса(ОграничениеПоПолюСсылки, ОграничениеПоСтроке);
			
		СоединитьЧастиВЗапрос(ЗапросПостроителю, НачалоЗапроса + Символы.ПС, ОграничениеПоСтроке, ОграничениеПостроителю);
		
	Иначе
		
		// нет ограничения по строке поиска
		НачалоЗапроса = СформироватьНачалоЗапроса(СтрокаДереваПредка.ТаблицаПоиска, СтрокаДереваПредка.ПолеСвязки, 
				Истина, КоличествоСтрокДляВыбора, СтрокаДереваПредка.УникальноеИмяТаблицы);
				
		СоединитьЧастиВЗапрос(ЗапросПостроителю, НачалоЗапроса, ОграничениеПоПолюСсылки, ОграничениеПостроителю);	
		
	КонецЕсли;
	
	ЗапросПостроителю = ЗапросПостроителю + СтрокаИтогов;
	
	Возврат ЗапросПостроителю;
	
КонецФункции

// Функция возвращает список найденных объектов по текущему построителю и запросу
Функция ПолучитьСписокТекущихСсылокПоПостроителюИЗапросу(ТекущийПостроитель, ТекущийЗапросПостроителю, МассивОграничений)
	
	УстановитьЗапросПостроителюОтчетов(ТекущийПостроитель, ТекущийЗапросПостроителю);
	// если есть доп ограничения то устанавливаем их
	Если МассивОграничений <> Неопределено Тогда
		ТекущийПостроитель.Параметры.Вставить("СписокСсылокОграничений", МассивОграничений);
	КонецЕсли;
		
	СписокТекущихСсылок = ВыполнитьЗапросДанных(ТекущийПостроитель, мСтрокаДляОграничения, мЧислоДляОграничения);
	Возврат СписокТекущихСсылок;
	
КонецФункции

// Функция определяет для строки нужно по ней ограничивать по строке или нет
Функция ОпределитьНужноОграничиватьПоСтрокеДерева(СтрокаИзДерева)
	
	НеобходимоОграничиватьПоСтрокеДляТекущегоЭлемента = НЕ ПустаяСтрока(мСтрокаДляОграничения) 
														И СтрокаИзДерева.Пометка 
														И НЕ ПустаяСтрока(СтрокаИзДерева.ПоляПоиска);
														
	Возврат НеобходимоОграничиватьПоСтрокеДляТекущегоЭлемента;
	
КонецФункции

// процедура дополняет дерево найденных объектов
Процедура ДополнитьДеревоНайденныхОбъектов(ТекущееДеревоПоиска, ДополняющееДерево)
	
	Если ТипЗнч(ДополняющееДерево) = Тип("ДеревоЗначений")
		И (ТекущееДеревоПоиска = Неопределено
		ИЛИ ТекущееДеревоПоиска.Строки.Количество() = 0) Тогда
		
		ТекущееДеревоПоиска = ДополняющееДерево.Скопировать(); 
		Возврат;
		
	КонецЕсли;
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ДополняющееДерево.Строки Цикл

		Если СтрокаТаблицыИсточника.Уровень() = 0 Тогда
			
			СтрокаТаблицыПриемника = ТекущееДеревоПоиска.Строки.Найти(СтрокаТаблицыИсточника.УникальныйОбъектПоиска, "УникальныйОбъектПоиска", Ложь);
			Если СтрокаТаблицыПриемника = Неопределено Тогда 
				СтрокаТаблицыПриемника = ТекущееДеревоПоиска.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
			КонецЕсли;
		
		Иначе
			СтрокаТаблицыПриемника = ТекущееДеревоПоиска.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЕсли;
		
		Если СтрокаТаблицыИсточника.Строки.Количество() > 0 Тогда
			ДополнитьДеревоНайденныхОбъектов(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// функция проверяет нужно ли перевыбирать данные для поиска
Функция НужноПереВыбиратьДанныеПоиска(СписокТекущихСсылок, КоличествоСтрокДляВыбора, ПоискПересеченияПоНесколькимТаблицам)
	
	// нужно проверить а не превышено ли количество найденных объектов предела		
	Если (КоличествоСтрокДляВыбора <> 0) И НЕ ПоискПересеченияПоНесколькимТаблицам Тогда	
					
		ПревышениеПределаПоЛистьямДерева = КоличествоЛистьевПревышаетДопустимыйПредел(СписокТекущихСсылок, КоличествоСтрокДляВыбора); 
		
		Если ПревышениеПределаПоЛистьямДерева Тогда
					
			мНеОграничиватьКоличествоОбъектовПоиска = НужноПродолжитьПоиск(мНеОграничиватьКоличествоОбъектовПоиска, КоличествоСтрокДляВыбора);
			Если мНеОграничиватьКоличествоОбъектовПоиска Тогда
				// пользователь хочет искать больше элементов, здесь ищем все по-новой...
				КоличествоСтрокДляВыбора = 0;
				// надо все перевыбирать по по-новой...
				Возврат Истина;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// функция возвращает список ссылок для простого варианта поиска данных
Функция ПолучитьСписокСсылокДляПростогоПоиска(СтрокаДереваПредка, НакладыватьОграниченияПоСтроке, КоличествоСтрокДляВыбора, 
			ИмяОсновнойТаблицыПоискаДляОграничений, МассивОграничений, Знач РасширенныйПоиск = Ложь)
	
	// простой случай построения запроса
	// ищем нужно ли ограничивать по строке
	ТекущийЗапросПостроителю = "";
	Если НакладыватьОграниченияПоСтроке Тогда
			
		Для Каждого СтрокаПоля Из СтрокаДереваПредка.СписокПолей Цикл
				
			// по этому полю надо искать данные
			Если СтрокаПоля.Пометка Тогда
				ТекущийЗапросПостроителю = СформироватьЗапросПостроителюПоПараметрам(СтрокаДереваПредка, КоличествоСтрокДляВыбора, 
					ИмяОсновнойТаблицыПоискаДляОграничений,	ТекущийЗапросПостроителю, СтрокаПоля.Значение, СтрокаПоля.Представление, СтрокаПоля.ТипПоля,
					РасширенныйПоиск);

			КонецЕсли;
				
		КонецЦикла;
		
	Иначе
		// по строке вообще не надо ограничивать
		ТекущийЗапросПостроителю = СформироватьЗапросПостроителюПоПараметрам(СтрокаДереваПредка, КоличествоСтрокДляВыбора, 
			ИмяОсновнойТаблицыПоискаДляОграничений, , , , , РасширенныйПоиск);
		
	КонецЕсли;
		
	СписокТекущихСсылок = ПолучитьСписокТекущихСсылокПоПостроителюИЗапросу(СтрокаДереваПредка.Построитель, ТекущийЗапросПостроителю, МассивОграничений);
	
	Возврат СписокТекущихСсылок;
	
КонецФункции

// Процедура формирует запрос для поиска данных в определенной таблице
Функция ПолучитьТекущиеСсылкиОбъектов(СтрокаДереваПредка, ИмяОсновнойТаблицыПоискаДляОграничений = Неопределено, 
			КоличествоСтрокДляВыбора, МассивОграничений = Неопределено, ПоискПересеченияПоНесколькимТаблицам, 
			Знач РасширенныйПоиск = Ложь)
		
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли

    // а есть ли ограничение по ссылке
	Если (МассивОграничений <> НЕопределено) Тогда 
		ИмяБазовойТаблицы = Неопределено;
	Иначе
		ИмяБазовойТаблицы = ИмяОсновнойТаблицыПоискаДляОграничений;
	КонецЕсли;

	
	ТекущийПостроитель = СтрокаДереваПредка.Построитель;
	ТекущийПостроитель.Параметры.Очистить();
		
	// по строке ищем только в том случае если есть галочка и есть поля поиска
	НакладыватьОграниченияПоСтроке = ОпределитьНужноОграничиватьПоСтрокеДерева(СтрокаДереваПредка);
	НесколькоПолейОграничений = (Найти(СтрокаДереваПредка.ПоляПоиска, ",") > 0);
		
	// если нужно накладывать ограничение по строке и количество полей по которым нужно ограничивать не 1 и нужно получать
	// детализированные данные - то это самый тяжелый случай, иначе просто формируем итоговый запрос и получаем все данные
	Если НакладыватьОграниченияПоСтроке И НесколькоПолейОграничений И РасширенныйПоиск Тогда
		
		// тут придется формировать отдельный запрос на каждое поле поиска и собирать данные воедино самому
		// потому как поля представлений нельзя объединять в единый запрос
		
		СписокБазовыхСсылок  = Неопределено;
		Для Каждого СтрокаПоля Из СтрокаДереваПредка.СписокПолей Цикл
				
			// по этому полю надо искать данные
			Если СтрокаПоля.Пометка Тогда
				
				Если мФормаПрогрессора <> Неопределено Тогда
					мФормаПрогрессора.КомментарийЗначения = "Выборка данных из """ + СтрокаДереваПредка.ОписаниеТаблицыПоиска +
						""" поля """ + СтрокаПоля.Представление + """"; 
				
					мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
				КонецЕсли;
			
				// каждый запрос делаем отдельный
				ТекущийЗапросПостроителю = СформироватьЗапросПостроителюПоПараметрам(СтрокаДереваПредка, КоличествоСтрокДляВыбора, ИмяБазовойТаблицы,
					"", СтрокаПоля.Значение, СтрокаПоля.Представление, СтрокаПоля.ТипПоля, РасширенныйПоиск);

				СписокТекущихСсылок = ПолучитьСписокТекущихСсылокПоПостроителюИЗапросу(ТекущийПостроитель, ТекущийЗапросПостроителю, МассивОграничений);	
				
				// число ссылок может превысить заданный предел, возможно придется все по новой перевыбрать
				НужноПеревыбрать = НужноПереВыбиратьДанныеПоиска(СписокТекущихСсылок, КоличествоСтрокДляВыбора, ПоискПересеченияПоНесколькимТаблицам);
				Если НужноПеревыбрать Тогда
					
					// перевыбираем заново
					ТекущийЗапросПостроителю = СформироватьЗапросПостроителюПоПараметрам(СтрокаДереваПредка, КоличествоСтрокДляВыбора, ИмяБазовойТаблицы,
						"", СтрокаПоля.Значение, СтрокаПоля.Представление, СтрокаПоля.ТипПоля, РасширенныйПоиск);

					СписокТекущихСсылок = ПолучитьСписокТекущихСсылокПоПостроителюИЗапросу(ТекущийПостроитель, ТекущийЗапросПостроителю, МассивОграничений);
				
				КонецЕсли;
				
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				// надо объединить списки базовых и текущих ссылок ...
				ДополнитьДеревоНайденныхОбъектов(СписокБазовыхСсылок, СписокТекущихСсылок);
								
				// итоговое число ссылок может превысить предел, нужно ли дальше продолжать поиски
				// перевыбирать ничего не надо, в случае необходимости задать вопрос и все
				НужноПереВыбиратьДанныеПоиска(СписокБазовыхСсылок, КоличествоСтрокДляВыбора, ПоискПересеченияПоНесколькимТаблицам);
				
			КонецЕсли;
				
		КонецЦикла;

		Возврат СписокБазовыхСсылок; 
		
	Иначе
		
		Если мФормаПрогрессора <> Неопределено Тогда
			мФормаПрогрессора.КомментарийЗначения = "Выборка данных из """ + СтрокаДереваПредка.ОписаниеТаблицыПоиска + """";
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		КонецЕсли;
		
		// простой случай построения запроса
		// ищем нужно ли ограничивать по строке
		СписокТекущихСсылок = ПолучитьСписокСсылокДляПростогоПоиска(СтрокаДереваПредка, НакладыватьОграниченияПоСтроке, КоличествоСтрокДляВыбора, 
			ИмяБазовойТаблицы, МассивОграничений, РасширенныйПоиск);
			
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		// количество найденных элементов может превысить допустимый предел, возможно все по новой придется выбрать...
		НужноПеревыбрать = НужноПереВыбиратьДанныеПоиска(СписокТекущихСсылок, КоличествоСтрокДляВыбора, ПоискПересеченияПоНесколькимТаблицам);
		
		Если НужноПеревыбрать Тогда
			
			СписокТекущихСсылок = ПолучитьСписокСсылокДляПростогоПоиска(СтрокаДереваПредка, НакладыватьОграниченияПоСтроке, КоличествоСтрокДляВыбора, 
				ИмяБазовойТаблицы, МассивОграничений, РасширенныйПоиск);
			
		КонецЕсли;
		
		Возврат СписокТекущихСсылок;
		
	КонецЕсли;
		
КонецФункции

// функция для области поиска возвращает нужно ли по ней строить ограничения или нет
Функция СтроитьЗапросПоОбластиПоиска(СтрокаДереваОбластиПоиска) Экспорт
	
	// Поиск осуществляется если есть ограничение по строке или есть дополнительные ограничения по области поиска	
	ЕстьОграничения = СтрокаДереваОбластиПоиска.Пометка И
					(ОпределитьНужноОграничиватьПоСтрокеДерева(СтрокаДереваОбластиПоиска) 
					ИЛИ НЕ ПустаяСтрока(СтрокаДереваОбластиПоиска.ДополнительныеОграничения));
	Возврат ЕстьОграничения;
	
КонецФункции

// Процедура инициализирует все построители для определенного типа поиска
Процедура ИнициализироватьПостроителиЗапроса(ДеревоДляТекущегоТипа) Экспорт
	
	Для Каждого СтрокаИзДерева из ДеревоДляТекущегоТипа.Строки Цикл
		
		ЭтоБазоваяТаблица = СтрокаИзДерева.ИмяОбъекта = "0";
		Если ЭтоБазоваяТаблица Тогда
			ИмяТаблицыПоиска = СтрокаИзДерева.ТаблицаПоиска;
		Иначе
			ИмяТаблицыПоиска = "";	
		КонецЕсли;
			
		СформироватьПримитивныйЗапросПоиска(СтрокаИзДерева, ИмяТаблицыПоиска);
				
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет конечные строки в дерево результатов
Процедура ВставитьСтрокиВДерево(Предок, ИмяОбластиПоиска, ИмяРегистраСведений, СтруктураПоиска, МассивСтрокДляВставки, РегистрироватьСтруктуру)
	
	НомерПоиска = 1;
	Для Каждого СтрокаЭлементаПоиска Из МассивСтрокДляВставки Цикл
		
		// добавляем нужную строку в дерево
		Если Не Пустаястрока(СтрокаЭлементаПоиска.ИМЯПоляПоиска) Тогда
			
			СтрокаЭлемента = Предок.Строки.Добавить();
			СтрокаЭлемента.ОбластьПоиска = СтрокаЭлементаПоиска.ИМЯПоляПоиска;
			СтрокаЭлемента.Представление = СтрокаЭлементаПоиска.ПредставлениеНайденногоЗначения;
							
		Иначе
				
			СтрокаЭлемента = Предок.Строки.Добавить();
							
		КонецЕсли;

		Если РегистрироватьСтруктуру Тогда
			СтрокаЭлемента.Значение = ИмяОбластиПоиска;

			Если ИмяРегистраСведений = Неопределено Тогда
				СтрокаЭлемента.КлючОбъекта = СтрокаЭлементаПоиска.Ссылка; 	
			Иначе
				
				СтруктураПоиска.Вставить("ИмяРегистраСведений", ИмяРегистраСведений);
				СтрокаЭлемента.КлючОбъекта = СтруктураПоиска;
				
			КонецЕсли;
		Иначе
			СтрокаЭлемента.Значение = Строка(НомерПоиска);
			НомерПоиска = НомерПоиска + 1; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет строки в дерево результатов
Процедура ДобавитьИтоговыеСтрокиДереваРезультатов(ИсходноеДерево, РезультирующееДерево, ИмяОбластиПоиска, ИмяРегистраСведений, СписокЗначенийПолей)
	
	Пока ИсходноеДерево.Строки.Количество() > 0 Цикл
		
		СтрокаЭлементаПоиска = ИсходноеДерево.Строки[0];
		// Нужно заранее посмотреть, сколько элементов с таким же ключем уже есть, если несколько, то иерархия более сильная
		СтруктураПоиска = Новый Структура();
		Если ИмяРегистраСведений = Неопределено Тогда
			СтруктураПоиска.Вставить("Ссылка", СтрокаЭлементаПоиска.Ссылка);
		Иначе
			Для Каждого ПолеКлюча Из СписокЗначенийПолей Цикл
				СтруктураПоиска.Вставить(ПолеКлюча.Значение, СтрокаЭлементаПоиска[ПолеКлюча.Значение]);	
			КонецЦикла;
		КонецЕсли;
		
		СписокСтрок = ИсходноеДерево.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
		
		Если СписокСтрок.Количество() > 1 Тогда
			// тут нужно сразу все строки добавить, а то потом их не найти куда вставлять
			СтрокаПредка = РезультирующееДерево.Строки.Добавить();
			СтрокаПредка.Значение = ИмяОбластиПоиска;
			Если ИмяРегистраСведений = Неопределено Тогда
				СтрокаПредка.КлючОбъекта = СтрокаЭлементаПоиска.Ссылка; 	
			Иначе
				
				СтруктураПоиска.Вставить("ИмяРегистраСведений", ИмяРегистраСведений);
				СтрокаПредка.КлючОбъекта = СтруктураПоиска;
				
			КонецЕсли;
			

			ВставитьСтрокиВДерево(СтрокаПредка, ИмяОбластиПоиска, ИмяРегистраСведений, СтруктураПоиска, СписокСтрок, Ложь)
		Иначе
			ВставитьСтрокиВДерево(РезультирующееДерево, ИмяОбластиПоиска, ИмяРегистраСведений, СтруктураПоиска, СписокСтрок, Истина)		
		КонецЕсли;
		
		// удаляем строки
		Для Каждого СтрокаДобавления Из СписокСтрок Цикл
			ИсходноеДерево.Строки.Удалить(СтрокаДобавления);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает нужно ли продолжать поиск или нет
Функция НужноПродолжитьПоиск(ФлагПродолженияПоиска, Знач ОграничениеПоКоличествуОбъектовПоиска)
	
	Если ФлагПродолженияПоиска = Неопределено Тогда
		
		// задаем вопрос пользователю, хочет ли он продолжить поиск
		#Если Клиент Тогда
			ОтветПользователя = Вопрос("Итоговое вхождение объектов в результирующий отчет превысило " + Строка(ОграничениеПоКоличествуОбъектовПоиска - 1) + 
				". Хотите продолжить поиск?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да, "Поиск объектов");
				
			Возврат (ОтветПользователя = КодВозвратаДиалога.Да);
		#Иначе
			Возврат Истина;	
		#КонецЕсли
	
	Иначе
		Возврат ФлагПродолженияПоиска;
	КонецЕсли;	
	
КонецФункции

// Функция подсчитывает превосходит ли количество конечных элементов в дереве определенный предел или нет
// дерево только не более чем из двух уровней
Функция КоличествоЛистьевПревышаетДопустимыйПредел(Дерево, Знач ЗначениеОграниченияНаКоличество)
	
	ТекущееКоличествоСтрок = 0;
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		НовоеКоличествоСтрок = СтрокаДерева.Строки.Количество();
		Если НовоеКоличествоСтрок = 0 Тогда
			НовоеКоличествоСтрок = 1;
		КонецЕсли;
		
		ТекущееКоличествоСтрок = ТекущееКоличествоСтрок + НовоеКоличествоСтрок;
		
	КонецЦикла;
	
	КоличествоЭлементовПревзошлоПредел = (ТекущееКоличествоСтрок >= ЗначениеОграниченияНаКоличество);
	
	Возврат КоличествоЭлементовПревзошлоПредел;
	
КонецФункции

// функция из исходной строки формирует строку для поиска данных в запросе
Функция СформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
	
	ИтоговаяСтрокаДляПоиска = СтрокаПоиска;
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "~", "~~");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "%", "~%");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "_", "~_");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "[", "~[");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "-", "~-");

	Возврат ИтоговаяСтрокаДляПоиска;
	
КонецФункции

// процедура формирует ограничения (глобальные параметры) для запроса
процедура СформироватьГлобальныеПараметрыДляЗапроса(СтруктураПараметров, Знач ФормироватьОграниченияТолькоПоСтроке = Ложь) Экспорт
	
	СтрокаДляПоискаВЗапросе = СформироватьСтрокуДляПоискаВЗапросе(СтруктураПараметров.СтрокаПоиска);
	Если НЕ ПустаяСтрока(СтрокаДляПоискаВЗапросе) Тогда
		
		мСтрокаПоиска = СтруктураПараметров.СтрокаПоиска;
		мСтрокаДляОграничения = "%" + СтрокаДляПоискаВЗапросе + "%";
		Если ФормироватьОграниченияТолькоПоСтроке Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			// одна точна в строке поиска - это не число
			Если СокрЛП(СтрокаДляПоискаВЗапросе) = "." Тогда
				мЧислоДляОграничения = Неопределено;
			Иначе
				мЧислоДляОграничения = Число(СтрокаДляПоискаВЗапросе);
			КонецЕсли;
								
		Исключение
			мЧислоДляОграничения = Неопределено;
		КонецПопытки;
		
	Иначе
		мСтрокаДляОграничения = "";
		мСтрокаПоиска = "";
		мЧислоДляОграничения = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если мЧислоДляОграничения <> Неопределено Тогда
		// для ограничений по числу надо определить точность ограничений
		мТочностьОкругления = 0.5; // точность для целого числа
		мЧислоЗнаковПослеЗапятойПриОграниченийПоЧислу = 0;
		ВременноеЧисло = мЧислоДляОграничения;
		Пока ВременноеЧисло <> Цел(ВременноеЧисло) Цикл
			ВременноеЧисло = ВременноеЧисло * 10;
			мТочностьОкругления = мТочностьОкругления / 10;
			мЧислоЗнаковПослеЗапятойПриОграниченийПоЧислу = мЧислоЗнаковПослеЗапятойПриОграниченийПоЧислу + 1;
		КонецЦикла;
		
		// число делаем нужным с точностью для округления
		Если мЧислоДляОграничения >= 0 Тогда
			мЧислоДляОграничения = мЧислоДляОграничения - мТочностьОкругления
		Иначе
			мЧислоДляОграничения = мЧислоДляОграничения + мТочностьОкругления
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Функция создает узел для базового элемента результирующего дерева
Функция СоздатьБазовыйУзелДереваРезультатов(ДеревоРезультатов, ЭлементИсходногоДерева)
	
	СтрокаПредка = ДеревоРезультатов.Строки.Добавить();
	СтрокаПредка.Значение = ЭлементИсходногоДерева.УникальныйОбъектПоиска;
	Возврат СтрокаПредка;
	
КонецФункции

// функция возвращает количество таблиц по которым есть ограничение
Функция ПолучитьКоличествоТаблицПоКоторымЕстьОграничения(СтруктураПараметров, КоличествоЗапросовПоиска)
	
	СтрокаДереваПоиска = СтруктураПараметров.ДеревоПоиска;
	
	КоличествоТаблицПоиска = 0;
	КоличествоЗапросовПоиска = 0;
	// могут быть либо заданы ограничения по отборам, либо ограничения по строке поиска
	Для Каждого СтрокаИзДерева из СтрокаДереваПоиска.Строки Цикл
		
		ЕстьОграничениеПоОбласти = СтроитьЗапросПоОбластиПоиска(СтрокаИзДерева);				
		Если ЕстьОграничениеПоОбласти Тогда
			КоличествоТаблицПоиска = КоличествоТаблицПоиска + 1;
			// узнаем сколько по данной области поиска будет создано запросов
			
			НакладыватьОграниченияПоСтроке = ОпределитьНужноОграничиватьПоСтрокеДерева(СтрокаИзДерева);
			// найдем по скольким полям нужно наложить ограничения
			Если НакладыватьОграниченияПоСтроке И СтруктураПараметров.УказыватьОбластиНахожденияСсылок Тогда
				КоличествоЗапятых = СтрЧислоВхождений(СтрокаИзДерева.ПоляПоиска, ",");
				КоличествоЗапросовПоиска = КоличествоЗапросовПоиска + КоличествоЗапятых + 1;
			Иначе
				КоличествоЗапросовПоиска = КоличествоЗапросовПоиска + 1;
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат КоличествоТаблицПоиска;
	
КонецФункции

// функция возвращает заданы ли хоть какие-нибудь ограничения для поиска данных
Функция ОпределитьНаличиеТаблицДляПоиска(СтруктураПараметров, КоличествоЗапросовПоиска = 0) Экспорт
	
	КоличествоЗапросовПоиска = 0;
	Если СтруктураПараметров.ДеревоПоиска.Строки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
		    	
	// если задано, что нужно найти все документы удовлетворяющие всем условиям
	// то нельзя в запросах ограничивать по количеству элементов
	// если только все ограничения не накладываются на одну таблицу
	ЧислоТаблицПоиска = ПолучитьКоличествоТаблицПоКоторымЕстьОграничения(СтруктураПараметров, КоличествоЗапросовПоиска);
	// если вообще не почему искать, то и не ищем
	Возврат ЧислоТаблицПоиска;
	
КонецФункции


//Функция возвращает список колонок регистра - ключа записи
Функция ПолучитьСписокКолонокРегистраКлючаЗаписи(МетаданныеОбъекта)
	
	СписокЗначенийПолей = Новый СписокЗначений();
	Для Каждого ПолеИзмерения Из МетаданныеОбъекта.Измерения Цикл
		СписокЗначенийПолей.Добавить(ПолеИзмерения.Имя);
	КонецЦикла;
	
	Если МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		СписокЗначенийПолей.Добавить("Регистратор");	
	КонецЕсли;
	
	Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		СписокЗначенийПолей.Добавить("Период");	
	КонецЕсли;
	
	Возврат СписокЗначенийПолей;
	
КонецФункции

// Процедура пополняет список ссылок новыми значениями
// либо делает объединение, либо находит пересечение
Процедура ДополнитьСписокСсылок(ТекущийСписокСсылок, ДополняющаяТаблица, ДополнятьОбъединением = Истина,Знач ИмяОбластиПоиска, 
	Знач ТаблицаПоиска, Знач РасширенныйПоиск)
	
	Если ТаблицаПоиска = "" 
		ИЛИ ТекущийСписокСсылок = Неопределено 
		Или ДополняющаяТаблица = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РасширенныйПоиск Тогда
		
		СтрокаТипаОбъекта = "";
		СтрокаИмениОбъекта = "";
		ВыделитьСтрокиПоРазделителю(ТаблицаПоиска, ".", СтрокаТипаОбъекта, СтрокаИмениОбъекта);
		
		// для регистра и справочника свои особенности переноса полей
		Если Врег(СтрокаТипаОбъекта) = "РЕГИСТРСВЕДЕНИЙ" Тогда
			
			СтрокаИмениОбъекта = ПолучитьИсходноеИмяРегистра(СтрокаИмениОбъекта);
			МетаданныеОбъекта = ПолучитьМетаданныеОбъекта(СтрокаТипаОбъекта, СтрокаИмениОбъекта);
			
			СписокЗначенийПолей = ПолучитьСписокКолонокРегистраКлючаЗаписи(МетаданныеОбъекта);
						
			РегистрСведенийМенеджер = СтрокаИмениОбъекта;
					
		Иначе
			РегистрСведенийМенеджер = Неопределено;
			СписокЗначенийПолей = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	
	НомерСтрокиПереноса = 0;
	ОбщееКоличествоСтрокаПереноса = ?(ДополнятьОбъединением ИЛИ ТекущийСписокСсылок.Строки.Количество() = 0,
										Строка(ДополняющаяТаблица.Строки.Количество()),
										Строка(ТекущийСписокСсылок.Строки.Количество()));
										
	Если мФормаПрогрессора <> Неопределено Тогда									
		мФормаПрогрессора.КомментарийЗначения = "Обработка результатов запроса к информационной базе. 0 из " + ОбщееКоличествоСтрокаПереноса;
	КонецЕсли;	
	
	// результирующий список пуст - дополняем его вне зависимости от типа Объединять/Пересекать
	Если (ТекущийСписокСсылок.Строки.Количество() = 0) Тогда
		
		Для Каждого ЭлементДерева Из ДополняющаяТаблица.Строки Цикл
			
			СтрокаПредка = СоздатьБазовыйУзелДереваРезультатов(ТекущийСписокСсылок, ЭлементДерева);
			ДобавитьИтоговыеСтрокиДереваРезультатов(ЭлементДерева, СтрокаПредка, ИмяОбластиПоиска, РегистрСведенийМенеджер, СписокЗначенийПолей);
			
			НомерСтрокиПереноса = НомерСтрокиПереноса + 1;
			Если НомерСтрокиПереноса%100 = 0 Тогда
				
				Если мФормаПрогрессора <> Неопределено Тогда
					мФормаПрогрессора.КомментарийЗначения = "Обработка результатов запроса к информационной базе. " + Строка(НомерСтрокиПереноса) + " из " + ОбщееКоличествоСтрокаПереноса;
				КонецЕсли;
			
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнятьОбъединением Тогда
		
		// для объединения все просто, просматриваем добавляемый список, если в исходном нет - добавляем
		Для Каждого СтрокаДополняющейТаблицы Из ДополняющаяТаблица.Строки Цикл
			
			СтрокаПоиска = ТекущийСписокСсылок.Строки.Найти(СтрокаДополняющейТаблицы.УникальныйОбъектПоиска, "Значение", Ложь);
			Если СтрокаПоиска = Неопределено Тогда
				СтрокаПоиска = СоздатьБазовыйУзелДереваРезультатов(ТекущийСписокСсылок, СтрокаДополняющейТаблицы);
			КонецЕсли;
			ДобавитьИтоговыеСтрокиДереваРезультатов(СтрокаДополняющейТаблицы, СтрокаПоиска, ИмяОбластиПоиска, РегистрСведенийМенеджер, СписокЗначенийПолей);
			
			НомерСтрокиПереноса = НомерСтрокиПереноса + 1;
			Если НомерСтрокиПереноса%100 = 0 Тогда
				
				Если мФормаПрогрессора <> Неопределено Тогда
					мФормаПрогрессора.КомментарийЗначения = "Обработка результатов запроса к информационной базе. " + Строка(НомерСтрокиПереноса) + " из " + ОбщееКоличествоСтрокаПереноса;
				КонецЕсли;
				
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
			
			КонецЕсли;
						
		КонецЦикла;
		
	Иначе
		
		// если во второй таблице нет записей, то все...
		Если ДополняющаяТаблица.Строки.Количество() = 0 Тогда
			
			ТекущийСписокСсылок.Строки.Очистить();
			Возврат;
			
		КонецЕсли;
		
		// необходимо найти пересечение
		// пробегаем исходный список, если в добавляемом не нашли - удаляем
		ТекущийНомерСтроки = 0;
		Пока ТекущийНомерСтроки < ТекущийСписокСсылок.Строки.Количество() Цикл
			
			ПроверяемаяСтрока = ТекущийСписокСсылок.Строки[ТекущийНомерСтроки];
			
			СтрокаПоиска = ДополняющаяТаблица.Строки.Найти(ПроверяемаяСтрока.Значение, "УникальныйОбъектПоиска", Ложь);
			Если СтрокаПоиска = Неопределено Тогда
				// не нашли во втором наборе - удаляем строку из результирующего набора
				ТекущийСписокСсылок.Строки.Удалить(ТекущийНомерСтроки);
			Иначе
				ДобавитьИтоговыеСтрокиДереваРезультатов(СтрокаПоиска, ПроверяемаяСтрока, ИмяОбластиПоиска, РегистрСведенийМенеджер, СписокЗначенийПолей);
				ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
			КонецЕсли;
			
			НомерСтрокиПереноса = НомерСтрокиПереноса + 1;
			Если НомерСтрокиПереноса%100 = 0 Тогда
				
				Если мФормаПрогрессора <> Неопределено Тогда
					мФормаПрогрессора.КомментарийЗначения = "Обработка результатов запроса к информационной базе. " + Строка(НомерСтрокиПереноса) + " из " + ОбщееКоличествоСтрокаПереноса;
				КонецЕсли;
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
			КонецЕсли;
	
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Функция получает данные по параметрам поиска
Функция ПолучитьДанныеПоПараметрамПоиска(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.МаксимальноеКоличествоОбъектовДляПоиска <> 0 Тогда
		мНеОграничиватьКоличествоОбъектовПоиска = Ложь;
		ОграничениеПоКоличеству = СтруктураПараметров.МаксимальноеКоличествоОбъектовДляПоиска + 1;
	Иначе
		мНеОграничиватьКоличествоОбъектовПоиска = Неопределено;
		ОграничениеПоКоличеству = 51; 
	КонецЕсли;	
	
	КоличествоЗапросовПоиска = 0;
	
	РезультирующийСписокСсылок = Новый ДеревоЗначений;
	СоздатьКолонкиУТаблицыРезультирующихЗначений(РезультирующийСписокСсылок);
	
	СформироватьГлобальныеПараметрыДляЗапроса(СтруктураПараметров, Ложь);
	ЧислоТаблицПоиска = ОпределитьНаличиеТаблицДляПоиска(СтруктураПараметров, КоличествоЗапросовПоиска);
	
	// если вообще не почему искать, то и не ищем
	Если (ЧислоТаблицПоиска = 0) Тогда
		Возврат РезультирующийСписокСсылок;
	КонецЕсли;
	
	// прогресс запускаем
	Если мФормаПрогрессора <> Неопределено Тогда
		мФормаПрогрессора.МаксимальноеЗначение = КоличествоЗапросовПоиска + 1; // 1 добавляем для сортировки
		мФормаПрогрессора.Открыть();
	КонецЕсли;

	СтрокаДереваИзБазовойТаблицы = СтруктураПараметров.ДеревоПоиска.Строки.Найти("0", "ИмяОбъекта", Ложь);
	БазоваяТаблица = СтрокаДереваИзБазовойТаблицы.ТаблицаПоиска; 
	
	ПоискПересеченияПоНесколькимТаблицам = СтруктураПараметров.ОтборОбъектовУдовлетворяющихВсемУсловиям И (ЧислоТаблицПоиска > 1);
	
	ЧислоЭлементовДляПоказа = ?(ПоискПересеченияПоНесколькимТаблицам, 0, ОграничениеПоКоличеству);
	
	Для Каждого СтрокаИзДерева из СтруктураПараметров.ДеревоПоиска.Строки Цикл
		
		// нужно ли по этой области искать то вообще
		НужноИскатьПоОбластиПоиска = СтроитьЗапросПоОбластиПоиска(СтрокаИзДерева);
		Если Не НужноИскатьПоОбластиПоиска Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаБазовойТаблицы = СтрокаИзДерева.ИмяОбъекта = "0";
		
		// формируем ограничение для поиска
		Если СтруктураПараметров.ОтборОбъектовУдовлетворяющихВсемУсловиям 
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СсылкаПоиска) Тогда
			
			Если ЗначениеЗаполнено(СтруктураПараметров.СсылкаПоиска) Тогда
				МассивОграничений = СтруктураПараметров.СсылкаПоиска;
			Иначе
				
				Если РезультирующийСписокСсылок.Строки.Количество() = 0 Тогда
					МассивОграничений = Неопределено;
				Иначе
					МассивОграничений = РезультирующийСписокСсылок.Строки.ВыгрузитьКолонку("Значение");
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивОграничений = НЕопределено;
		КонецЕсли;
		
		// ищем ссылки на объекты с указанными ограничениями
		СписокТекущихСсылок = ПолучитьТекущиеСсылкиОбъектов(СтрокаИзДерева, БазоваяТаблица, ЧислоЭлементовДляПоказа, 
				МассивОграничений, ПоискПересеченияПоНесколькимТаблицам, СтруктураПараметров.УказыватьОбластиНахожденияСсылок);
		
		// дополняем найденные ссылки к уже имеющимся
		ДополнитьСписокСсылок(РезультирующийСписокСсылок, СписокТекущихСсылок, НЕ ПоискПересеченияПоНесколькимТаблицам, СтрокаИзДерева.ОписаниеТаблицыПоиска,
			СтрокаИзДерева.ТаблицаПоиска, СтруктураПараметров.УказыватьОбластиНахожденияСсылок); 
		
		// если ищем по принципу удовлетворения всем условиям и в списке нет ссылок - то все, дальше искать нет смысла
		// если ищем первые Х элементов по принципу удовлетворению любому условию и нашли не менее Х элементов - тоже нет смысла продолжать поиски
		Если ПоискПересеченияПоНесколькимТаблицам И РезультирующийСписокСсылок.Строки.Количество() = 0 Тогда
			Возврат РезультирующийСписокСсылок;
		КонецЕсли;
		
		Если (ЧислоЭлементовДляПоказа <> 0) И (НЕ ПоискПересеченияПоНесколькимТаблицам) И (РезультирующийСписокСсылок.Строки.Количество() >= ОграничениеПоКоличеству) Тогда
			
			// если превышен лимит и он не равен 51, то на этом все прекращаем
			Если ОграничениеПоКоличеству <> 51 Тогда
				#Если Клиент Тогда
					Предупреждение("По заданным ограничениям найдено более " + Строка(ОграничениеПоКоличеству - 1) + " объектов. Установите более строгие ограничения.", 30, "Поиск объектов");
				#КонецЕсли
				Возврат Неопределено;
			КонецЕсли;
			
			мНеОграничиватьКоличествоОбъектовПоиска = НужноПродолжитьПоиск(мНеОграничиватьКоличествоОбъектовПоиска, ОграничениеПоКоличеству);
			Если мНеОграничиватьКоличествоОбъектовПоиска Тогда
				ЧислоЭлементовДляПоказа = 0;
			Иначе
				Возврат РезультирующийСписокСсылок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; // Для Каждого СтрокаИзДерева из СтрокаДереваПоиска.Строки	
	
	Возврат РезультирующийСписокСсылок;
		
КонецФункции

// Функция формирует имена полей по которым ведется поиск данных
Функция СформироватьИменаПолейПоиска(СписокПолейДляПоиска) Экспорт
	
	СтрокаПолейПоиска = "";
	Если СписокПолейДляПоиска = Неопределено Тогда
		Возврат СтрокаПолейПоиска;
	КонецЕсли;
	
	Для Каждого Поле Из СписокПолейДляПоиска Цикл
		Если Поле.Пометка Тогда
			СтрокаПолейПоиска = СтрокаПолейПоиска + ", " + Поле.Представление;	
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПолейПоиска) Тогда
		СтрокаПолейПоиска = Сред(СтрокаПолейПоиска, 3);	
	КонецЕсли;
	
	Возврат СтрокаПолейПоиска;
	
КонецФункции

//Процедура из текущего узла дерева копирует все содержимое в новое дерево
Процедура СкопироватьПоддерево(ТекущийУровеньДерева, СтрокаДерева, СоздаватьПостроительОтчета, Знач ВизуальныйПоиск = Истина) Экспорт
	
	ТекущийУровеньДерева.Строки.Очистить();
	
	Для Каждого СтрокаТекущегоДерева Из СтрокаДерева.Строки Цикл
		
		НоваяСтрокаДерева = ТекущийУровеньДерева.Строки.Добавить();
		// копируем все колонки
		НоваяСтрокаДерева.ИмяОбъекта = СтрокаТекущегоДерева.ИмяОбъекта;
		НоваяСтрокаДерева.ОписаниеТаблицыПоиска = СтрокаТекущегоДерева.ОписаниеТаблицыПоиска;
		НоваяСтрокаДерева.ТаблицаПоиска = СтрокаТекущегоДерева.ТаблицаПоиска;
		НоваяСтрокаДерева.ПолеСвязки = СтрокаТекущегоДерева.ПолеСвязки;
		НоваяСтрокаДерева.УникальноеИмяТаблицы = СтрокаТекущегоДерева.УникальноеИмяТаблицы;
		Если СоздаватьПостроительОтчета Тогда 
			
			#Если Клиент тогда
				Если ВизуальныйПоиск Тогда
					НоваяСтрокаДерева.Построитель = Новый ПостроительОтчета();
				Иначе
					НоваяСтрокаДерева.Построитель = Новый ПостроительЗапроса();
				КонецЕсли;
			#Иначе
				НоваяСтрокаДерева.Построитель = Новый ПостроительЗапроса();
			#КонецЕсли
		
			// настройки построителя
			НоваяСтрокаДерева.НастройкиПостроителя = СтрокаТекущегоДерева.НастройкиПостроителя;
						
		КонецЕсли;
		НоваяСтрокаДерева.ДополнительныеОграничения = "";
		
		Если СтрокаТекущегоДерева.СписокПолей <> Неопределено Тогда
			// для списка полей поиска пишем строковое представление
			НоваяСтрокаДерева.СписокПолей = СтрокаТекущегоДерева.СписокПолей.Скопировать();  
	       	НоваяСтрокаДерева.ПоляПоиска = СформироватьИменаПолейПоиска(НоваяСтрокаДерева.СписокПолей); 
		КонецЕсли;
		НоваяСтрокаДерева.Пометка = СтрокаТекущегоДерева.Пометка И НЕ ПустаяСтрока(НоваяСтрокаДерева.ПоляПоиска);
		
		Если СтрокаТекущегоДерева.Строки.Количество() > 0 Тогда
			СкопироватьПоддерево(НоваяСтрокаДерева, СтрокаТекущегоДерева, Ложь)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// процедура создает или дополняет колонками дерево настроек поиска
Процедура СоздатьКолонкиНастроекДереваПоиска(ДеревоНастроек, ДобавитьТолькоНеВизуальныеКолонки = Ложь) Экспорт
	
	Если Не ДобавитьТолькоНеВизуальныеКолонки Тогда
		
		ДеревоНастроек.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
		
		ТипСтрока200 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));
		ДеревоНастроек.Колонки.Добавить("ИмяОбъекта", ТипСтрока200);
		
		ТипСтрока500 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
		ДеревоНастроек.Колонки.Добавить("ОписаниеТаблицыПоиска", ТипСтрока500);
		
		ТипСтрока0 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0));
		ДеревоНастроек.Колонки.Добавить("ПоляПоиска", ТипСтрока0);
		
		ДеревоНастроек.Колонки.Добавить("ДополнительныеОграничения", ТипСтрока0);
		
		ДеревоНастроек.Колонки.Добавить("ТаблицаПоиска", ТипСтрока200);
		
		ДеревоНастроек.Колонки.Добавить("ПолеСвязки", ТипСтрока200);
		
	КонецЕсли;
	
	// колонки которые в форме поиска визуально не отображаются
	ДеревоНастроек.Колонки.Добавить("Построитель");
	ДеревоНастроек.Колонки.Добавить("ТипОбъектаПоиска");
	ДеревоНастроек.Колонки.Добавить("СписокПолей");
	ДеревоНастроек.Колонки.Добавить("НастройкиПостроителя");
	ДеревоНастроек.Колонки.Добавить("УникальноеИмяТаблицы");

КонецПроцедуры

//Функция подготавливает объекты для поиска данных определенного типа
// Входной параметр: 
//		Тип - тип объектов которые будем искать
//		ДеревоНастроекПоиска - дерево в котором хранятся настройки поиска
// Выходные параметры:
//		СтрокаДереваПоискаПоТекущемуТипу - Строка дерева поиска по текущему типу
//		ДеревоПоискаДляОбъектовТекущегоТипа - дерево настроек поиска по типу объектов поиска
// Результат функции - булево, удачно или нет произошла инициализация поиска
Функция ИнициализироватьПоискОбъектовПоТипу(Тип, ДеревоНастроекПоиска, СтрокаДереваПоискаПоТекущемуТипу, 
	ДеревоПоискаДляОбъектовТекущегоТипа, Знач ВизуальныйПоиск = Истина, Знач ДополнительныеОтборы = Неопределено,
	Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	СтрокаДереваПоискаПоТекущемуТипу = ДеревоНастроекПоиска.Строки.Найти(Тип, "ТипОбъектаПоиска", Ложь);
	Если СтрокаДереваПоискаПоТекущемуТипу = Неопределено Тогда
		
		// поиск не возможен по указанному типу
		#Если Клиент Тогда
		Предупреждение("Поиск для объектов с типом: " + Строка(Тип) + " не поддержан.");
		#КонецЕсли
		
		Возврат Ложь;
	КонецЕсли;
	
	СкопироватьПоддерево(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаДереваПоискаПоТекущемуТипу, Истина, ВизуальныйПоиск);
	
	ИнициализироватьПостроителиЗапроса(ДеревоПоискаДляОбъектовТекущегоТипа);
	
	// восстановим настройки построителей
	Для Каждого СтрокаДерева Из ДеревоПоискаДляОбъектовТекущегоТипа.Строки Цикл
			
		УстановитьОтборыПостроителюДляСтрокиДерева(СтрокаДерева.Построитель, СтрокаДерева.НастройкиПостроителя);
			
		ЭтоБазоваяТаблица = СтрокаДерева.ИмяОбъекта = "0";
		Если ЭтоБазоваяТаблица Тогда
			ДополнитьОтборыПостроителя(СтрокаДерева.Построитель, ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
		КонецЕсли;
			
		СтрокаДерева.ДополнительныеОграничения = Строка(СтрокаДерева.Построитель.Отбор);
					
	КонецЦикла;
			
	Возврат Истина;
			
КонецФункции

// процедура отмечает необходимые поля для поиска в дереве настроек поиска по списку полей
Процедура ОтметитьПоляДляПоискаВДеревеНастроек(ДеревоНастроек, СписокПолейПоиска)
	
	Если СписокПолейПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// пробегаем все области поиска, а поля отмечаем только в области поиска самого объекта
	Для Каждого ОбластьНастройки Из ДеревоНастроек.Строки Цикл
		
		ОбластьНастройки.Пометка = Истина;
		СписокПолей = ОбластьНастройки.СписокПолей;
		СписокПолей.ЗаполнитьЗначения(Ложь, "Пометка");
		
		Если ОбластьНастройки.ИмяОбъекта = "0" Тогда
			// отмечаем только те поля, которые есть в списке
			Для Каждого СтрокаПоля Из СписокПолей Цикл
				
				ОтмечатьПоле = СписокПолейПоиска.НайтиПоЗначению(Врег(СтрокаПоля.Значение));
				СтрокаПоля.Пометка = (ОтмечатьПоле <> Неопределено);
				
			КонецЦикла;
			
		Иначе
			// по остальным типам не надо искать
			ОбластьНастройки.Пометка = Ложь;
			
		КонецЕсли;
		
		ОбластьНастройки.ПоляПоиска = СформироватьИменаПолейПоиска(СписокПолей);
		
	КонецЦикла;
	
КонецПроцедуры

// процедура формирует список найденных ссылок на объекты по результирующей структуре
Функция СформироватьСписокНайденныхОбъектов(ИтоговыйСписокНайденныхСсылок) Экспорт
	
	СписокСсылок = Новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(ИтоговыйСписокНайденныхСсылок.Строки.ВыгрузитьКолонку("Значение"));
	
	Возврат СписокСсылок;
	
КонецФункции 

// функция формирует список полей по которым производится поиск данных
Функция СформироватьСписокПолейПоиска(Список, Знач ТипДанныхСправочника = Неопределено) Экспорт
	
	СписокПолейПоиска = Новый СписокЗначений;
	
	Если ТипДанныхСправочника = Неопределено Тогда
		
		МетаданныеСправочника = Неопределено;
		// определяем что под данными лежит
		СписокДанных = Список.Значение;
		Если СписокДанных = Неопределено Тогда
			Возврат СписокПолейПоиска;
		КонецЕсли;
	
	Иначе
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипДанныхСправочника);

	КонецЕсли;
	
	
	Для Каждого Колонка Из Список.Колонки Цикл 
		
		Если Колонка.Видимость = Ложь ИЛИ ПустаяСтрока(Колонка.Данные) Тогда
			Продолжить;
		КонецЕсли;
			
		КолонкаПодходит = Ложь;
		// и данные есть и колонка видима, остается определиться с типами данных колонки
		Попытка
				
			Если МетаданныеСправочника = Неопределено Тогда
					
				КолонкаПоиска = СписокДанных.Колонки[Колонка.Данные];
				СписокТипов = КолонкаПоиска.ОграничениеТипа; 
					
			Иначе
					
				Если ВРЕГ(Колонка.Данные) = "КОД" Тогда
						
					Если МетаданныеСправочника.ДлинаКода = 0 Тогда
						СписокТипов = Неопределено;
					Иначе
						СписокТипов = МетаданныеСправочника.ТипКода;
					КонецЕсли;
						
				ИначеЕсли ВРЕГ(Колонка.Данные) = "НАИМЕНОВАНИЕ" Тогда
						
					Если (МетаданныеСправочника.ДлинаНаименования <> 0) Тогда
						СписокТипов = Тип("Строка");	
					Иначе
						СписокТипов = Неопределено;	
					КонецЕсли;
						
				Иначе	
						
					МетаданныеКолонки = МетаданныеСправочника.Реквизиты[Колонка.Данные];
						
					Если МетаданныеКолонки <> Неопределено Тогда
						СписокТипов = МетаданныеКолонки.Тип.Типы();
							
					КонецЕсли;
						
				КонецЕсли;
					
			КонецЕсли;
				
			// по типам колонки определим можем ли мы по ней наложить ограничений
			КолонкаПодходит = ОпределитьВозможностьОграниченияПоВсемТипам(СписокТипов);
				
		Исключение
			// колонки в данных нет
			КолонкаПодходит = Ложь;
		КонецПопытки;
			
		Если КолонкаПодходит Тогда
			СписокПолейПоиска.Добавить(Врег(Колонка.Данные));
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СписокПолейПоиска;
	
КонецФункции

// процедура создает нужные колонки для таблицы результирующих значений
Процедура СоздатьКолонкиУТаблицыРезультирующихЗначений(ТаблицаРезультирующихЗначений) Экспорт
	
	ТаблицаРезультирующихЗначений.Колонки.Добавить("Значение");
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(мТипСтрока);
	КС = Новый КвалификаторыСтроки(0);
	ТаблицаРезультирующихЗначений.Колонки.Добавить("ОбластьПоиска", Новый ОписаниеТипов(МассивТипов,,КС), "Область поиска", 60);
	
	ТаблицаРезультирующихЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов(МассивТипов,,КС), "Представление", 60);
	ТаблицаРезультирующихЗначений.Колонки.Добавить("КлючОбъекта", , "КлючОбъекта", 60);
	
КонецПроцедуры


// функция выполняет запрос для построителя и получает от него результат
Функция ВыполнитьЗапросДанных(ПостроительОтчета, СтрокаДляОграничения, ЧислоДляОграничения) Экспорт

	ПостроительОтчета.Параметры.Вставить("ТекстАвтоПодбора", СтрокаДляОграничения);
	ПостроительОтчета.Параметры.Вставить("ТекстАвтоПодбораЧисло", ЧислоДляОграничения);
	
	ПостроительОтчета.Выполнить();
	СписокТекущихСсылок = ПостроительОтчета.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Возврат СписокТекущихСсылок;

КонецФункции

// функция формирует структуру параметров для вызова поиска
Функция СформироватьСтруктуруПараметровПоиска(ДеревоПоиска = Неопределено, Знач СтрокаПоиска = "", Знач ОтборПоВсемУсловиям = Ложь,
			Знач РасширенныйПоиск = Истина, Знач ДополнительныеОтборы = Неопределено, 
			Знач СсылкаПоиска = Неопределено, Знач МаксимальноеКоличествоОбъектовДляПоиска = 0,
			Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДеревоПоиска", ДеревоПоиска);
	СтруктураПараметров.Вставить("СтрокаПоиска", СтрокаПоиска);
	СтруктураПараметров.Вставить("ОтборОбъектовУдовлетворяющихВсемУсловиям", ОтборПоВсемУсловиям);
	СтруктураПараметров.Вставить("УказыватьОбластиНахожденияСсылок", РасширенныйПоиск);
	СтруктураПараметров.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
	СтруктураПараметров.Вставить("НеИспользуемыеПараметрыОтбора", НеИспользуемыеПараметрыОтбора);
	СтруктураПараметров.Вставить("СсылкаПоиска", СсылкаПоиска);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОбъектовДляПоиска", МаксимальноеКоличествоОбъектовДляПоиска);
	
	Возврат СтруктураПараметров;
	
КонецФункции


// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ВНЕШНЕГО ВЫЗОВА
///////////////////////////////////////////////////////////////////////////////

// процедура устанавливает у одного узла дерева такие же настройки как и у другого
Процедура УстановитьНастройкиУПараметровПоиска(СтрокаДереваПриемник, СтрокаДереваИсточник, Знач НаложитьДопОграничения = Ложь, 
	ДополнительныеОтборы = Неопределено, Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	// 1 сохраняем порядок следования областей поиска
	// 2 сохраняем пометки поиска для областей по строке
	// 3 сохраняем какие поля отмечены для поиска

	НомерЭлементаДерева = 0;
	ОтветПользователяОСохраненииОтборов = Неопределено;
	Для Каждого СтрокаТекущегоДерева Из СтрокаДереваИсточник.Строки Цикл
		
		СтрокаДереваМакета = НайтиСтрокуДереваПоТаблицеПоискаИПолюСвязки(СтрокаДереваПриемник, 
			СтрокаТекущегоДерева.ТаблицаПоиска, СтрокаТекущегоДерева.ПолеСвязки);
			
		ИндексСтроки = СтрокаДереваПриемник.Строки.Индекс(СтрокаДереваМакета);
		
		// перемещаем строку куда надо
		Если ИндексСтроки <> НомерЭлементаДерева Тогда
			СтрокаДереваПриемник.Строки.Сдвинуть(СтрокаДереваМакета, НомерЭлементаДерева - ИндексСтроки);
		КонецЕсли;
		
		СтрокаДереваМакета.Пометка = СтрокаТекущегоДерева.Пометка;
		СтрокаДереваМакета.НастройкиПостроителя = СтрокаТекущегоДерева.НастройкиПостроителя;
				
		// отбор построителю устанавливаем
		УстановитьОтборыПостроителюДляСтрокиДерева(СтрокаДереваМакета.Построитель, СтрокаДереваМакета.НастройкиПостроителя);
		Если НаложитьДопОграничения
			И (СтрокаДереваМакета.ИмяОбъекта = "0") Тогда
			
			ДополнитьОтборыПостроителя(СтрокаДереваМакета.Построитель, ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
			
		КонецЕсли;
        		       				
		// настройки отмеченных для поиска колонок
		// только галочки копируем
		Для Каждого СтрокаПоля Из СтрокаДереваМакета.СписокПолей Цикл
			
			СтрокаПоляТекущегоДерева = СтрокаТекущегоДерева.СписокПолей.Найти(СтрокаПоля.Значение, "Значение");
			Если СтрокаПоляТекущегоДерева = Неопределено Тогда
				СтрокаПоля.Пометка = Ложь;
			Иначе
				СтрокаПоля.Пометка = СтрокаПоляТекущегоДерева.Пометка;	
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДереваМакета.ПоляПоиска = СформироватьИменаПолейПоиска(СтрокаДереваМакета.СписокПолей);
		НомерЭлементаДерева = НомерЭлементаДерева + 1;
	КонецЦикла;
	
КонецПроцедуры


// установка общих параметров поиска по настройке
Процедура УстановитьПараметрыПоискаДанныхПоНастройке(ДеревоПоискаДляОбъектов, ДанныеНастройкиПоиска, 
	Знач ДополнительныеОтборы = Неопределено, Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	Если ДанныеНастройкиПоиска = Неопределено
		ИЛИ ТипЗнч(ДанныеНастройкиПоиска) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СвойствоДеревоНастроек = Неопределено;
	Если ДанныеНастройкиПоиска.Свойство("ДеревоНастроек", СвойствоДеревоНастроек) Тогда
			
		УстановитьПараметрыДереваПоискаДанныхПоНастройке(ДеревоПоискаДляОбъектов, СвойствоДеревоНастроек, ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
			
	КонецЕсли;	
		
	СвойствоДеревоНастроек = Ложь;
	Если ДанныеНастройкиПоиска.Свойство("ОтборОбъектовУдовлетворяющихВсемУсловиям", СвойствоДеревоНастроек) Тогда
			
		ОтборОбъектовУдовлетворяющихВсемУсловиям = СвойствоДеревоНастроек;
			
	КонецЕсли;
		
КонецПроцедуры	


// процедура устанавливает параметры поиска для текущей настройки
Процедура УстановитьПараметрыДереваПоискаДанныхПоНастройке(ДеревоПоискаДляОбъектов, ДанныеНастройкиПоиска, 
	Знач ДополнительныеОтборы = Неопределено, Знач НеИспользуемыеПараметрыОтбора = Неопределено) Экспорт
	
	// настройки по - умолчанию надо еще применить к этому дереву
	Если ДанныеНастройкиПоиска <> Неопределено
		И ДанныеНастройкиПоиска.Колонки.Количество() > 0 Тогда
		
		Для Каждого СтрокаДереваМакета Из ДеревоПоискаДляОбъектов.Строки Цикл
			
			СтрокаДереваИсточник = ДанныеНастройкиПоиска.Строки.Найти(СтрокаДереваМакета.ИмяОбъекта, "ИмяОбъекта", Ложь);
			
			Если СтрокаДереваИсточник <> Неопределено Тогда
				
				УстановитьНастройкиУПараметровПоиска(СтрокаДереваМакета, СтрокаДереваИсточник, , ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


// процедура устанавливает настройки отборов для конкретной строки дерева поиска
Процедура УстановитьОтборыПостроителюДляСтрокиДерева(Построитель, НастройкиПостроителя) Экспорт
	
	Если Построитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем настройки построителя
	Если НастройкиПостроителя = Неопределено Тогда
		
		// грохаем все отборы
		Для Сч = 1 По Построитель.Отбор.Количество() Цикл
			Построитель.Отбор.Удалить(0);	
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;

	
	Если ТипЗнч(Построитель) = Тип("ПостроительЗапроса") Тогда
		
		#Если Клиент Тогда
			
			ВременныйПостроительОтчета = Новый ПостроительОтчета;
			
			ВременныйПостроительОтчета.Текст = Построитель.Текст;
			
			ВременныйПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
			
			КопироватьОтборПостроителяЗапроса(Построитель, ВременныйПостроительОтчета);
			
		#КонецЕсли		
				
	Иначе
		
		Построитель.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
			
	КонецЕсли;
     	
КонецПроцедуры

// функция выполняет поиск данных с показом формы редактирования настроек поиска объектов
Функция ВыполнитьИнтерактивныйПоискОбъектов(ТипОбъектовПоиска, ВизуальноеОтображениеРезультатовПоиска,
	ДополнительныеОтборы = Неопределено, Знач ДанныеНеИспользуемыеПараметрыОтбора = Неопределено,
	РезультирующееДеревоПоиска = Неопределено, СтрокаПоиска = "", Знач ФормаВладелец = Неопределено) Экспорт
	
	ФормаПоиска = ПолучитьФорму("Форма", ФормаВладелец);
	ФормаПоиска.ТипОбъектовПоиска = ТипОбъектовПоиска;
	ФормаПоиска.ВизуальноеОтображениеРезультатовПоиска = ВизуальноеОтображениеРезультатовПоиска;
	ФормаПоиска.ДополнительныеОтборы = ДополнительныеОтборы;
	ФормаПоиска.НеИспользуемыеПараметрыОтбора = ДанныеНеИспользуемыеПараметрыОтбора;
	ФормаПоиска.ИнформацияДляПоиска = СтрокаПоиска;
	
	УказыватьОбластиНахожденияСсылок = ВизуальноеОтображениеРезультатовПоиска;
	ФормаПоиска.ЭлементыФормы.УказыватьОбластиНахожденияСсылок.Видимость = ВизуальноеОтображениеРезультатовПоиска;

	РезультатМодальногоОткрытия = ФормаПоиска.ОткрытьМодально();
	РезультирующееДеревоПоиска = Неопределено;
	
	Если РезультатМодальногоОткрытия = Истина Тогда
		
		РезультирующееДеревоПоиска = ФормаПоиска.ПолучитьСтруктуруТекущихНастроекПоиска();
		СтрокаПоиска = ФормаПоиска.ИнформацияДляПоиска;
		
		Возврат ФормаПоиска.СписокСсылок.Скопировать();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// процедура выполняет поиск данных по дереву поиска
Функция ВыполнитьПрограммныйПоискДанных(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаПоиска, Знач МаксимальноеКоличествоОбъектовДляПоиска,
		Знач ПоказыватьФормуПрогресса)
	
	#Если Клиент Тогда
		Состояние("Поиск объектов");
	#КонецЕсли

	Если ПоказыватьФормуПрогресса Тогда
		
		мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		мФормаПрогрессора.НаименованиеОбработкиДанных = "Поиск объектов по установленным ограничениям ...";
		мФормаПрогрессора.Значение = 0;
		мФормаПрогрессора.КомментарийЗначения = "Поиск информации ...";
		
	Иначе
		
		мФормаПрогрессора = Неопределено;
		
    КонецЕсли;
	
	// САМ ПОИСК ДАННЫХ
	СтруктураПараметров = СформироватьСтруктуруПараметровПоиска(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаПоиска, ОтборОбъектовУдовлетворяющихВсемУсловиям,
			Ложь, , , МаксимальноеКоличествоОбъектовДляПоиска);
	
	ИтоговыйСписокНайденныхСсылок = ПолучитьДанныеПоПараметрамПоиска(СтруктураПараметров);
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	Если (мФормаПрогрессора <> Неопределено)
		И мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	
	Если ИтоговыйСписокНайденныхСсылок <> Неопределено Тогда
		СписокСсылок = СформироватьСписокНайденныхОбъектов(ИтоговыйСписокНайденныхСсылок);
		Возврат СписокСсылок.Скопировать();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// функция выполняет поиск данных с показом формы редактирования настроек поиска объектов
Функция ВыполнитьПрограммныйПоискОбъектовПоСпискуПолей(ТипОбъектовПоиска, СписокПолейПоиска, 
	СтрокаПоиска, Знач МаксимальноеКоличествоОбъектовДляПоиска = 0,
	Знач ДополнительныйОтбор = Неопределено, Знач ПоказыватьФормуПрогресса = Ложь) Экспорт
	
	ДеревоНастроекПоиска = Новый ДеревоЗначений;
	СоздатьКолонкиНастроекДереваПоиска(ДеревоНастроекПоиска);
	
	ДеревоПоискаДляОбъектовТекущегоТипа = Новый ДеревоЗначений;
	СоздатьКолонкиНастроекДереваПоиска(ДеревоПоискаДляОбъектовТекущегоТипа);
	
	// загружаем макет настроек поиска
	РезультатЗагрузки = ЗагрузитьДеревоПоискаИзМакета(ДеревоНастроекПоиска);
	Если НЕ РезультатЗагрузки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// отборов в списке может и не быть
	СтрокаДереваПоискаПоТекущемуТипу = Неопределено;
	ИнициализироватьПоискОбъектовПоТипу(ТипОбъектовПоиска, ДеревоНастроекПоиска, СтрокаДереваПоискаПоТекущемуТипу, 
		ДеревоПоискаДляОбъектовТекущегоТипа, Ложь, ДополнительныйОтбор);
		
	// надо отметить для поиска только поля которые есть в списке, для остальных полей надо флаг выбора убрать
	Для Каждого ЭлементПолей Из СписокПолейПоиска Цикл
		ЭлементПолей.Значение = Врег(ЭлементПолей.Значение);
	КонецЦикла;
	ОтметитьПоляДляПоискаВДеревеНастроек(ДеревоПоискаДляОбъектовТекущегоТипа, СписокПолейПоиска);

	СписокСсылок = ВыполнитьПрограммныйПоискДанных(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаПоиска, МаксимальноеКоличествоОбъектовДляПоиска,
		ПоказыватьФормуПрогресса);
		
	Возврат	СписокСсылок;
			
КонецФункции

// функция выполняет поиск данных с показом формы редактирования настроек поиска объектов
Функция ВыполнитьПрограммныйПоискОбъектовПоНастройкеПоиска(ТипОбъектовПоиска, НастройкаПоиска, 
	СтрокаПоиска, Знач МаксимальноеКоличествоОбъектовДляПоиска = 0,
	Знач ДополнительныйОтбор = Неопределено, Знач ПоказыватьФормуПрогресса = Ложь) Экспорт
	
	ДеревоНастроекПоиска = Новый ДеревоЗначений;
	СоздатьКолонкиНастроекДереваПоиска(ДеревоНастроекПоиска);
	
	ДеревоПоискаДляОбъектовТекущегоТипа = Новый ДеревоЗначений;
	СоздатьКолонкиНастроекДереваПоиска(ДеревоПоискаДляОбъектовТекущегоТипа);
	
	// загружаем макет настроек поиска
	РезультатЗагрузки = ЗагрузитьДеревоПоискаИзМакета(ДеревоНастроекПоиска);
	Если НЕ РезультатЗагрузки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// устанавливаем настройку поиска данных
	УстановитьПараметрыПоискаДанныхПоНастройке(ДеревоНастроекПоиска, НастройкаПоиска, ДополнительныйОтбор);
	
	// отборов в списке может и не быть
	СтрокаДереваПоискаПоТекущемуТипу = Неопределено;
	ИнициализироватьПоискОбъектовПоТипу(ТипОбъектовПоиска, ДеревоНастроекПоиска, СтрокаДереваПоискаПоТекущемуТипу, 
		ДеревоПоискаДляОбъектовТекущегоТипа, Ложь, ДополнительныйОтбор);
	
	СписокСсылок = ВыполнитьПрограммныйПоискДанных(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаПоиска, МаксимальноеКоличествоОбъектовДляПоиска,
		ПоказыватьФормуПрогресса);
		
	Возврат	СписокСсылок;
	
КонецФункции


//Функция определяет можно ли по данным настройкам поиска производить поиск объектов
Функция ОпределитьВозможностьПроведенияПоискаДанных(ТипОбъектовПоиска, НастройкаПоиска, 
	СтрокаПоиска) Экспорт
	
	ДеревоНастроекПоиска = Новый ДеревоЗначений;
	СоздатьКолонкиНастроекДереваПоиска(ДеревоНастроекПоиска);
	
	ДеревоПоискаДляОбъектовТекущегоТипа = Новый ДеревоЗначений;
	СоздатьКолонкиНастроекДереваПоиска(ДеревоПоискаДляОбъектовТекущегоТипа);
	
	// загружаем макет настроек поиска
	РезультатЗагрузки = ЗагрузитьДеревоПоискаИзМакета(ДеревоНастроекПоиска);
	Если НЕ РезультатЗагрузки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// устанавливаем настройку поиска данных
	УстановитьПараметрыПоискаДанныхПоНастройке(ДеревоНастроекПоиска, НастройкаПоиска);
	
	// отборов в списке может и не быть
	СтрокаДереваПоискаПоТекущемуТипу = Неопределено;
	ИнициализироватьПоискОбъектовПоТипу(ТипОбъектовПоиска, ДеревоНастроекПоиска, СтрокаДереваПоискаПоТекущемуТипу, 
		ДеревоПоискаДляОбъектовТекущегоТипа, Ложь);
	
	СтруктураПараметров = СформироватьСтруктуруПараметровПоиска(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаПоиска, ОтборОбъектовУдовлетворяющихВсемУсловиям,
			Ложь, , , 1);
			
	СформироватьГлобальныеПараметрыДляЗапроса(СтруктураПараметров, Ложь);
	КоличествоЗапросовПоиска = 0;
	ЧислоТаблицПоиска = ОпределитьНаличиеТаблицДляПоиска(СтруктураПараметров, КоличествоЗапросовПоиска);		
	
	Возврат	(ЧислоТаблицПоиска > 0);	
	
КонецФункции

// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ
///////////////////////////////////////////////////////////////////////////////

мТипСтрока = Тип("Строка");
мТипЧисло = Тип("Число");

мУникальныйНомер = 0;
мНеОграничиватьКоличествоОбъектовПоиска = Неопределено;

УказыватьОбластиНахожденияСсылок = Ложь;

мВсеСсылкиСправочников = Справочники.ТипВсеСсылки();
мВсеСсылкиПлановВидовХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки();
мВсеСсылкиПеречислений = Перечисления.ТипВсеСсылки();

мФормаПрогрессора = Неопределено;

НастройкаПоискаДанных = Неопределено;