#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств
//  ПКЗ  - правило конвертации значений

Перем мТекстАлгоритма Экспорт;

Перем мЗапросПоискаПравилКонвертацииЗначений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьДанныеОСинхронизацииЗначений() Экспорт
	
	ВыполнитьСинхронизацию();	
	
КонецПроцедуры

// Осуществляет синхронизацию значений источника и приемника для ПКО.
// Синхронизация осуществляется по наименованиям значений и с учетом
// принадлежности родителю. Устанавливает соответствие существующих 
// ПКС свойствам.
//
// Параметры:
//  Правило        - ПКО, для которого осуществляется синхронизация свойств
//
// Возвращаемое значение:
//  Истина, если передано существующее правило. Ложь если правило пустое.
// 
Функция ВыполнитьСинхронизацию() Экспорт

	Если ПравилоКО.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПравилоКО.Источник = Null И ПравилоКО.Приемник = Null Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаРезультат.Строки.Очистить();
	
	Если ТаблицаРезультат.Колонки.Количество() = 0 Тогда
	
		ТаблицаРезультат.Колонки.Добавить("ПравилоКЗ",     ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииЗначений"), "Правило КЗ",    25);
	    ТаблицаРезультат.Колонки.Добавить("Источник",      ОписаниеТипа("СправочникСсылка.Значения"),                   "Источник",      25);
		ТаблицаРезультат.Колонки.Добавить("Приемник",      ОписаниеТипа("СправочникСсылка.Значения"),                   "Приемник",      25);
		ТаблицаРезультат.Колонки.Добавить("ТипИсточника",,                                                              "Тип источника", 25);
	    ТаблицаРезультат.Колонки.Добавить("ТипПриемника",,                                                              "Тип приемника", 25);
		ТаблицаРезультат.Колонки.Добавить("Пометка",       ОписаниеТипа("Число"));
		ТаблицаРезультат.Колонки.Добавить("ИсточникНаименование");
		
		ТаблицаРезультат.Колонки.Добавить("СинонимИсточника");
    	ТаблицаРезультат.Колонки.Добавить("СинонимПриемника");
		
	КонецЕсли;

	СинхронизироватьЗначения(ТаблицаРезультат.Строки, ПравилоКО.Источник, ПравилоКО.Приемник,,, Истина, Истина);

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДАННЫМИ

// Осуществляет синхронизацию значений источника и приемника.
//
// Параметры:
//  Строки                           - Коллекция строк дерева значений
//  Источник                         - Объект источник
//  Приемник                         - Объект приемник
//  ЗначениеИсточникРодитель         - Родитель значений источника
//                                     для синхронизации
//  ЗначениеПриемникРодитель         - Родитель значений приемника
//                                     для синхронизации
//  ЗагружатьПравила                 - Флаг, определяющий необходимость
//                                     загрузки существующих ПКЗ
//  ИскатьПравила                    - Флаг, определяющий необходимость
//                                     поиска существующих ПКЗ
//
Процедура СинхронизироватьЗначения(Строки,
	                               Источник,
								   Приемник,
								   ЗначениеИсточникРодитель = Неопределено,
								   ЗначениеПриемникРодитель = Неопределено,
								   ЗагружатьПравила = Ложь,
								   ИскатьПравила = Ложь) Экспорт

	СоответствиеЗначенияИсточника = Новый Соответствие;
	СоответствиеЗначенияПриемника = Новый Соответствие;
	
	Если ЗагружатьПравила Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	ПравилаКонвертацииЗначений.Порядок,
		               |	ПравилаКонвертацииЗначений.Ссылка КАК Ссылка,
		               |	ПравилаКонвертацииЗначений.ЭтоГруппа КАК ЭтоГруппа,
		               |	ПравилаКонвертацииЗначений.Родитель КАК Родитель,
		               |	ПравилаКонвертацииЗначений.Источник КАК Источник,
		               |	ПравилаКонвертацииЗначений.Приемник КАК Приемник,
		               |	ПравилаКонвертацииЗначений.Источник.Родитель КАК РодительИсточника,
		               |	ПравилаКонвертацииЗначений.Приемник.Родитель КАК РодительПриемника,
		               |	ПравилаКонвертацииЗначений.Источник.Наименование КАК НаименованиеИсточника,
		               |	ПравилаКонвертацииЗначений.Приемник.Наименование КАК НаименованиеПриемника,
					   |	ПравилаКонвертацииЗначений.Источник.Синоним КАК СинонимИсточника,
		               |	ПравилаКонвертацииЗначений.Приемник.Синоним КАК СинонимПриемника
		               |ИЗ
		               |	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
		               |ГДЕ
		               |	ПравилаКонвертацииЗначений.Владелец = &Владелец
		               |	И ПравилаКонвертацииЗначений.ЭтоГруппа = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Родитель,
		               |	ПравилаКонвертацииЗначений.Порядок";
					   
		Запрос.УстановитьПараметр("Владелец", ПравилоКО);
		
		ПравилаКЗ = Запрос.Выполнить().Выбрать();
		
		Пока ПравилаКЗ.Следующий() Цикл
            		
			Если НЕ ПравилаКЗ.Источник.Пустая() Тогда

				Если СоответствиеЗначенияИсточника[ПравилаКЗ.РодительИсточника] = Неопределено Тогда
					НоваяСтрока = Строки.Добавить();
				Иначе
					НоваяСтрока = СоответствиеЗначенияИсточника[ПравилаКЗ.РодительИсточника].Строки.Добавить();
				КонецЕсли;

				НоваяСтрока.Источник     = ПравилаКЗ.Источник;
				НоваяСтрока.ИсточникНаименование = ПравилаКЗ.НаименованиеИсточника;
				НоваяСтрока.СинонимИсточника = ПравилаКЗ.СинонимИсточника;
				НоваяСтрока.Приемник     = ПравилаКЗ.Приемник;
				НоваяСтрока.СинонимПриемника = ПравилаКЗ.СинонимПриемника;
				НоваяСтрока.ПравилоКЗ    = ПравилаКЗ.Ссылка;

				СоответствиеЗначенияИсточника.Вставить(ПравилаКЗ.Источник, НоваяСтрока);

				Если НЕ ПравилаКЗ.Приемник.Пустая() Тогда
					СоответствиеЗначенияПриемника.Вставить(ПравилаКЗ.Приемник, НоваяСтрока);
				КонецЕсли;

			Иначе

				Если СоответствиеЗначенияПриемника[ПравилаКЗ.РодительПриемника] = Неопределено Тогда
					НоваяСтрока = Строки.Добавить();
				Иначе
					НоваяСтрока = СоответствиеЗначенияПриемника[ПравилаКЗ.РодительПриемника].Строки.Добавить();
				КонецЕсли;

				НоваяСтрока.Источник     = ПравилаКЗ.Источник;
				НоваяСтрока.ИсточникНаименование = ПравилаКЗ.НаименованиеИсточника;
				НоваяСтрока.СинонимИсточника = ПравилаКЗ.СинонимИсточника;
				НоваяСтрока.Приемник     = ПравилаКЗ.Приемник;
				НоваяСтрока.СинонимПриемника = ПравилаКЗ.СинонимПриемника;
				НоваяСтрока.ПравилоКЗ    = ПравилаКЗ.Ссылка;

				СоответствиеЗначенияПриемника.Вставить(ПравилаКЗ.Приемник, НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
	//Значения источника
    СтрокаОграниченияПоРодителю = ?(НЕ ЗначениеЗаполнено(ЗначениеИсточникРодитель), "", "И Значения.Родитель = &Родитель");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	Значения.Ссылка КАК Ссылка,
				   |	Значения.Наименование КАК Наименование,
				   |	Значения.Родитель КАК Родитель,
				   |	Значения.Синоним КАК Синоним
				   |ИЗ
				   |	Справочник.Значения КАК Значения
				   |ГДЕ
				   |	Значения.Владелец = &Владелец
				   |	" + СтрокаОграниченияПоРодителю + "
				   |    И Значения.ПометкаУдаления = Ложь
				   |	
				   |Упорядочить ПО Значения.Родитель, Значения.Наименование
				   |
				   |Итоги По Значения.Родитель Иерархия";
					   
	Запрос.УстановитьПараметр("Родитель", ЗначениеИсточникРодитель);
	Запрос.УстановитьПараметр("Владелец", Источник);
		

	ВременныеСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВременныеСвойства.Следующий() Цикл
			
		ЗначенияИсточника = ВременныеСвойства.Выбрать();
			
		Пока ЗначенияИсточника.Следующий() Цикл
	
	        Если СоответствиеЗначенияИсточника[ЗначенияИсточника.Ссылка] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеЗначенияИсточника[ЗначенияИсточника.Родитель] = Неопределено Тогда
				НоваяСтрока = Строки.Добавить();
			Иначе
				НоваяСтрока = СоответствиеЗначенияИсточника[ЗначенияИсточника.Родитель].Строки.Добавить();
			КонецЕсли;

			НоваяСтрока.Источник     = ЗначенияИсточника.Ссылка;
			НоваяСтрока.ИсточникНаименование = ЗначенияИсточника.Наименование;
			НоваяСтрока.СинонимИсточника 	= ЗначенияИсточника.Синоним;

			СоответствиеЗначенияИсточника.Вставить(ЗначенияИсточника.Ссылка, НоваяСтрока);
			
		КонецЦикла;		
		
	КонецЦикла;

    //Значения приемника
    СтрокаОграниченияПоРодителю = ?(НЕ ЗначениеЗаполнено(ЗначениеПриемникРодитель), "", "И Значения.Родитель = &Родитель");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	Значения.Ссылка КАК Ссылка,
				   |	Значения.Наименование КАК Наименование,
				   |	Значения.Родитель КАК Родитель,
				   |	Значения.Синоним КАК Синоним
				   |ИЗ
				   |	Справочник.Значения КАК Значения
				   |ГДЕ
				   |	Значения.Владелец = &Владелец
				   |	" + СтрокаОграниченияПоРодителю + "
				   |    И Значения.ПометкаУдаления = Ложь
				   |	
				   |Упорядочить ПО Значения.Родитель, Значения.Наименование
				   |
				   |Итоги По Значения.Родитель Иерархия";
					   
	Запрос.УстановитьПараметр("Родитель", ЗначениеПриемникРодитель);
	Запрос.УстановитьПараметр("Владелец", Приемник);
	
	
	ВременныеСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВременныеСвойства.Следующий() Цикл
			
		ЗначенияПриемника = ВременныеСвойства.Выбрать();
			
		Пока ЗначенияПриемника.Следующий() Цикл
	
	        Если СоответствиеЗначенияПриемника[ЗначенияПриемника.Ссылка] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

	        Если СоответствиеЗначенияПриемника[ЗначенияПриемника.Родитель] = Неопределено Тогда
	            Таблица = Строки;
			Иначе
				Таблица = СоответствиеЗначенияПриемника[ЗначенияПриемника.Родитель].Строки;
			КонецЕсли;

			Если НЕ СинхронизироватьЗначение(Таблица, СоответствиеЗначенияПриемника, ЗначенияПриемника.Ссылка, 
				ЗначенияПриемника.Наименование, ЗначенияПриемника.Синоним) Тогда
				
				Если СоответствиеЗначенияПриемника[ЗначенияПриемника.Родитель] = Неопределено Тогда
					НоваяСтрока = Строки.Добавить();
				Иначе
					НоваяСтрока = СоответствиеЗначенияПриемника[ЗначенияПриемника.Родитель].Строки.Добавить();
				КонецЕсли;

				НоваяСтрока.Приемник     = ЗначенияПриемника.Ссылка;
				НоваяСтрока.СинонимПриемника 	= ЗначенияПриемника.Синоним;

				СоответствиеЗначенияПриемника.Вставить(ЗначенияПриемника.Ссылка, НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Если (НЕ ЗагружатьПравила) 
		И ИскатьПравила Тогда
		
		НайтиПравилаКЗ(ПравилоКО, ТаблицаРезультат.Строки);
		
	КонецЕсли;
	
	Если Не ОтображатьВсеДанные Тогда
		РекурсивноУдалитьЛишниеСтрокиДерева(ТаблицаРезультат.Строки);
	КонецЕсли;

КонецПроцедуры // СинхронизироватьЗначения()

Процедура РекурсивноУдалитьЛишниеСтрокиДерева(Строки)
	
	ТекущийНомерСтроки = Строки.Количество() - 1;
	Пока ТекущийНомерСтроки >= 0 Цикл
		
		ТекущаяСтрока = Строки[ТекущийНомерСтроки];
		
		Если ТекущаяСтрока.Строки.Количество() > 0 Тогда
			
			РекурсивноУдалитьЛишниеСтрокиДерева(ТекущаяСтрока.Строки);
			
		КонецЕсли;
		
		Если ТекущаяСтрока.Строки.Количество() = 0
			И ЗначениеЗаполнено(ТекущаяСтрока.ПравилоКЗ) Тогда
			
			Строки.Удалить(ТекущаяСтрока);	
			
		КонецЕсли;
		
		ТекущийНомерСтроки = ТекущийНомерСтроки - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет синхронизацию значения с коллекцией строк.
// Синхронизация осуществляется по наименованиям значения
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
//  Значение       - Значение для синхронизации
//  Соответствие   - Соответствие с уже синхронизированными значениями
//
// Возвращаемое значение:
//  Истина если значение синхронизировано. Ложь если не синхронизировано.
// 
Функция СинхронизироватьЗначение(Строки, Соответствие, Значение, Наименование, Синоним)

	НайденнаяСтрока = Строки.Найти(Наименование, "ИсточникНаименование", Истина);
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НайденнаяСтрока.Приемник = Значение;
	НайденнаяСтрока.СинонимПриемника = Синоним;
	Соответствие.Вставить(Значение, НайденнаяСтрока);
	Возврат Истина;	
	
КонецФункции // СинхронизироватьЗначение()

// Осуществляет поиск ПКЗ для ПКО с учетом соответствия источника и приемника
//
// Параметры:
//  ПравилоКО      - ПКО, для которого необходимо найти ПКЗ
//  Строки         - коллекция строк дерева значений
// 
Процедура НайтиПравилаКЗ(ПравилоКО, Строки)

	Для каждого Строка из Строки Цикл

		Если НЕ Строка.ПравилоКЗ.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ Строка.Источник.Пустая()) И (НЕ Строка.Приемник.Пустая()) Тогда

			мЗапросПоискаПравилКонвертацииЗначений.УстановитьПараметр("Приемник", Строка.Приемник);
			мЗапросПоискаПравилКонвертацииЗначений.УстановитьПараметр("Источник", Строка.Источник);
			мЗапросПоискаПравилКонвертацииЗначений.УстановитьПараметр("Владелец", ПравилоКО);
			
			ВыборкаДанных = мЗапросПоискаПравилКонвертацииЗначений.Выполнить().Выбрать();
			
			Если ВыборкаДанных.Следующий() Тогда
			
				Строка.ПравилоКЗ = ВыборкаДанных.Ссылка;
							
			КонецЕсли;

		КонецЕсли;

		НайтиПравилаКЗ(ПравилоКО, Строка.Строки);
		
	КонецЦикла;
	
КонецПроцедуры // НайтиПравилаКЗ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПРАВИЛАМИ

Процедура УстановитьПометкиУНайденныхСтрок() Экспорт
	
	Для каждого Строка из ТаблицаРезультат.Строки Цикл
		Строка.Пометка = Истина;
		глУстановитьПометки(Строка, мТекстАлгоритма, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Создает новые ПКЗ и записывает их в справочник.
// Правила создаются в случае установленной пометки в строке, не пустом
// приемнике и отсутствии ПКЗ.
//
// Параметры:
//  Строки             - Коллекция строк дерева значений
//                                                                                                     
Процедура СохранитьПравилаКЗ(Строки) Экспорт

	ТекущийПорядок = 0;
	
	Для каждого Строка из Строки Цикл
		Если (Строка.Пометка) И (Строка.ПравилоКЗ.Пустая()) Тогда

			Если Строка.Строки.Количество() > 0 Тогда
            	НовоеПравило = Справочники.ПравилаКонвертацииЗначений.СоздатьГруппу();
			Иначе
				НовоеПравило = Справочники.ПравилаКонвертацииЗначений.СоздатьЭлемент();
			КонецЕсли;
			
			НовоеПравило.Владелец       = ПравилоКО.Ссылка;
			Если Строка.Родитель <> Неопределено Тогда
				НовоеПравило.Родитель       = Строка.Родитель.ПравилоКЗ;
			КонецЕсли;

			НовоеПравило.Источник       = Строка.Источник;
			НовоеПравило.Приемник       = Строка.Приемник;
			НовоеПравило.Наименование   = глНаименованиеПКЗ(НовоеПравило);
			НовоеПравило.Порядок   		= ТекущийПорядок;
			
			НовоеПравило.Записать();
			
			Состояние("Создано Правило конвертации значений: " + НовоеПравило.Наименование);
			
			ТекущийПорядок = НовоеПравило.Порядок + 50;

			Строка.ПравилоКЗ = НовоеПравило.Ссылка;

		КонецЕсли;

		СохранитьПравилаКЗ(Строка.Строки);
		
	КонецЦикла;

КонецПроцедуры // СохранитьПравилаКЗ()

#КонецЕсли

мТекстАлгоритма = "
	|Если (ТекСтрока.ПравилоКЗ.Пустая())
	|	 И (НЕ ТекСтрока.Источник.Пустая() ИЛИ Параметры)
	|	 И (НЕ ТекСтрока.Приемник.Пустая() ИЛИ Параметры) Тогда
	|	Отказ = Ложь;
	|Иначе
	|	Отказ = Истина;
	|КонецЕсли;";
	
мЗапросПоискаПравилКонвертацииЗначений = Новый Запрос;
мЗапросПоискаПравилКонвертацииЗначений.Текст = "ВЫБРАТЬ Первые 1
                                               |	ПравилаКонвертацииЗначений.Ссылка КАК Ссылка
                                               |ИЗ
                                               |	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
                                               |ГДЕ
                                               |	ПравилаКонвертацииЗначений.Источник = &Источник
                                               |	И ПравилаКонвертацииЗначений.Приемник = &Приемник
                                               |	И ПравилаКонвертацииЗначений.Владелец = &Владелец";

ОтображатьВсеДанные = Ложь;
