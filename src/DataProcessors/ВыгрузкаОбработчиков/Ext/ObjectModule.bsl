////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает обработчики и выводит их в текстовый документ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	ВсеПроцедуры - Булево - Если Истина, то выгружаются все процедуры, если Ложь, то только используемые
//
Функция ВыгрузитьОбработчики(ТолькоИспользуемые, ВсеПроцедуры = Истина) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОтладочныйМодуль.ДобавитьСтроку("#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда");
	ОтладочныйМодуль.ДобавитьСтроку("");
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Конвертация_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиКонвертация(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПКО_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПКО(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПКС_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПКС(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПКГС_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПКГС(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПВД_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПВД(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПОД_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПОД(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Параметры_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПараметры(ТолькоИспользуемые, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, ВсеПроцедуры);
	
	ОтладочныйМодуль.ДобавитьСтроку("#КонецЕсли");
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции частичной выгрузки правил

// Выгружает обработчики конвертации
//
Функция ВыгрузитьОбработчикиКонвертации () Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Конвертация_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиКонвертация(Ложь, МакетПараметров), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

// Выгружает обработчики ПКО по отбору
//
Функция ВыгрузитьОбработчикиПКО(Отбор) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПКО_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПКО(Ложь, МакетПараметров, Отбор), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

// Выгружает обработчики ПКС по отбору
//
Функция ВыгрузитьОбработчикиПКС(Отбор) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПКС_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПКС(Ложь, МакетПараметров, Отбор), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

// Выгружает обработчики ПКГС по отбору
//
Функция ВыгрузитьОбработчикиПКГС(Отбор) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПКГС_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПКГС(Ложь, МакетПараметров, Отбор), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

// Выгружает обработчики ПВД по отбору
//
Функция ВыгрузитьОбработчикиПВД(Отбор) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПВД_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПВД(Ложь, МакетПараметров, Отбор), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

// Выгружает обработчики ПОД по отбору
//
Функция ВыгрузитьОбработчикиПОД(Отбор) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ПОД_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПОД(Ложь, МакетПараметров, Отбор), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

// Выгружает обработчики параметров по отбору
//
Функция ВыгрузитьОбработчикиПараметры(Отбор) Экспорт
	
	МакетПараметров = ПолучитьМакет("ПараметрыОбработчиков");
	МакетОбщихПроцедур = ПолучитьМакет("ОбщиеПроцедурыФункции");
	
	ОтладочныйМодуль = Новый ТекстовыйДокумент;
	
	ОбластьШапки = МакетОбщихПроцедур.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.СтрокаИдентификатора = СтрокаИнформацииМодуля();
	ОтладочныйМодуль.Вывести(ОбластьШапки);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Параметры_Комментарий", ОтладочныйМодуль);
	ЗаписатьОбработчики(ПолучитьОбработчикиПараметры(Ложь, МакетПараметров, Отбор), ОтладочныйМодуль);
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "Алгоритмы_Комментарий", ОтладочныйМодуль);
	ТаблицаАлгоритмов = ПолучитьОбработчикиАлгоритмы();
	ЗаписатьОбработчики(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, Истина);
	
	ТекстМодуля = ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, ОтладочныйМодуль);
	
	Возврат ТекстМодуля;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВывестиОбщиеПроцедурыИФункции(МакетОбщихПроцедур, ОтладочныйМодуль, ВсеПроцедуры)
	
	ВывестиОбластьМакета(МакетОбщихПроцедур, "ОбщиеПроцедурыФункции_Комментарий", ОтладочныйМодуль);
	
	ТекстПоиска = ОтладочныйМодуль.ПолучитьТекст();
	
	ОбработкаЗагрузки = Обработки.ЗагрузкаОбработчиков.Создать();
	ОбработкаЗагрузки.СписокТиповыхПроцедур = Новый Массив;
	ОбработкаЗагрузки.ПрочитатьОбработчики (МакетОбщихПроцедур, Истина, Истина);
	
	Для Каждого ТиповаяПроцедура Из ОбработкаЗагрузки.СписокТиповыхПроцедур Цикл
		
		НачалоПараметров = Найти(ТиповаяПроцедура, "(");
		ЗаголовокПроцедуры = СокрЛП(Лев(ТиповаяПроцедура, НачалоПараметров - 1));
		
		Если Найти(ТекстПоиска, ЗаголовокПроцедуры) <> 0 Или ВсеПроцедуры Тогда
			ВывестиОбластьМакета(МакетОбщихПроцедур, ЗаголовокПроцедуры, ОтладочныйМодуль);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВсеПроцедуры Тогда
		
		ВывестиОбластьМакета(МакетОбщихПроцедур, "ПодключитьОбработкуДляОтладки", ОтладочныйМодуль);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает глобальные обработчики конвертации из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиКонвертация(ТолькоИспользуемые, МакетПараметров)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("Конвертация");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("Конвертации", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	Конвертации.Ссылка
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.Конвертации КАК Конвертации
		|ГДЕ
		|	Конвертации.Ссылка = &Конвертация
		|	[СтрокаОграничений]";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаКонвертации = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ИмяСобытия = Сред(Колонка, 9);
				ИмяОбласти = "Конвертация_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаКонвертации.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяОбласти;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаКонвертации;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики ПКО из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиПКО(ТолькоИспользуемые, МакетПараметров, Отбор = Неопределено)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("ПравилаКонвертацииОбъектов");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("ПКО", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПКО.Ссылка,
		|	ПКО.Код КАК Код
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.ПравилаКонвертацииОбъектов КАК ПКО
		|ГДЕ
		|	ПКО.Владелец = &Конвертация
		|	И НЕ ПКО.ПометкаУдаления
		|	И НЕ ПКО.ЭтоГруппа
		|	И [УсловиеОтбора]
		|	[СтрокаОграничений]
		|УПОРЯДОЧИТЬ ПО Код"; 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		
		Если Отбор = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Истина");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "ПКО.Ссылка = &Отбор");
			Запрос.УстановитьПараметр("Отбор", Отбор);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаПКО = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ИмяСобытия = Сред(Колонка, 9);
				ИмяПКО = "ПКО_[ИмяПКО]_[ИмяСобытия]";
				ИмяПКО = СтрЗаменить(ИмяПКО, "[ИмяСобытия]", ИмяСобытия);
				ИмяПКО = СтрЗаменить(ИмяПКО, "[ИмяПКО]", СокрЛП(Выборка.Код));
				ИмяОбласти = "ПКО_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаПКО.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяПКО;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаПКО;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики ПКС из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиПКС(ТолькоИспользуемые, МакетПараметров, Отбор = Неопределено)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("ПравилаКонвертацииСвойств");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("ПКС", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПКС.Ссылка,
		|	ПКС.Владелец.Код КАК ПКО,
		|	ПКС.Родитель КАК Родитель,
		|	ПКС.Родитель.Источник.Наименование КАК ИмяИсточникаРодителя,
		|	ПКС.Родитель.Приемник.Наименование КАК ИмяПриемникаРодителя,
		|	ПКС.Источник Как Источник,
		|	ПКС.Источник.Наименование Как ИмяИсточника,
		|	ПКС.Приемник Как Приемник,
		|	ПКС.Приемник.Наименование Как ИмяПриемника,
		|	ПКС.ИмяПараметраДляПередачи Как ИмяПараметраДляПередачи,
		|	ПКС.Код КАК Код
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.ПравилаКонвертацииСвойств КАК ПКС
		|ГДЕ
		|	ПКС.Владелец.Владелец = &Конвертация
		|	И НЕ ПКС.ПометкаУдаления
		|	И НЕ ПКС.Отключить
		|	И НЕ ПКС.ЭтоГруппа
		|	И [УсловиеОтбора]
		|	[СтрокаОграничений]
		|УПОРЯДОЧИТЬ ПО ПКО";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		
		Если Отбор = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Истина");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "ПКС.Ссылка = &Отбор");
			Запрос.УстановитьПараметр("Отбор", Отбор);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаПКС = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					
					Если ЗначениеЗаполнено(Выборка.ИмяИсточникаРодителя) Тогда
						
						Родитель = "_" + СокрЛП(Выборка.ИмяИсточникаРодителя);
						
					Иначе
						
						Родитель = "_" + СокрЛП(Выборка.ИмяПриемникаРодителя);
						
					КонецЕсли;
					
				Иначе
					
					Родитель = "";
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Источник) Тогда
					
					Свойство = "_" + СокрЛП(Выборка.ИмяИсточника);
					
				ИначеЕсли ЗначениеЗаполнено(Выборка.Приемник) Тогда
					
					Свойство = "_" + СокрЛП(Выборка.ИмяПриемника);
					
				ИначеЕсли ЗначениеЗаполнено(Выборка.ИмяПараметраДляПередачи) Тогда
					
					Свойство = "_" + СокрЛП(Выборка.ИмяПараметраДляПередачи);
					
				КонецЕсли;
				
				ИмяСобытия = Сред(Колонка, 9);
				ПКО = СокрЛП(Выборка.ПКО);
				ИмяПКС = "ПКС_[ИмяПКО]_[ИмяТЧ]_[Свойство]_[ИмяСобытия]_[КодПКС]_[ДлинаИмениПКО]";
				ИмяПКС = СтрЗаменить(ИмяПКС, "[ИмяПКО]", ПКО);
				ИмяПКС = СтрЗаменить(ИмяПКС, "_[ИмяТЧ]", Родитель);
				ИмяПКС = СтрЗаменить(ИмяПКС, "_[Свойство]", Свойство);
				ИмяПКС = СтрЗаменить(ИмяПКС, "[ИмяСобытия]", ИмяСобытия);
				ИмяПКС = СтрЗаменить(ИмяПКС, "[КодПКС]", Формат(Выборка.Код, "ЧГ=0"));
				ИмяПКС = СтрЗаменить(ИмяПКС, "[ДлинаИмениПКО]", СтрДлина(ПКО));
				
				ИмяОбласти = "ПКС_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаПКС.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяПКС;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаПКС;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики ПКГС из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиПКГС(ТолькоИспользуемые, МакетПараметров, Отбор = Неопределено)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("ПравилаКонвертацииГруппыСвойств");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("ПКГС", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПКГС.Ссылка,
		|	ПКГС.Владелец.Код КАК ПКО,
		|	ПКГС.Код КАК Код,
		|	ПКГС.Источник КАК Источник,
		|	ПКГС.Источник.Наименование КАК ИмяИсточника,
		|	ПКГС.Приемник КАК Приемник,
		|	ПКГС.Приемник.Наименование КАК ИмяПриемника
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.ПравилаКонвертацииСвойств КАК ПКГС
		|ГДЕ
		|	ПКГС.Владелец.Владелец = &Конвертация
		|	И НЕ ПКГС.ПометкаУдаления
		|	И НЕ ПКГС.Отключить
		|	И ПКГС.ЭтоГруппа
		|	И [УсловиеОтбора]
		|	[СтрокаОграничений]
		|УПОРЯДОЧИТЬ ПО ПКО";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		
		Если Отбор = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Истина");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "ПКГС.Ссылка = &Отбор");
			Запрос.УстановитьПараметр("Отбор", Отбор);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаПКГС = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Источник) Тогда
					
					Свойство = "_" + СокрЛП(Выборка.ИмяИсточника);
					
				ИначеЕсли ЗначениеЗаполнено(Выборка.Приемник) Тогда
					
					Свойство = "_" + СокрЛП(Выборка.ИмяПриемника);
					
				КонецЕсли;
				
				ИмяСобытия = Сред(Колонка, 9);
				ПКО = СокрЛП(Выборка.ПКО);
				ИмяПКГС = "ПКГС_[ИмяПКО]_[ИмяТЧ]_[ИмяСобытия]_[КодПКГС]_[ДлинаИмениПКО]";
				ИмяПКГС = СтрЗаменить(ИмяПКГС, "[ИмяПКО]", ПКО);
				ИмяПКГС = СтрЗаменить(ИмяПКГС, "_[ИмяТЧ]", Свойство);
				ИмяПКГС = СтрЗаменить(ИмяПКГС, "[ИмяСобытия]", ИмяСобытия);
				ИмяПКГС = СтрЗаменить(ИмяПКГС, "[КодПКГС]", Выборка.Код);
				ИмяПКГС = СтрЗаменить(ИмяПКГС, "[ДлинаИмениПКО]", СтрДлина(ПКО));
				
				ИмяОбласти = "ПКГС_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаПКГС.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяПКГС;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаПКГС;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики ПВД из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиПВД(ТолькоИспользуемые, МакетПараметров, Отбор = Неопределено)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("ПравилаВыгрузкиДанных");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("ПВД", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПВД.Код КАК Код
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.ПравилаВыгрузкиДанных КАК ПВД
		|ГДЕ
		|	ПВД.Владелец = &Конвертация
		|	И НЕ ПВД.ПометкаУдаления
		|	И НЕ ПВД.Отключить
		|	И НЕ ПВД.ЭтоГруппа
		|	И [УсловиеОтбора]
		|	[СтрокаОграничений]
		|УПОРЯДОЧИТЬ ПО Код";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		
		Если Отбор = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Истина");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "ПВД.Ссылка = &Отбор");
			Запрос.УстановитьПараметр("Отбор", Отбор);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаПВД = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;

				ИмяСобытия = Сред(Колонка, 9);
				ИмяПВД = "ПВД_[ИмяПВД]_[ИмяСобытия]";
				ИмяПВД = СтрЗаменить(ИмяПВД, "[ИмяСобытия]", ИмяСобытия);
				ИмяПВД = СтрЗаменить(ИмяПВД, "[ИмяПВД]", СокрЛП(Выборка.Код));
				ИмяОбласти = "ПВД_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаПВД.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяПВД;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаПВД;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики ПОД из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиПОД(ТолькоИспользуемые, МакетПараметров, Отбор = Неопределено)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("ПравилаОчисткиОбъектов");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("ПОД", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПОД.Код КАК Код
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.ПравилаОчисткиДанных КАК ПОД
		|ГДЕ
		|	ПОД.Владелец = &Конвертация
		|	И НЕ ПОД.ПометкаУдаления
		|	И НЕ ПОД.Отключить
		|	И НЕ ПОД.ЭтоГруппа
		|	И [УсловиеОтбора]
		|	[СтрокаОграничений]
		|УПОРЯДОЧИТЬ ПО Код";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		
		Если Отбор = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Истина");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "ПОД.Ссылка = &Отбор");
			Запрос.УстановитьПараметр("Отбор", Отбор);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаПОД = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;

				ИмяСобытия = Сред(Колонка, 9);
				ИмяПОД = "ПОД_[ИмяПОД]_[ИмяСобытия]";
				ИмяПОД = СтрЗаменить(ИмяПОД, "[ИмяСобытия]", ИмяСобытия);
				ИмяПОД = СтрЗаменить(ИмяПОД, "[ИмяПОД]", СокрЛП(Выборка.Код));
				ИмяОбласти = "ПОД_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаПОД.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяПОД;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаПОД;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики параметров из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//	МакетПараметров - ТекстовыйДокумент - Содержит параметры обработчиков.
//
Функция ПолучитьОбработчикиПараметры(ТолькоИспользуемые, МакетПараметров, Отбор = Неопределено)
	
	Перем СтрокаВыборкаКолонок, СтрокаОграничений;
	
	МассивКолонок = МассивИменОбработчиков("Параметры");
	
	Если МассивКолонок.Количество() <> 0 Тогда
		
		СоздатьПараметрыТекстаДляЗапроса("Параметры", МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые);
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	Параметры.Код КАК Код
		|	[СтрокаВыборкаКолонок]
		|ИЗ
		|	Справочник.Параметры КАК Параметры
		|ГДЕ
		|	Параметры.Владелец = &Конвертация
		|	И НЕ Параметры.ПометкаУдаления
		|	И [УсловиеОтбора]
		|	[СтрокаОграничений]
		|УПОРЯДОЧИТЬ ПО Код";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаВыборкаКолонок]", СтрокаВыборкаКолонок);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СтрокаОграничений]", СтрокаОграничений);
		
		Если Отбор = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Истина");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбора]", "Параметры.Ссылка = &Отбор");
			Запрос.УстановитьПараметр("Отбор", Отбор);
			
		КонецЕсли;

		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаПараметров = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если ТолькоИспользуемые И Не ЗначениеЗаполнено(Выборка[Колонка]) Тогда
					
					Продолжить;
					
				КонецЕсли;

				ИмяСобытия = Сред(Колонка, 9);
				ИмяПравила = "Параметры_[ИмяПараметра]_[ИмяСобытия]";
				ИмяПравила = СтрЗаменить(ИмяПравила, "[ИмяСобытия]", ИмяСобытия);
				ИмяПравила = СтрЗаменить(ИмяПравила, "[ИмяПараметра]", СокрЛП(Выборка.Код));
				
				ИмяОбласти = "Параметры_[ИмяСобытия]";
				ИмяОбласти = СтрЗаменить(ИмяОбласти, "[ИмяСобытия]", ИмяСобытия);
				ТекущаяОбласть = МакетПараметров.ПолучитьОбласть(ИмяОбласти);
				ПараметрыОбработчика = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
				
				СтрокаПравила = ТаблицаПараметров.Добавить();
				СтрокаПравила.ИмяОбработчика = ИмяПравила;
				СтрокаПравила.ПараметрыОбработчика = ПараметрыОбработчика;
				СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка[Колонка]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ТаблицаПараметров;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает обработчики алгоритмов из ИБ.
//
// Параметры:
//	ТолькоИспользуемые - Булево - Признак получения не пустых обработчиков.
//
Функция ПолучитьОбработчикиАлгоритмы()
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Алгоритмы.Код, 
	|	Алгоритмы.Алгоритм, 
	|	Алгоритмы.Параметры
	|ИЗ
	|	Справочник.Алгоритмы КАК Алгоритмы
	|ГДЕ
	|	Алгоритмы.Владелец = &Конвертация
	|	И НЕ Алгоритмы.ЭтоГруппа
	|	И Алгоритмы.ИспользуетсяПриЗагрузке = &ИспользуетсяПриЗагрузке
	|	И НЕ Алгоритмы.ПометкаУдаления";
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	Запрос.УстановитьПараметр("ИспользуетсяПриЗагрузке", НЕ ЭтоВыгрузка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		ТаблицаПараметров = ТаблицаОбработчиков();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаПравила = ТаблицаПараметров.Добавить();
			СтрокаПравила.ИмяОбработчика = СокрЛП(Выборка.Код);
			СтрокаПравила.ПараметрыОбработчика = СокрЛП(Выборка.Параметры);
			СтрокаПравила.ТелоОбработчика = ТелоПроцедурыСТабуляцией(Выборка.Алгоритм);
			
		КонецЦикла;
		
		Возврат ТаблицаПараметров;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Неопределено;
	
КонецФункции

// Выводит обработчики в текстовый документ.
// 
// Параметры:
//	Обработчики - ТаблицаЗначений - Содержит обработчики.
//	Отладочный модуль - ТекстовыйДокумент - Для вывода обработчиков.
//
Процедура ЗаписатьОбработчики(Обработчики, ОтладочныйМодуль)
	
	Если Обработчики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПравила Из Обработчики Цикл
		
		ИнтерфейсПроцедуры = "Процедура [ИмяПроцедуры]([ПараметрыПроцедуры]) Экспорт";
		ИнтерфейсПроцедуры = СтрЗаменить(ИнтерфейсПроцедуры, "[ИмяПроцедуры]", СтрокаПравила.ИмяОбработчика);
		ИнтерфейсПроцедуры = СтрЗаменить(ИнтерфейсПроцедуры, "[ПараметрыПроцедуры]", СтрокаПравила.ПараметрыОбработчика);
		
		ОтладочныйМодуль.ДобавитьСтроку(ИнтерфейсПроцедуры + Символы.ПС);
		ОтладочныйМодуль.ДобавитьСтроку(СтрокаПравила.ТелоОбработчика);
		ОтладочныйМодуль.ДобавитьСтроку(Символы.ПС + "КонецПроцедуры" + Символы.ПС);

	КонецЦикла;
	
КонецПроцедуры

// Инициализирует таблицу для обработчиков.
//
Функция ТаблицаОбработчиков()
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	ТаблицаПравил.Колонки.Добавить("ИмяОбработчика");
	ТаблицаПравил.Колонки.Добавить("ПараметрыОбработчика");
	ТаблицаПравил.Колонки.Добавить("ТелоОбработчика");
	
	Возврат ТаблицаПравил;
	
КонецФункции

// Формирует параметры для запроса.
//
Процедура СоздатьПараметрыТекстаДляЗапроса(ИмяТаблицыЗапроса, МассивКолонок, СтрокаВыборкаКолонок, СтрокаОграничений, ТолькоИспользуемые)
	
	СтрокаВыборкаКолонок = "";
	СтрокаОграничений = "";
	
	Для Каждого Колонка Из МассивКолонок Цикл
		
		СтрокаВыборкаКолонок = СтрокаВыборкаКолонок + ", 
		|" + ИмяТаблицыЗапроса + "." + Колонка;
		
		Если ТолькоИспользуемые Тогда
			
			Если ПустаяСтрока(СтрокаОграничений) Тогда
				
				СтрокаОграничений = СтрокаОграничений + "
				| И ( (ВЫРАЗИТЬ(" + ИмяТаблицыЗапроса + "." + Колонка + " КАК СТРОКА(500))) <> """" ";
				
			Иначе
				
				СтрокаОграничений = СтрокаОграничений + "
				|ИЛИ (ВЫРАЗИТЬ(" + ИмяТаблицыЗапроса + "." + Колонка + " КАК СТРОКА(500))) <> """" ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаОграничений) Тогда
		
		СтрокаОграничений = СтрокаОграничений + ")";
		
	КонецЕсли;
	
КонецПроцедуры

// Получает текст области без ее названия.
//
// Параметры:
//	Область - ОбластьМакета
//
Функция ТекстПоОбластиБезНазванияОбласти(Область)
	
	ТекстОбласти = Область.ПолучитьТекст();
	
	Если Найти(ТекстОбласти, "#Область") > 0 Тогда
		
		ПервыйПереводСтроки = Найти(ТекстОбласти, Символы.ПС);
		
		ТекстОбласти = Сред(ТекстОбласти, ПервыйПереводСтроки + 1);
		
	КонецЕсли;
	
	Возврат СокрЛП(ТекстОбласти);
	
КонецФункции

// Возвращает список обработчиков по типу объекта.
//
// Параметры:
//	НазваниеОбъекта - Строка - Тип объекта.
//
Функция МассивИменОбработчиков(НазваниеОбъекта)
	
	МассивОбработчиков = Новый Массив();
	
	Если НазваниеОбъекта = "Конвертация" Тогда
		
		Если ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиПравилОбмена");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойДанных");
			МассивОбработчиков.Добавить("АлгоритмПередПолучениемИзмененныхОбъектов");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиДанных");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПередКонвертациейОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПередОтправкойИнформацииОбУдалении");
			
		Иначе
			
			МассивОбработчиков.Добавить("АлгоритмПередЗагрузкойДанных");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиДанных");
			МассивОбработчиков.Добавить("АлгоритмПередЗагрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПриПолученииИнформацииОбУдалении");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиПараметров");
			МассивОбработчиков.Добавить("АлгоритмПослеПолученияИнформацииОбУзлахОбмена");
			
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "ПравилаКонвертацииГруппыСвойств" Тогда
		
		Если ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПередОбработкойВыгрузки");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойСвойства");
			МассивОбработчиков.Добавить("АлгоритмПриВыгрузкеСвойства");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиСвойства");
			МассивОбработчиков.Добавить("АлгоритмПослеОбработкиВыгрузки");
			
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "ПравилаКонвертацииСвойств" Тогда
		
		Если ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойСвойства");
			МассивОбработчиков.Добавить("АлгоритмПриВыгрузкеСвойства");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиСвойства");
			
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "ПравилаВыгрузкиДанных" Тогда
		
		Если ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПередОбработкойПравила");
			МассивОбработчиков.Добавить("АлгоритмПослеОбработкиПравила");
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъекта");
			
		КонецЕсли
		
	ИначеЕсли НазваниеОбъекта = "ПравилаКонвертацииОбъектов" Тогда
		
		Если ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПередВыгрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПриВыгрузкеОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеВыгрузкиОбъектаВФайлОбмена");
			
		Иначе
			
			МассивОбработчиков.Добавить("АлгоритмПередЗагрузкойОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПриЗагрузкеОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиОбъекта");		
			МассивОбработчиков.Добавить("АлгоритмПоследовательностьПолейПоиска");
			
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "ПравилаОчисткиОбъектов" Тогда
		
		Если Не ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПередОбработкойПравила");
			МассивОбработчиков.Добавить("АлгоритмПередУдалениемОбъекта");
			МассивОбработчиков.Добавить("АлгоритмПослеОбработкиПравила");
			
		КонецЕсли;
		
	ИначеЕсли НазваниеОбъекта = "Параметры" Тогда
		
		Если Не ЭтоВыгрузка Тогда
			
			МассивОбработчиков.Добавить("АлгоритмПослеЗагрузкиПараметра");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОбработчиков;
	
КонецФункции

// Формирует строку информации для шапки модуля.
//
Функция СтрокаИнформацииМодуля()
	
	ТекстСобытия = "Обработчики [ТипСобытия] конвертации [Конвертация] {[УИД]}";	
	ТекстСобытия = СтрЗаменить(ТекстСобытия, "[ТипСобытия]", ?(ЭтоВыгрузка, "выгрузки", "загрузки"));
	ТекстСобытия = СтрЗаменить(ТекстСобытия, "[Конвертация]", Конвертация.Наименование);
	ТекстСобытия = СтрЗаменить(ТекстСобытия, "[УИД]", Конвертация.УникальныйИдентификатор());
	
	Возврат ТекстСобытия;
	
КонецФункции

// Выводит область макета.
//
Процедура ВывестиОбластьМакета(Макет, ИмяОбласти, Документ)
	
	ТекущаяОбласть = Макет.ПолучитьОбласть(ИмяОбласти);
	ОбластьИзМакета = ТекстПоОбластиБезНазванияОбласти(ТекущаяОбласть);
	Документ.ДобавитьСтроку(ОбластьИзМакета + Символы.ПС);
	
КонецПроцедуры

// Добавляет символы табуляции в тело процедуры.
//
Функция ТелоПроцедурыСТабуляцией (ТекстПроцедуры)
	
	ТекстСТабуляцией = Символы.Таб + СтрЗаменить(ТекстПроцедуры, Символы.ПС, Символы.ПС + Символы.Таб);
	
	Возврат ТекстСТабуляцией;
	
КонецФункции

// Заменяет вызов алгоритмов из структуры вызовом процедуры.
//
Функция ИзмененныйВызовАлгоритмов(ТаблицаАлгоритмов, Документ)
	
	ТекстПоискаИЗамены = Документ.ПолучитьТекст();
	
	Если ТаблицаАлгоритмов <> Неопределено Тогда		
		
		Для Каждого Алгоритм Из ТаблицаАлгоритмов Цикл
			
			СтрокаПоиска = "Выполнить(Алгоритмы.[ИмяАлгоритма])";
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "[ИмяАлгоритма]", Алгоритм.ИмяОбработчика);
			СтрокаЗамены = "[ИмяАлгоритма] ([ПараметрыАлгоритма])";
			СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "[ИмяАлгоритма]", Алгоритм.ИмяОбработчика);
			СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "[ПараметрыАлгоритма]", Алгоритм.ПараметрыОбработчика);
			
			ТекстПоискаИЗамены = СтрЗаменить(ТекстПоискаИЗамены, СтрокаПоиска, СтрокаЗамены);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстПоискаИЗамены;
	
КонецФункции