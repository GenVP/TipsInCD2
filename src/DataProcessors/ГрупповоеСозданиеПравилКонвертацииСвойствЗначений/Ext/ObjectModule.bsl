#Если Клиент Тогда

// 
//
// Параметры:
//  Конвертация    - Конвертация, для которой осуществляется выбор
//
// Возвращаемое значение:
//  Дерево значений.
// 
Функция ВыполнитьЗапрос(Конвертация) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Конвертация", Конвертация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаКонвертацииОбъектов.Ссылка КАК ПКО,
	|	1 КАК Пометка
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|ГДЕ
	|	ПравилаКонвертацииОбъектов.Владелец = &Конвертация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПКО ИЕРАРХИЯ,
	|   ПравилаКонвертацииОбъектов.Порядок";

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции // ВыполнитьЗапрос()

Процедура СоздатьПравила(Таблица, ПустойИсточник, ПустойПриемник) Экспорт

	СписокСозданныхПКО = Новый СписокЗначений;
	
	Для каждого СтрокаПКО из Таблица.Строки Цикл

		ОбработкаПрерыванияПользователя();

		Если НЕ СтрокаПКО.ПКО.ЭтоГруппа И СтрокаПКО.Пометка Тогда

			Если СтрокаПКО.ПКО.Источник.Пустая() ИЛИ СтрокаПКО.ПКО.Приемник.Пустая() Тогда
            	Продолжить;
			КонецЕсли;
			Если НЕ(СтрокаПКО.ПКО.Источник.Тип = СтрокаПКО.ПКО.Приемник.Тип) Тогда
            	Продолжить;
			КонецЕсли;

			//ПКС
			АвтонастройкаПКС = Обработки.АвтонастройкаПравилКонвертацииСвойств.Создать();
			АвтонастройкаПКС.ПравилоКО = СтрокаПКО.ПКО;
			АвтонастройкаПКС.ВыполнитьСинхронизацию();

			Для каждого Строка из АвтонастройкаПКС.ТаблицаРезультат.Строки Цикл
                Строка.Пометка = 1;

				Параметры = Новый Структура();
				Параметры.Вставить("ПустойИсточник", ПустойИсточник);
				Параметры.Вставить("ПустойПриемник", ПустойПриемник);

				ТекстАлгоритма = "
				    |Если      ТекСтрока.Строки.Количество() Тогда
					|	Отказ = Ложь;
					|ИначеЕсли (ТекСтрока.ПравилоКС.Пустая())
					|	 И ((НЕ ТекСтрока.Источник.Пустая()) ИЛИ (Параметры[""ПустойИсточник""]))
					|	 И ((НЕ ТекСтрока.Приемник.Пустая()) ИЛИ (Параметры[""ПустойПриемник""])) Тогда
					|	Отказ = Ложь;
					|Иначе
					|	Отказ = Истина;
					|КонецЕсли;";
		        глУстановитьПометки(Строка, ТекстАлгоритма, Параметры);
			КонецЦикла;

			АвтонастройкаПКС.СохранитьПравилаКС(АвтонастройкаПКС.ТаблицаРезультат.Строки, Истина, СписокСозданныхПКО);
            			
			//ПКЗ
			АвтонастройкаПКЗ = Обработки.АвтонастройкаПравилКонвертацииЗначений.Создать();
			АвтонастройкаПКЗ.ПравилоКО = СтрокаПКО.ПКО;
			АвтонастройкаПКЗ.ВыполнитьСинхронизацию();

			Для каждого Строка из АвтонастройкаПКЗ.ТаблицаРезультат.Строки Цикл
				Строка.Пометка = 1;

				Параметры = Новый Структура();
				Параметры.Вставить("ПустойИсточник", ПустойИсточник);
				Параметры.Вставить("ПустойПриемник", ПустойПриемник);

				ТекстАлгоритма = "
					|Если (ТекСтрока.ПравилоКЗ.Пустая())
					|	 И ((НЕ ТекСтрока.Источник.Пустая()) ИЛИ Параметры[""ПустойИсточник""])
					|	 И ((НЕ ТекСтрока.Приемник.Пустая()) ИЛИ Параметры[""ПустойПриемник""]) Тогда
					|	Отказ = Ложь;
					|Иначе
					|	Отказ = Истина;
					|КонецЕсли;";
				глУстановитьПометки(Строка, ТекстАлгоритма, Параметры);
			КонецЦикла;

			АвтонастройкаПКЗ.СохранитьПравилаКЗ(АвтонастройкаПКЗ.ТаблицаРезультат.Строки);
		КонецЕсли;

		СоздатьПравила(СтрокаПКО, ПустойИсточник, ПустойПриемник);
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли