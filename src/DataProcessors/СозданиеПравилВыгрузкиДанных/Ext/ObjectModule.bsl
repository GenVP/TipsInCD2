#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПВД  - правило выгрузки данных

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Осуществляет синхронизацию ПКО и ПВД конвертации.
// Синхронизация осуществляется по ссылке на правило конвертации

// Параметры:
//  Конвертация    - Конвертация, для которой осуществляется синхронизация
//
// Возвращаемое значение:
//  Дерево значений.
// 
Функция ВыполнитьСинхронизацию(Конвертация) Экспорт

	Запрос = Новый Запрос;

	НедопустимыеТипы = Новый СписокЗначений();
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.Дата);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.Перечисление);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.Строка);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.ХранилищеЗначения);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.УникальныйИдентификатор);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.Число);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.Булево);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	НедопустимыеТипы.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
			
	Запрос.УстановитьПараметр("Конвертация",  Конвертация);
	Запрос.УстановитьПараметр("НедопустимыеТипы", НедопустимыеТипы);
	Запрос.УстановитьПараметр("ПустойОбъект", Справочники.Объекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаКонвертацииОбъектов.Ссылка КАК ПКО,
	|	ВЫБОР
	|		КОГДА ПравилаКонвертацииОбъектов.ЭтоГруппа
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПравилаВыгрузкиДанных.Ссылка ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ПравилаКонвертацииОбъектов.Источник = &ПустойОбъект
	|								ТОГДА ПравилаКонвертацииОбъектов.Код
	|							ИНАЧЕ ПравилаКонвертацииОбъектов.Источник.Имя
	|						КОНЕЦ
	|				ИНАЧЕ ПравилаВыгрузкиДанных.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ КАК ПВД,
	|	ВЫБОР
	|		КОГДА ПравилаКонвертацииОбъектов.ЭтоГруппа
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПравилаВыгрузкиДанных.Ссылка ЕСТЬ NULL 
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Пометка
	|ИЗ
	|	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|		ПО ПравилаВыгрузкиДанных.ПравилоКонвертации = ПравилаКонвертацииОбъектов.Ссылка
	|			И (ПравилаКонвертацииОбъектов.Владелец = &Конвертация)
	|			И (ПравилаВыгрузкиДанных.Владелец = &Конвертация)
	|ГДЕ
	|	(ПравилаКонвертацииОбъектов.Владелец = &Конвертация
	|			ИЛИ ПравилаВыгрузкиДанных.Владелец = &Конвертация)
	|	И (НЕ ПравилаКонвертацииОбъектов.ЭтоГруппа)
	|	И (НЕ ПравилаКонвертацииОбъектов.Источник.Тип В (&НедопустимыеТипы))
	|	И ПравилаКонвертацииОбъектов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПКО ИЕРАРХИЯ"
	;

	РезЗапроса = Запрос.Выполнить();

	Возврат РезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

// Создает новые ПВД и записывает их в справочник.
// Правила создаются в случае установленной пометки в строке.
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
//                                                                                                     
Процедура СохранитьПравилаВД(Строки) Экспорт

	Для каждого Строка из Строки Цикл

		Если Строка.Пометка
			И Строка.ПКО <> Неопределено 
			И НЕ Строка.ПКО.ЭтоГруппа Тогда

			НовоеПВД = Справочники.ПравилаВыгрузкиДанных.СоздатьЭлемент();
			НовоеПВД.Владелец           = Конвертация;
			НовоеПВД.ПравилоКонвертации = Строка.ПКО;
			НовоеПВД.ОбъектВыборки      = Строка.ПКО.Источник;
			НовоеПВД.СпособОтбораДанных = Перечисления.СпособыОтбораДанных.СтандартнаяВыборка;
			НовоеПВД.Код                = Строка.ПВД;
			НовоеПВД.Наименование       = Строка.ПВД;
			НовоеПВД.мКонтролироватьУникальностьКода = Истина;
			
			НовоеПВД.Записать();

			Строка.ПВД     = НовоеПВД.Ссылка;
			Строка.Пометка = Ложь;			
						
		КонецЕсли;

		СохранитьПравилаВД(Строка.Строки);
		
	КонецЦикла;

КонецПроцедуры // СохранитьПравилаВД()

#КонецЕсли