Перем мЗагрузитьНовую Экспорт;
Перем мКонфигурация Экспорт;
Перем мКомментарий Экспорт;


Перем мСоответствиеУИ;

Перем мОбъектыКонфигурации;

Перем мЗапросСвойств;
Перем мЗапросСоставПланаОбмена;
Перем мЗапросЗначения;
Перем мЗапросОбъекты;

Перем  мКоличествоЭлементовДляОбновленияСтатуса;

#Если Клиент Тогда

Функция ВыполнитьЗагрузку() Экспорт
	
	КоличествоОбъектов = 0;
	КоличествоСвойств = 0;
	КоличествоЗначений = 0;
	
	ОбновитьСостояние("СостояниеКоличествоОбъектов", "Объекты");
	ОбновитьСостояние("СостояниеКоличествоСвойств", "Свойства");
	ОбновитьСостояние("СостояниеКоличествоЗначений", "Значения");
	
	мСоответствиеУИ = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаЗагрузки);
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.Имя = "Конфигурация" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
	Иначе
		
		Сообщить("Файл не содержит описания конфигурации.");
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Если ВыполнятьЗагрузкуСтруктурыВОднойТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	// Загрузка конфигурации и объектов
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ТипXML = ПолучитьXMLТип(ЧтениеXML);
		
		Если ТипXML.ИмяТипа = "CatalogObject.Конфигурации" Тогда
			
			ПрочитатьКонфигурациюXML(ЧтениеXML, Ложь);

		ИначеЕсли ТипXML.ИмяТипа = "CatalogObject.Объекты" Тогда
			
			ПрочитатьОбъектXML(ЧтениеXML, (КоличествоОбъектов - 1) % мКоличествоЭлементовДляОбновленияСтатуса = 0);
			
			КоличествоОбъектов = КоличествоОбъектов + 1;
			Если КоличествоОбъектов % мКоличествоЭлементовДляОбновленияСтатуса = 0 Тогда
				ОбновитьСостояние("СостояниеКоличествоОбъектов", "Объекты (" + КоличествоОбъектов + ")");
			КонецЕсли;
			
		Иначе
			
			ПрочитатьXML(ЧтениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостояние("СостояниеКоличествоОбъектов", "Объекты (" + КоличествоОбъектов + ")");
	ОбновитьСостояние("СостояниеОбъект", "Объекты загружены.");
	
	// Загрузка свойств и значений
	ЧтениеXML.ОткрытьФайл(ИмяФайлаЗагрузки);
	
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ТипXML = ПолучитьXMLТип(ЧтениеXML);
		Если ТипXML.ИмяТипа = "CatalogObject.Свойства" Тогда
			
			ПрочитатьСвойствоXML(ЧтениеXML, (КоличествоСвойств - 1) % мКоличествоЭлементовДляОбновленияСтатуса = 0);
			
			КоличествоСвойств = КоличествоСвойств + 1;
			Если КоличествоСвойств % мКоличествоЭлементовДляОбновленияСтатуса = 0 Тогда
				ОбновитьСостояние("СостояниеКоличествоСвойств", "Свойства (" + КоличествоСвойств + ")");
			КонецЕсли;
			
		ИначеЕсли ТипXML.ИмяТипа = "CatalogObject.Значения" Тогда
			
			ПрочитатьЗначениеXML(ЧтениеXML, (КоличествоЗначений - 1) % мКоличествоЭлементовДляОбновленияСтатуса = 0);
			
			КоличествоЗначений = КоличествоЗначений + 1;
			Если КоличествоЗначений % мКоличествоЭлементовДляОбновленияСтатуса = 0 Тогда
				ОбновитьСостояние("СостояниеКоличествоЗначений", "Значения (" + КоличествоЗначений + ")");
			КонецЕсли;	
			
		Иначе
			
			ПрочитатьXML(ЧтениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостояние("СостояниеКоличествоСвойств", "Свойства (" + КоличествоСвойств + ")");
	ОбновитьСостояние("СостояниеКоличествоЗначений", "Значения (" + КоличествоЗначений + ")");
	
	ОбновитьСостояние("СостояниеСвойство", "Свойства загружены.");
	ОбновитьСостояние("СостояниеЗначение", "Значения загружены.");
	
	Если мЗагрузитьНовую <> Истина
		И НЕ ДобавлятьТолькоНовыеОбъектыСвойстваЗначения Тогда
		
		Для каждого Объект из мОбъектыКонфигурации Цикл
			
			Если Объект.Ссылка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			УдаленныйОбъект = Объект.Ссылка.ПолучитьОбъект();
			УдаленныйОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ВыполнятьЗагрузкуСтруктурыВОднойТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// для обновления возвращаемого значения функции ОбщегоНазначенияПовтИсп.ПолноеДеревоСвойствОбъекта
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Истина;
	
КонецФункции // ВыполнитьЗагрузку()

Процедура ПрочитатьКонфигурациюXML(ЧтениеXML, НужноМенятьНаименованиеКонфигурации = Истина)
	
	Перем Конфигурация;
	
	// Проверяем, что текущим узлом является НачалоЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Если выполняется полная загрузка, то читаем стандартным образом
	Если мЗагрузитьНовую Тогда
		
		Конфигурация = ПрочитатьXML(ЧтениеXML);
		
		// Родитель
		Конфигурация.Родитель = КонфигурацияРодитель;
		
		Конфигурация.Записать();
		
		мКонфигурация = Конфигурация.Ссылка;
		
		Возврат;
		
	КонецЕсли;
		
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Ref
	КонфигурацияСсылка = ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Конфигурации"));
	
	// IsFolder
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// DeletionMark
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Parent
	Родитель = ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Конфигурации"));
	
	// Description
	Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Имя
	Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Синоним
	Синоним = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Комментарий
	Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// ДатаОбновления
	Версия = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// ДатаОбновления
	ДатаОбновления = ПрочитатьXML(ЧтениеXML, Тип("Дата"));
	
	// Приложение
	Приложение = ПрочитатьXML(ЧтениеXML, Тип("ПеречислениеСсылка.Приложения"));
	
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Если мКонфигурация.Пустая() Тогда
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда
			
			// Создаем группу
			Конфигурация = Справочники.Конфигурации.СоздатьГруппу();
			
		Иначе
			
			// Создаем элемент справочника
			Конфигурация = Справочники.Конфигурации.СоздатьЭлемент();
			
		КонецЕсли;
		
		// Устанавливаем значение ссылки для нового объекта
		Конфигурация.УстановитьСсылкуНового(КонфигурацияСсылка);
		
	Иначе
		
		// Получим объект по найденной ссылке
		Конфигурация = мКонфигурация.ПолучитьОбъект();
		
		//Сохраним соответствия уникальных идентификаторов для последующего сопоставления
		УстановитьСоответствиеУИ(КонфигурацияСсылка.УникальныйИдентификатор(), мКонфигурация.УникальныйИдентификатор());
		
	КонецЕсли;
	
	Если НужноМенятьНаименованиеКонфигурации
		ИЛИ ПустаяСтрока(Конфигурация.Наименование) Тогда
		
		// Наименование
		Конфигурация.Наименование = Наименование;
		
	КонецЕсли;
	
	// Имя
	Конфигурация.Имя = Имя;
	
	Конфигурация.ПометкаУдаления = ПометкаУдаления;
	
	// Синоним
	Конфигурация.Синоним = Синоним;
	
	// Комментарий
	Конфигурация.Комментарий = Комментарий;
	
	// Версия
	Конфигурация.Версия = Версия;
	
	// ДатаОбновления
	Конфигурация.ДатаОбновления = ДатаОбновления;
	
	// Приложение
	Конфигурация.Приложение = Приложение;
	
	Конфигурация.Записать();
	
	мКонфигурация = Конфигурация.Ссылка;
	
	ПолучитьОбъектыКонфигурации(Конфигурация.Ссылка);
	
КонецПроцедуры // ПрочитатьКонфигурациюXML()

Процедура ПрочитатьОбъектXML(ЧтениеXML, ОбновлятьСостояние)
	
	Перем Объект;
	
	// Проверяем, что текущим узлом является НачалоЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Если выполняется полная загрузка, то читаем стандартным образом
	Если мЗагрузитьНовую Тогда
		
		Объект = ПрочитатьXML(ЧтениеXML);
		Объект.Записать();
		
		Если ОбновлятьСостояние Тогда
			ОбновитьСостояние("СостояниеОбъект", Объект.Наименование);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Ref
	ОбъектСсылка = ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Объекты"));
	
	// IsFolder
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// DeletionMark
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Owner
	Владелец = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML));
	
	// Parent
	Родитель = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Объекты")));
	
	// Description
	Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Имя
	Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Синоним
	Синоним = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Комментарий
	Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Тип
	Тип = ПрочитатьXML(ЧтениеXML, Тип("ПеречислениеСсылка.ТипыОбъектов"));
	
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Иерархический
		Иерархический = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// ВидИерархии
		ВидИерархии = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// ОграничиватьКоличествоУровней
		ОграничиватьКоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КоличествоУровней
		КоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// СерииКодов
		СерииКодов = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// КонтрольУникальности
		КонтрольУникальности = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// АвтоНумерация
		АвтоНумерация = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// Периодичность
		Периодичность = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// Подчиненный
		Подчиненный = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
	КонецЕсли;
	
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Если ОбновлятьСостояние Тогда
		ОбновитьСостояние("СостояниеОбъект", Наименование);
	КонецЕсли;
	
	мЗапросОбъекты.УстановитьПараметр("Имя", Имя);
	мЗапросОбъекты.УстановитьПараметр("Владелец", Владелец);
	мЗапросОбъекты.УстановитьПараметр("Родитель", Родитель);
	мЗапросОбъекты.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	мЗапросОбъекты.УстановитьПараметр("Тип", ?(Тип = Неопределено, Перечисления.ТипыОбъектов.ПустаяСсылка(), Тип));
		
	РезультатЗапроса = мЗапросОбъекты.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда
			
			// Создаем группу
			Объект = Справочники.Объекты.СоздатьГруппу();
			
		Иначе
			
			// Создаем элемент справочника
			Объект = Справочники.Объекты.СоздатьЭлемент();
			
		КонецЕсли;
		
		// Устанавливаем значение ссылки для нового объекта
		Объект.УстановитьСсылкуНового(ОбъектСсылка);
		
		ЗаписыватьЗначение = Истина;
		
	Иначе
		
		// Получим объект по найденной ссылке
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
				
		//Сохраним соответствия уникальных идентификаторов для последующего сопоставления
		УстановитьСоответствиеУИ(ОбъектСсылка.УникальныйИдентификатор(), Выборка.Объект.УникальныйИдентификатор());
		
		Если ДобавлятьТолькоНовыеОбъектыСвойстваЗначения Тогда 
			Возврат;
		КонецЕсли;
		
		Объект = Выборка.Объект.ПолучитьОбъект();
		ЗаписыватьЗначение = Ложь;
		
	КонецЕсли;
	
	// Владелец
	УстановитьЗначениеПараметра(Объект.Владелец, Владелец, ЗаписыватьЗначение);
	
	УстановитьЗначениеПараметра(Объект.ПометкаУдаления, ПометкаУдаления, ЗаписыватьЗначение);
				
	// Родитель
	УстановитьЗначениеПараметра(Объект.Родитель, Родитель, ЗаписыватьЗначение);
		
	// Наименование
	УстановитьЗначениеПараметра(Объект.Наименование, Наименование, ЗаписыватьЗначение);
		
	// Имя
	УстановитьЗначениеПараметра(Объект.Имя, Имя, ЗаписыватьЗначение);
		
	// Синоним
	УстановитьЗначениеПараметра(Объект.Синоним, Синоним, ЗаписыватьЗначение);
		
	// Комментарий
	УстановитьЗначениеПараметра(Объект.Комментарий, Комментарий, ЗаписыватьЗначение);
		
	// Тип
	УстановитьЗначениеПараметра(Объект.Тип, Тип, ЗаписыватьЗначение);
		
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Иерархический
		УстановитьЗначениеПараметра(Объект.Иерархический, Иерархический, ЗаписыватьЗначение);
				
		// ВидИерархии
		УстановитьЗначениеПараметра(Объект.ВидИерархии, ВидИерархии, ЗаписыватьЗначение);
				
		// ОграничиватьКоличествоУровней
		УстановитьЗначениеПараметра(Объект.ОграничиватьКоличествоУровней, ОграничиватьКоличествоУровней, ЗаписыватьЗначение);
				
		// КоличествоУровней
		УстановитьЗначениеПараметра(Объект.КоличествоУровней, КоличествоУровней, ЗаписыватьЗначение);
				
		// СерииКодов
		УстановитьЗначениеПараметра(Объект.СерииКодов, СерииКодов, ЗаписыватьЗначение);
				
		// КонтрольУникальности
		УстановитьЗначениеПараметра(Объект.КонтрольУникальности, КонтрольУникальности, ЗаписыватьЗначение);
				
		// АвтоНумерация
		УстановитьЗначениеПараметра(Объект.АвтоНумерация, АвтоНумерация, ЗаписыватьЗначение);
				
		// Периодичность
		УстановитьЗначениеПараметра(Объект.Периодичность, Периодичность, ЗаписыватьЗначение);
				
		// Подчиненный
		УстановитьЗначениеПараметра(Объект.Подчиненный, Подчиненный, ЗаписыватьЗначение);
				
	КонецЕсли;
	
	Если ЗаписыватьЗначение Тогда
		
		Объект.Записать();
		
	КонецЕсли;
	
	УдалитьИзОбъектовКонфигурации(Объект.Ссылка);		
	
КонецПроцедуры // ПрочитатьОбъектXML()

Процедура ПрочитатьСвойствоXML(ЧтениеXML, ОбновлятьСостояние)
	
	Перем Свойство;
	
	// Проверяем, что текущим узлом является НачалоЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Если выполняется полная загрузка, то читаем стандартным образом
	Если мЗагрузитьНовую Тогда
		
		Свойство = ПрочитатьXML(ЧтениеXML);
		Свойство.ТипыСтрокой = глТипыСвойстваСтрокой(Свойство);
		Свойство.Записать();
		
		Если ОбновлятьСостояние Тогда
			ОбновитьСостояние("СостояниеСвойство", Свойство.Наименование);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Ref
	СвойствоСсылка = ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Свойства"));

	// IsFolder
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// DeletionMark
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Owner
	Владелец = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML));
	
	// Parent
	Родитель = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Свойства")));
	
	// Code
	Код = ПрочитатьXML(ЧтениеXML, Тип("Число"));
	
	// Description
	Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Синоним
	Синоним = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Комментарий
	Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Использование
		Использование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// Индексирование
		Индексирование = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КвалификаторыЧисла_Длина
		КвалификаторыЧисла_Длина = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// КвалификаторыЧисла_Точность
		КвалификаторыЧисла_Точность = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// КвалификаторыЧисла_Неотрицательное
		КвалификаторыЧисла_Неотрицательное = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КвалификаторыСтроки_Длина
		КвалификаторыСтроки_Длина = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// КвалификаторыСтроки_Фиксированная
		КвалификаторыСтроки_Фиксированная = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КвалификаторыДаты_Состав
		КвалификаторыДаты_Состав = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// Авторегистрация
		Авторегистрация = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
	КонецЕсли;
	
	// Вид
	Вид = ПрочитатьXML(ЧтениеXML, Тип("ПеречислениеСсылка.ВидыСвойств"));
	
	// ТипыСтрокой
	ТипыСтрокой = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	Типы = Новый Массив;
	
	// Типы
	Если ЧтениеXML.Имя = "Типы" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		// Чтение следующего узла
		ЧтениеXML.Прочитать();
		
		Пока ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			
			// Чтение следующего узла
			ЧтениеXML.Прочитать();
			
			Типы.Добавить(ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Объекты"))));
			
			// Чтение следующего узла для завершение чтения элемента
			ЧтениеXML.Прочитать();
			
		КонецЦикла;
		
		// Чтение следующего узла для завершение чтения элемента
		ЧтениеXML.Прочитать();
		
	КонецЕсли;
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Если ОбновлятьСостояние Тогда
		ОбновитьСостояние("СостояниеСвойство", Наименование);
	КонецЕсли;
	
	ЭтоЭлементСоставаПланаОбмена = Вид = Перечисления.ВидыСвойств.ЭлементСоставаПланаОбмена И Наименование <> "{Состав}";
	
	Если ЭтоЭлементСоставаПланаОбмена Тогда
		
		ЗапросСвойства = мЗапросСоставПланаОбмена;
		ЗапросСвойства.УстановитьПараметр("Тип", Типы[0]);
		
	Иначе
		
		ЗапросСвойства = мЗапросСвойств;
		
	КонецЕсли;
	
	ЗапросСвойства.УстановитьПараметр("Наименование", Наименование);
	ЗапросСвойства.УстановитьПараметр("Владелец", Владелец);
	ЗапросСвойства.УстановитьПараметр("Родитель", Родитель);
	ЗапросСвойства.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	ЗапросСвойства.УстановитьПараметр("Вид", Вид);
	
	РезультатЗапроса = ЗапросСвойства.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда
			
			// Создаем группу
			Свойство = Справочники.Свойства.СоздатьГруппу();
			
		Иначе
			
			// Создаем элемент справочника
			Свойство = Справочники.Свойства.СоздатьЭлемент();
			
		КонецЕсли;
		
		// Устанавливаем значение ссылки для нового объекта
		Свойство.УстановитьСсылкуНового(СвойствоСсылка);
		
		ЗаписыватьЗначение = Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СвойствоВыборки = Выборка.Свойство;
		
		// Сохраним соответствия уникальных идентификаторов для последующего сопоставления
		УстановитьСоответствиеУИ(СвойствоСсылка.УникальныйИдентификатор(), СвойствоВыборки.УникальныйИдентификатор());
		
		Если ДобавлятьТолькоНовыеОбъектыСвойстваЗначения Тогда
			Возврат;
		КонецЕсли;
		
		Свойство = СвойствоВыборки.ПолучитьОбъект();
		
		ЗаписыватьЗначение = Ложь;
		
	КонецЕсли;
	
	// Владелец
	УстановитьЗначениеПараметра(Свойство.Владелец, Владелец, ЗаписыватьЗначение);
	
	УстановитьЗначениеПараметра(Свойство.ПометкаУдаления, ПометкаУдаления, ЗаписыватьЗначение);
			
	// Родитель
	УстановитьЗначениеПараметра(Свойство.Родитель, Родитель, ЗаписыватьЗначение);
		
	// Код
	Свойство.Код = Код; // это свойство ни на что не влияет
			
	// Наименование
	УстановитьЗначениеПараметра(Свойство.Наименование, Наименование, ЗаписыватьЗначение);
		
	// Синоним
	УстановитьЗначениеПараметра(Свойство.Синоним, Синоним, ЗаписыватьЗначение);
		
	// Комментарий
	УстановитьЗначениеПараметра(Свойство.Комментарий, Комментарий, ЗаписыватьЗначение);
				
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Использование
		УстановитьЗначениеПараметра(Свойство.Использование, Использование, ЗаписыватьЗначение);
				
		// Индексирование
		УстановитьЗначениеПараметра(Свойство.Индексирование, Индексирование, ЗаписыватьЗначение);
				
		// КвалификаторыЧисла_Длина
		УстановитьЗначениеПараметра(Свойство.КвалификаторыЧисла_Длина, КвалификаторыЧисла_Длина, ЗаписыватьЗначение);
				
		// КвалификаторыЧисла_Точность
		УстановитьЗначениеПараметра(Свойство.КвалификаторыЧисла_Точность, КвалификаторыЧисла_Точность, ЗаписыватьЗначение);
				
		// КвалификаторыЧисла_Неотрицательное
		УстановитьЗначениеПараметра(Свойство.КвалификаторыЧисла_Неотрицательное, КвалификаторыЧисла_Неотрицательное, ЗаписыватьЗначение);
				
		// КвалификаторыСтроки_Длина
		УстановитьЗначениеПараметра(Свойство.КвалификаторыСтроки_Длина, КвалификаторыСтроки_Длина, ЗаписыватьЗначение);
				
		// КвалификаторыСтроки_Фиксированная
		УстановитьЗначениеПараметра(Свойство.КвалификаторыСтроки_Фиксированная, КвалификаторыСтроки_Фиксированная, ЗаписыватьЗначение);
				
		// КвалификаторыДаты_Состав
		УстановитьЗначениеПараметра(Свойство.КвалификаторыДаты_Состав, КвалификаторыДаты_Состав, ЗаписыватьЗначение);
				
		// Авторегистрация
		УстановитьЗначениеПараметра(Свойство.Авторегистрация, Авторегистрация, ЗаписыватьЗначение);
				
	КонецЕсли;
	
	// Вид
	УстановитьЗначениеПараметра(Свойство.Вид, Вид, ЗаписыватьЗначение);
		
	// Типы
	
	Если Свойство.Типы.Количество() <> Типы.Количество() Тогда
		
		ЗаписыватьЗначение = Истина;
		
		Свойство.Типы.Очистить();
		
		Для Индекс = 0 По Типы.Количество() - 1 Цикл
			
			Свойство.Типы.Добавить().Тип = Типы[Индекс];
			
		КонецЦикла;
		
	Иначе
		
		Для Индекс = 0 По Типы.Количество() - 1 Цикл
			
			УстановитьЗначениеПараметра(Свойство.Типы[Индекс].Тип, Типы[Индекс], ЗаписыватьЗначение);
						
		КонецЦикла;
		
		
	КонецЕсли;
	
	// ТипыСтрокой
	УстановитьЗначениеПараметра(Свойство.ТипыСтрокой, глТипыСвойстваСтрокой(Свойство), ЗаписыватьЗначение);
	
	Если ЗаписыватьЗначение Тогда
		
		Свойство.Записать();
		
	КонецЕсли;
	
	УдалитьИзОбъектовКонфигурации(Свойство.Ссылка);		
	
КонецПроцедуры // ПрочитатьСвойствоXML()

Процедура УстановитьЗначениеПараметра(ТекущийПараметр, НовыйПараметр, ЗначениеИзменено)
	
	Если ТекущийПараметр <> НовыйПараметр Тогда
		
		ТекущийПараметр = НовыйПараметр;
		ЗначениеИзменено = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗначениеXML(ЧтениеXML, ОбновлятьСостояние)
	
	Перем Значение;
	
	// Проверяем, что текущим узлом является НачалоЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Если выполняется полная загрузка, то читаем стандартным образом
	Если мЗагрузитьНовую Тогда
		
		Значение = ПрочитатьXML(ЧтениеXML);
		Значение.Записать();
		
		Если ОбновлятьСостояние Тогда
			ОбновитьСостояние("СостояниеЗначение", Значение.Наименование);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Ref
	ЗначениеСсылка = ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Значения"));

	// DeletionMark
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Owner
	Владелец = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML));
	
	// Parent
	Родитель = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML, Тип("СправочникСсылка.Значения")));
	
	// Code
	Код = ПрочитатьXML(ЧтениеXML, Тип("Число"));
	
	// Description
	Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Синоним
	Синоним = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Комментарий
	Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Предопределенное
	Предопределенное = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Типы
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Если ОбновлятьСостояние Тогда
		ОбновитьСостояние("СостояниеЗначение", Наименование);
	КонецЕсли;
		
	мЗапросЗначения.УстановитьПараметр("Наименование", Наименование);
	мЗапросЗначения.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = мЗапросЗначения.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Создаем элемент справочника
		Значение = Справочники.Значения.СоздатьЭлемент();
		
		// Устанавливаем значение ссылки для нового объекта
		Значение.УстановитьСсылкуНового(ЗначениеСсылка);
		
		ЗаписыватьЗначение = Истина;
		
	Иначе
		
		// Получим объект по найденной ссылке
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
				
		//Сохраним соответствия уникальных идентификаторов для последующего сопоставления
		УстановитьСоответствиеУИ(ЗначениеСсылка.УникальныйИдентификатор(), Выборка.Значение.УникальныйИдентификатор());
		
		Если ДобавлятьТолькоНовыеОбъектыСвойстваЗначения Тогда 
			Возврат;
		КонецЕсли;

		Значение = Выборка.Значение.ПолучитьОбъект();
		ЗаписыватьЗначение = Ложь;
		
	КонецЕсли;
	
	// Владелец
	УстановитьЗначениеПараметра(Значение.Владелец, Владелец, ЗаписыватьЗначение);
	
	УстановитьЗначениеПараметра(Значение.ПометкаУдаления, ПометкаУдаления, ЗаписыватьЗначение);
				
	// Родитель
	УстановитьЗначениеПараметра(Значение.Родитель, Родитель, ЗаписыватьЗначение);
		
	// Код
	Значение.Код = Код;
			
	// Наименование
	УстановитьЗначениеПараметра(Значение.Наименование, Наименование, ЗаписыватьЗначение);
		
	// Синоним
	УстановитьЗначениеПараметра(Значение.Синоним, Синоним, ЗаписыватьЗначение);
		
	// Комментарий
	УстановитьЗначениеПараметра(Значение.Комментарий, Комментарий, ЗаписыватьЗначение);
		
	// Предопределенное
	УстановитьЗначениеПараметра(Значение.Предопределенное, Предопределенное, ЗаписыватьЗначение);
	
	Если ЗаписыватьЗначение Тогда
	
		Значение.Записать();
	
	КонецЕсли;
	
	УдалитьИзОбъектовКонфигурации(Значение.Ссылка);		
	
КонецПроцедуры // ПрочитатьЗначениеXML()

Функция ПолучитьСсылкуНаОбъект(Объект)
	
	УИ = мСоответствиеУИ[Строка(Объект.УникальныйИдентификатор())];
	
	Если УИ = Неопределено Тогда
		
		Возврат Объект;
		
	Иначе
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку("<Ref>" + УИ + "</Ref>");
		
		Возврат ПрочитатьXML(ЧтениеXML, ТипЗнч(Объект));
		
	КонецЕсли;
	
КонецФункции // ПолучитьСсылкуНаОбъект()

Процедура УстановитьСоответствиеУИ(УИЗагруженный, УИСуществующий)
	
	мСоответствиеУИ.Вставить(Строка(УИЗагруженный), Строка(УИСуществующий));
	
КонецПроцедуры // УстановитьСоответствиеУИ()

Процедура ПолучитьОбъектыКонфигурации(Конфигурация)
	
	Если мЗагрузитьНовую
		ИЛИ ДобавлятьТолькоНовыеОбъектыСвойстваЗначения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Объекты.Ссылка
	                      |ИЗ
	                      |	Справочник.Объекты КАК Объекты
	                      |ГДЕ
	                      |	Объекты.Владелец = &Конфигурация
	                      |	И Объекты.ЭтоГруппа = ЛОЖЬ
	                      |	И Объекты.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	Свойства.Ссылка
	                      |ИЗ
	                      |	Справочник.Свойства КАК Свойства
	                      |ГДЕ
	                      |	Свойства.Владелец.Владелец = &Конфигурация
	                      |	И Свойства.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	Значения.Ссылка
	                      |ИЗ
	                      |	Справочник.Значения КАК Значения
	                      |ГДЕ
	                      |	Значения.Владелец.Владелец = &Конфигурация
	                      |	И Значения.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	мОбъектыКонфигурации = Запрос.Выполнить().Выгрузить();
	
	мОбъектыКонфигурации.Индексы.Добавить("Ссылка");
	
КонецПроцедуры // ПолучитьОбъектыКонфигурации()

Процедура УдалитьИзОбъектовКонфигурации(Объект)
	
	Если мЗагрузитьНовую
		ИЛИ ДобавлятьТолькоНовыеОбъектыСвойстваЗначения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденнаяСтрока = мОбъектыКонфигурации.Найти(Объект, "Ссылка");
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		мОбъектыКонфигурации.Удалить(НайденнаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьИзОбъектовКонфигурации()

Процедура ОбновитьСостояние(ИмяСтрокиСостояния, Заголовок)
	
	Если Состояния = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояния[ИмяСтрокиСостояния].Заголовок = Заголовок;
	
КонецПроцедуры // ОбновитьСостояние()

#КонецЕсли

мКоличествоЭлементовДляОбновленияСтатуса = 15;
ВыполнятьЗагрузкуСтруктурыВОднойТранзакции = Истина;

мЗапросОбъекты = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объекты.Ссылка КАК Объект
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|
	|ГДЕ
	|	Объекты.Имя = &Имя И
	|	Объекты.Владелец = &Владелец И
	|	Объекты.Родитель = &Родитель И
	|	Объекты.ЭтоГруппа = &ЭтоГруппа И
	|	Объекты.Тип = &Тип");


// Поиск объекта среди существующих
мЗапросСвойств = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Свойства.Ссылка КАК Свойство
	|ИЗ
	|	Справочник.Свойства КАК Свойства
	|
	|ГДЕ
	|	Свойства.Наименование = &Наименование И
	|	Свойства.Владелец = &Владелец И
	|	Свойства.Родитель = &Родитель И
	|	Свойства.ЭтоГруппа = &ЭтоГруппа И
	|	Свойства.Вид = &Вид");

мЗапросСоставПланаОбмена = Новый Запрос(
	"ВЫБРАТЬ
	|	Свойства.Ссылка КАК Свойство
	|ИЗ
	|	Справочник.Свойства КАК Свойства
	|ГДЕ
	|	Свойства.Наименование = &Наименование
	|	И Свойства.Владелец = &Владелец
	|	И Свойства.Родитель = &Родитель
	|	И Свойства.ЭтоГруппа = &ЭтоГруппа
	|	И Свойства.Вид = &Вид
	|	И Свойства.Типы.Тип = &Тип");

// Поиск объекта среди существующих
мЗапросЗначения = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Значения.Ссылка КАК Значение
	|ИЗ
	|	Справочник.Значения КАК Значения
	|
	|ГДЕ
	|	Значения.Наименование = &Наименование И
	|	Значения.Владелец = &Владелец");	
	