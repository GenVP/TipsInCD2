////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПЕРЕМЕННЫЕ

Перем ФлагОшибки Экспорт; // глобальный флаг ошибки

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЗаписьXML Экспорт;
Перем мВерсияФормата;
Перем мТипСтрока;

Перем мСоответствиеПеречисленийИИмен;

Перем одСообщения; // Соответствие. Ключ - код ошибки, Значение - описание ошибки

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет выгрузку правил регистрации в XML-файл
//
// Параметры:
//  Нет.
// 
Процедура ВыполнитьВыгрузкуПравил() Экспорт
	
	ФлагОшибки = Ложь;
	
	// выполняем проверку заполнения обязательных полей обработки
	ВыполнитьПроверкуЗаполненияПолейОбработки();
	
	Если ФлагОшибки Тогда
		Возврат; // выходим при ошибке заполнения реквизитов
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	мЗаписьXML = Новый ЗаписьXML;
	мЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	
	Попытка
		ВыгрузитьРегистрацию();
	Исключение
		
		СообщитьОбОшибкеОбработки(1, ОписаниеОшибки());
		
	КонецПопытки;
	
	мЗаписьXML.Закрыть();
	мЗаписьXML = Неопределено;
	
	Если Не ФлагОшибки Тогда
		
		// копируем временный файл выгрузки в файл указанный пользователем
		ПолучитьФайлВыгрузки(ИмяВременногоФайла, ИмяФайлаПравил);
		
	КонецЕсли;
	
	// удаляем временный файл правил
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ПРАВИЛ РЕГИСТРАЦИИ

Процедура ВыгрузитьРегистрацию() Экспорт
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаРегистрации");
	
	ВыгрузитьРеквизитыРегистрации();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("СоставПланаОбмена");
	
	ВыгрузитьСоставПланаОбмена(РегистрацияДляВыгрузки.ПланОбмена);
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); // СоставПланаОбмена
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаРегистрацииОбъектов");
	
	ВыгрузитьПравилаРегистрацииОбъектов();
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); //ПравилаРегистрацииОбъектов
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); // ПравилаРегистрации
	
КонецПроцедуры // ВыгрузитьРегистрацию()

Процедура ВыгрузитьДанныеПоПлануОбмена(Имя, ПланОбмена)
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(Имя); // ПланОбмена
	
	УстановитьАтрибут("Имя", ПланОбмена.Имя);
	
	Стр = XMLСтрока(ПланОбмена.Наименование);
	
	мЗаписьXML.ЗаписатьТекст(Стр);
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); // ПланОбмена
	
КонецПроцедуры

Процедура ВыгрузитьСоставПланаОбмена(ПланОбмена)
	
	СоставПланаОбмена = ПолучитьСоставПланаОбмена(ПланОбмена);
	
	Для Каждого СтрокаТаблицы ИЗ СоставПланаОбмена Цикл
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Элемент");
		
		ДобавитьЭлемент("Тип",             СтрокаТаблицы.Тип);
		ДобавитьЭлемент("Авторегистрация", СтрокаТаблицы.Авторегистрация);
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеПоКонфигурации(Имя, Конфигурация)
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	
	Стр = XMLСтрока(Конфигурация.Имя);
	УстановитьАтрибут("ВерсияПлатформы",     ПолучитьПредставлениеПриложения(Конфигурация.Приложение));
	УстановитьАтрибут("ВерсияКонфигурации",  Конфигурация.Версия);
	УстановитьАтрибут("СинонимКонфигурации", Конфигурация.Синоним);
	
	мЗаписьXML.ЗаписатьТекст(Стр);
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); // Конфигурация
	
КонецПроцедуры

Процедура ВыгрузитьРеквизитыРегистрации()

	РегистрацияОбъект                = РегистрацияДляВыгрузки.ПолучитьОбъект();
	РегистрацияОбъект.ДатаОбновления = ТекущаяДата();
	РегистрацияОбъект.Записать();
	
	РегистрацияДляВыгрузки = РегистрацияОбъект.Ссылка;
	
	ДобавитьЭлемент("ВерсияФормата",     мВерсияФормата);
	ДобавитьЭлемент("Ид",                Строка(РегистрацияДляВыгрузки.УникальныйИдентификатор()));
	ДобавитьЭлемент("Наименование",      Строка(РегистрацияДляВыгрузки.Наименование));
	ДобавитьЭлемент("ДатаВремяСоздания", РегистрацияДляВыгрузки.ДатаОбновления);
	
	ВыгрузитьДанныеПоПлануОбмена("ПланОбмена", РегистрацияДляВыгрузки.ПланОбмена);
	ВыгрузитьДанныеПоКонфигурации("Конфигурация", РегистрацияДляВыгрузки.Конфигурация);
	
	ДобавитьЭлемент("Комментарий", Строка(РегистрацияДляВыгрузки.Комментарий));
	
КонецПроцедуры // ВыгрузитьРеквизитыРегистрации()

Процедура ВыгрузитьПравилаРегистрацииОбъектов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаРегистрацииОбъектов.ЭтоГруппа                           КАК ЭтоГруппа,
	|	ПравилаРегистрацииОбъектов.Отключить                           КАК Отключить,
	|	ПравилаРегистрацииОбъектов.Валидное                            КАК Валидное,
	|	ПравилаРегистрацииОбъектов.Код                                 КАК Код,
	|	ПравилаРегистрацииОбъектов.Наименование                        КАК Наименование,
	|	ВЫРАЗИТЬ(ПравилаРегистрацииОбъектов.Описание КАК Строка(1000)) КАК Описание,
	|	ПравилаРегистрацииОбъектов.Комментарий                         КАК Комментарий,
	|	ПравилаРегистрацииОбъектов.ОбъектНастройки.Наименование        КАК ОбъектНастройкиНаименование,
	|	ПравилаРегистрацииОбъектов.ОбъектНастройки.Тип                 КАК ОбъектНастройкиТип,
	|	ПравилаРегистрацииОбъектов.ОбъектНастройки.Имя                 КАК ОбъектНастройкиИмя,
	|	ПравилаРегистрацииОбъектов.ТипГруппы                           КАК ТипГруппы,
	|	ПравилаРегистрацииОбъектов.ОтборПоСвойствамОбъекта             КАК ОтборПоСвойствамОбъекта,
	|	ПравилаРегистрацииОбъектов.ОтборПоСвойствамПланаОбмена         КАК ОтборПоСвойствамПланаОбмена,
	|
	|	ПравилаРегистрацииОбъектов.АлгоритмПередОбработкойПравила            КАК АлгоритмПередОбработкойПравила,
	|	ПравилаРегистрацииОбъектов.АлгоритмПриОбработкеПравила               КАК АлгоритмПриОбработкеПравила,
	|	ПравилаРегистрацииОбъектов.АлгоритмПриОбработкеДополнительныйПравила КАК АлгоритмПриОбработкеДополнительныйПравила,
	|	ПравилаРегистрацииОбъектов.АлгоритмПослеОбработкиПравила             КАК АлгоритмПослеОбработкиПравила,
	|
	|	ПравилаРегистрацииОбъектов.РеквизитРежимаВыгрузкиОбъектовОбмена.Наименование КАК РеквизитРежимаВыгрузки
	|ИЗ
	|	Справочник.ПравилаРегистрацииОбъектов КАК ПравилаРегистрацииОбъектов
	|ГДЕ
	|	ПравилаРегистрацииОбъектов.Владелец = &Регистрация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаРегистрацииОбъектов.ЭтоГруппа ИЕРАРХИЯ
	|";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияДляВыгрузки);
	
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВыгрузитьСтрокиДереваПРО(ДеревоРезультата);
	
КонецПроцедуры // ВыгрузитьПравилаРегистрацииОбъектов()

Процедура ВыгрузитьПравилоРегистрацииОбъекта(ПРО)
	
	Если НЕ ПРО.ЭтоГруппа Тогда
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Правило");
		
		УстановитьАтрибут("Отключить", ПРО.Отключить);
		УстановитьАтрибут("Валидное",  ПРО.Валидное);
		
		// Реквизиты правила
		ДобавитьЭлемент("Код",                         ПРО.Код);
		ДобавитьЭлемент("Наименование",                ПРО.Наименование);
		ДобавитьЭлемент("Описание",                    ПРО.Описание);
		ДобавитьЭлемент("Комментарий",                 ПРО.Комментарий);
		
		ДобавитьЭлемент("ОбъектНастройки",             ПРО.ОбъектНастройкиНаименование);
		
		ТипОбъекта = ИмяЗначенияПеречисления(ПРО.ОбъектНастройкиТип);
		
		// свойства объекта настройки
		ДобавитьЭлемент("ОбъектМетаданныхИмя", ТипОбъекта + "." + СокрЛП(ПРО.ОбъектНастройкиИмя));
		ДобавитьЭлемент("ОбъектМетаданныхТип", ТипОбъекта);
		
		ДобавитьЭлемент("РеквизитРежимаВыгрузки", ПРО.РеквизитРежимаВыгрузки);
		
		// ВЫГРУЖАЕМ ЭЛЕМЕНТЫ ОТБОРА ПО СВОЙСТВАМ ПЛАНА ОБМЕНА
		
		ОтборПоСвойствамПланаОбмена = ПРО.ОтборПоСвойствамПланаОбмена.Получить();
		
		// выгружаем элементы отбора по свойствам Плана обмена
		Если ТипЗнч(ОтборПоСвойствамПланаОбмена) = Тип("ДеревоЗначений") Тогда
			
			мЗаписьXML.ЗаписатьНачалоЭлемента("ОтборПоСвойствамПланаОбмена");
			
			ВыгрузитьОтборПоСвойствамПланаОбмена(ОтборПоСвойствамПланаОбмена);
			
			мЗаписьXML.ЗаписатьКонецЭлемента(); // ОтборПоСвойствамПланаОбмена
			
		КонецЕсли;
		
		// ВЫГРУЖАЕМ ЭЛЕМЕНТЫ ОТБОРА ПО СВОЙСТВАМ ОБЪЕКТА
		
		ОтборПоСвойствамОбъекта = ПРО.ОтборПоСвойствамОбъекта.Получить();
		
		// выгружаем элементы отбора по свойствам Объекта
		Если ТипЗнч(ОтборПоСвойствамОбъекта) = Тип("ДеревоЗначений") Тогда
			
			мЗаписьXML.ЗаписатьНачалоЭлемента("ОтборПоСвойствамОбъекта");
			
			ВыгрузитьОтборПоСвойствамОбъекта(ОтборПоСвойствамОбъекта);
			
			мЗаписьXML.ЗаписатьКонецЭлемента(); // ОтборПоСвойствамОбъекта
			
		КонецЕсли;
		
		// выгружаем события правила
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПРО.АлгоритмПередОбработкойПравила,            "ПередОбработкой");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПРО.АлгоритмПриОбработкеПравила,               "ПриОбработке");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПРО.АлгоритмПриОбработкеДополнительныйПравила, "ПриОбработкеДополнительный");
		ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ПРО.АлгоритмПослеОбработкиПравила,             "ПослеОбработки");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // Правило
		
	Иначе
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");
		
		УстановитьАтрибут("Отключить", ПРО.Отключить);
		
		// Реквизиты группы
		ДобавитьЭлемент("Код",          ПРО.Код);
		ДобавитьЭлемент("Наименование", ПРО.Наименование);
		ДобавитьЭлемент("Описание",     ПРО.Описание);
		ДобавитьЭлемент("Комментарий",  ПРО.Комментарий);
		ДобавитьЭлемент("ТипГруппы",    ИмяЗначенияПеречисления(ПРО.ТипГруппы));
		
		ВыгрузитьСтрокиДереваПРО(ПРО);
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // Группа
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьПравилоРегистрацииОбъекта()

Процедура ВыгрузитьСтрокиДереваПРО(Дерево)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ВыгрузитьПравилоРегистрацииОбъекта(СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьОтборПоСвойствамПланаОбмена(ДеревоЗначенийЭлементовОтбора)
	
	Для Каждого ЭлементОтбора ИЗ ДеревоЗначенийЭлементовОтбора.Строки Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ВыгрузитьЭлементОтбора(ЭлементОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьОтборПоСвойствамОбъекта(ДеревоЗначенийЭлементовОтбора)
	
	Для Каждого ЭлементОтбора ИЗ ДеревоЗначенийЭлементовОтбора.Строки Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ВыгрузитьЭлементОтбораОбъекта(ЭлементОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьЭлементОтбора(ЭлементОтбора)
	
	Если НЕ ЭлементОтбора.ЭтоГруппа Тогда
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементОтбора");
		
		// Свойства элемента отбора
		ДобавитьЭлемент("ЭтоСтрокаКонстанты",  ЭлементОтбора.ЭтоСтрокаКонстанты);
		ДобавитьЭлемент("ТипСвойстваОбъекта",  ЭлементОтбора.ТипСвойстваОбъекта.Наименование);
		ДобавитьЭлемент("СвойствоПланаОбмена", ЭлементОтбора.СвойствоПланаОбмена);
		ДобавитьЭлемент("ВидСравнения",        ИмяЗначенияПеречисления(ЭлементОтбора.ВидСравнения));
		
		// свойство объекта - строка или значение константы;
		// значение константы может содержать дефолтное значение типа; его тоже выгружаем
		ДобавитьЭлементСПустымЗначением("СвойствоОбъекта", ЭлементОтбора.СвойствоОбъекта);
		
		// выгружаем свойства объекта с учетом вложенности
		ВыгрузитьТаблицуСвойств(ЭлементОтбора.ТаблицаСвойствОбъекта, "ТаблицаСвойствОбъекта");
		
		// выгружаем свойства плана обмена с учетом вложенности
		ВыгрузитьТаблицуСвойств(ЭлементОтбора.ТаблицаСвойствПланаОбмена, "ТаблицаСвойствПланаОбмена");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // ЭлементОтбора
		
	Иначе
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");
		
		// Свойства группы элементов отбора
		ДобавитьЭлемент("БулевоЗначениеГруппы", ИмяЗначенияПеречисления(ЭлементОтбора.БулевоЗначениеГруппы));
		
		ВыгрузитьОтборПоСвойствамПланаОбмена(ЭлементОтбора);
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // Группа
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьЭлементОтбораОбъекта(ЭлементОтбора)
	
	Если НЕ ЭлементОтбора.ЭтоГруппа Тогда
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементОтбора");
		
		// Свойства элемента отбора
		ДобавитьЭлемент("ТипСвойстваОбъекта", ЭлементОтбора.ТипСвойстваОбъекта.Наименование);
		ДобавитьЭлемент("ВидСравнения",       ИмяЗначенияПеречисления(ЭлементОтбора.ВидСравнения));
		ДобавитьЭлемент("СвойствоОбъекта",    ЭлементОтбора.СвойствоОбъекта);
		
		Если ПолеТаблицыЗначенийСуществует(ЭлементОтбора.Владелец(), "ВидЭлементаОтбора") Тогда
			
			ДобавитьЭлемент("Вид", ЭлементОтбора["ВидЭлементаОтбора"]);
			
		КонецЕсли;
		
		// значение константы может содержать дефолтное значение типа; его тоже выгружаем
		ДобавитьЭлементСПустымЗначением("ЗначениеКонстанты", ЭлементОтбора.ЗначениеКонстанты);
		
		// выгружаем свойства объекта с учетом вложенности
		ВыгрузитьТаблицуСвойств(ЭлементОтбора.ТаблицаСвойствОбъекта, "ТаблицаСвойствОбъекта");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // ЭлементОтбора
		
	Иначе
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Группа");
		
		// Свойства группы элементов отбора
		ДобавитьЭлемент("БулевоЗначениеГруппы", ИмяЗначенияПеречисления(ЭлементОтбора.БулевоЗначениеГруппы));
		
		ВыгрузитьОтборПоСвойствамОбъекта(ЭлементОтбора);
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // Группа
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьТаблицуСвойств(ТаблицаСвойств, Знач ИмяУзла)
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаСвойств Цикл
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("Свойство");
		
		ДобавитьЭлемент("Наименование", СтрокаТаблицы.Наименование);
		ДобавитьЭлемент("Тип",          СтрокаТаблицы.Тип);
		ДобавитьЭлемент("Вид",          СтрокаТаблицы.Вид);
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // Свойство
		
	КонецЦикла;
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); // ИмяУзла
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТАМИ XML

// Добавляет новый xml-узел, устанавливает значение
//
// Параметры: 
//  Имя            - имя добавляемого узла
//  Значение       - значение добавляемого узла
//
Процедура ДобавитьЭлемент(Имя, Значение)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	мЗаписьXML.ЗаписатьТекст(Стр);
	мЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Добавляет новый xml-узел, устанавливает значение
//
// Параметры: 
//  Имя            - имя добавляемого узла
//  Значение       - значение добавляемого узла
//
Процедура ДобавитьЭлементСПустымЗначением(Имя, Значение)
	
	Если ПустаяСтрока(Строка(Значение)) Тогда
		Возврат;
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	мЗаписьXML.ЗаписатьТекст(Стр);
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Устанавливает атрибут xml-узла
//
// Параметры: 
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Имя, Значение)

	Если Значение = Null Тогда
		СтрокаЗаписи = "";
	Иначе
		СтрокаЗаписи = XMLСтрока(Значение);
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет проверку заполнения обязательных полей обработки
//
// Параметры:
//  Нет.
// 
Процедура ВыполнитьПроверкуЗаполненияПолейОбработки()
	
	Если РегистрацияДляВыгрузки.Пустая() Тогда
		
		СообщитьОбОшибкеОбработки(2);
		
	ИначеЕсли ПустаяСтрока(ИмяФайлаПравил) Тогда
		
		СообщитьОбОшибкеОбработки(3);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ИмяВременногоФайла)
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьФайлВыгрузки(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника)
	
	// устанавливаем правильное расширение файла при необходимости
	УстановитьРасширениеФайла(ИмяФайлаПриемника, СжиматьФайлПравил);
	
	Если СжиматьФайлПравил Тогда
		
		Попытка
			
			#Если Клиент Тогда
			Состояние("Выполняется архивация файла правил...");
			#КонецЕсли
			
			Архиватор = Новый ЗаписьZipФайла(ИмяФайлаПриемника, , "Файл правил регистрации объектов");
			Архиватор.Добавить(ИмяФайлаИсточника);
			Архиватор.Записать();
			
		Исключение
			
			СообщитьОбОшибкеОбработки(4, ОписаниеОшибки());
			
		КонецПопытки;
		
	Иначе
		
		// копируем временный файл правил в указанный файл
		Попытка
			КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		Исключение
			
			СообщитьОбОшибкеОбработки(5, ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеОбработки(Код = -1, ОписаниеОшибки = "")
	
	Если одСообщения = Неопределено Тогда
		одСообщения = ИнициализацияСообщений();
	КонецЕсли;
	
	СтрокаСообщения = одСообщения[Код];
	
	СтрокаСообщения = ?(СтрокаСообщения = Неопределено, "", СтрокаСообщения);
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	СообщитьОбОшибке(СтрокаСообщения, ФлагОшибки);
	
КонецПроцедуры

// Устанавливает требуемое расширение для файла: "zip" или "xml".
// Если расширение файла не совпадает с требуемым, то к имени файла прибавляется требуемое расширение через точку
//
// Параметры:
//  ИмяФайла - Строка - Имя файла для установки требуемого расширения
//  ЭтоАрхив - Булево - Признак того, что файл архивный
// 
Процедура УстановитьРасширениеФайла(ИмяФайла, Знач ЭтоАрхив = Ложь)
	
	Расширение = ?(ЭтоАрхив, "zip", "xml");
	
	РасширениеФайла = Прав(ИмяФайла, 3);
	
	Если ВРег(РасширениеФайла) <> ВРег(Расширение) Тогда
		
		ИмяФайла = ИмяФайла + "." + Расширение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьСтроковоеЗначениеТолькоЕслиНеПустая(ЗначениеЭлемента, ИмяСохранения)
	
	Если ПустаяСтрока(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЭлемент(ИмяСохранения, ЗначениеЭлемента);
	
КонецПроцедуры

// Возвращает строку - имя переданного значения перечисления
//
// Параметры:
//  Значение       - Значение перечисления
//
// Возвращаемое значение:
//  Строка - имя переданного значения перечисления
//
Функция ИмяЗначенияПеречисления(Значение)

	ЗначениеСоответствия = мСоответствиеПеречисленийИИмен.Получить(Значение);
	
	Если ЗначениеСоответствия = Неопределено Тогда
		
		Если Значение = Null
			Или Значение.Пустая() Тогда
		
			ЗначениеСоответствия = "";
			
		Иначе
			
			ОбъектМД = Значение.Метаданные();
			ИндексЗначения = Перечисления[ОбъектМД.Имя].Индекс(Значение);

			ЗначениеСоответствия = ОбъектМД.ЗначенияПеречисления[ИндексЗначения].Имя;
			
		КонецЕсли;
		
		мСоответствиеПеречисленийИИмен.Вставить(Значение, ЗначениеСоответствия); 
		
	КонецЕсли;
	
	Возврат ЗначениеСоответствия;
			
КонецФункции // ИмяЗначенияПеречисления()

Функция ПолучитьПредставлениеПриложения(Приложение)
	
	Если      Приложение = Перечисления.Приложения.Предприятие77         Тогда Возврат "7.7";
	ИначеЕсли Приложение = Перечисления.Приложения.Предприятие80         Тогда Возврат "8.1";
	ИначеЕсли Приложение = Перечисления.Приложения.УправляемоеПриложение Тогда Возврат "8.2";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолеТаблицыЗначенийСуществует(ТаблицаЗначений, Знач ИмяКолонки)
	
	Возврат ТаблицаЗначений.Колонки.Найти(ИмяКолонки) <> Неопределено;
	
КонецФункции

Функция ПолучитьСоставПланаОбмена(ПланОбмена)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СвойстваТипы.Ссылка.Авторегистрация КАК Авторегистрация,
	|	СвойстваТипы.Тип.Наименование       КАК Тип
	|ИЗ
	|	Справочник.Свойства.Типы КАК СвойстваТипы
	|ГДЕ
	|	  СвойстваТипы.Ссылка.Владелец = &ПланОбмена
	|	И СвойстваТипы.Ссылка.Вид      = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.ЭлементСоставаПланаОбмена)
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПланОбмена", ПланОбмена);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Процедура ИнициализацияРеквизитовИМодульныхПеременных()
	
	мВерсияФормата = "2.01";
	
	мТипСтрока = Тип("Строка");
	
	мСоответствиеПеречисленийИИмен = Новый Соответствие;
	
КонецПроцедуры

// Инициализирует переменную, содержащую соответствия кодов сообщений их описаниям
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияСообщений()
	
	Сообщения = Новый Соответствие;
	
	Сообщения.Вставить(0,  НСтр("ru = 'Внутренняя ошибка'"));
	Сообщения.Вставить(1,  НСтр("ru = 'Ошибка при выгрузке правил регистрации в XML-файл данных'"));
	Сообщения.Вставить(2,  НСтр("ru = 'Не указана регистрация для выгрузки в XML-файл данных'"));
	Сообщения.Вставить(3,  НСтр("ru = 'Не указано имя файла для выгрузки правил регистрации'"));
	Сообщения.Вставить(4,  НСтр("ru = 'Ошибка при архивировании файла выгрузки'"));
	Сообщения.Вставить(5,  НСтр("ru = 'Ошибка при копировании файла выгрузки'"));
	
	Возврат Сообщения;
	
КонецФункции // ИнициализацияСообщений()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();