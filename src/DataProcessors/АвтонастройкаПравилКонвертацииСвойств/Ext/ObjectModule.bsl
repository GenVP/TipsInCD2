#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств

Перем мТекстАлгоритма Экспорт;

Перем мЗапросПоискаПравилКонвертацииСвойств;

Перем мТаблицаНайденныхПКО;

Перем мТаблицаСвойствИсточника, мТаблицаСвойствПриемника;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Осуществляет синхронизацию свойств источника и приемника для ПКО.
// Синхронизация осуществляется по наименованиям свойств и с учетом
// принадлежности родителю. Устанавливает соответствие существующих 
// ПКС свойствам.
//
// Параметры:
//  Правило        - ПКО, для которого осуществляется синхронизация свойств
//
// Возвращаемое значение:
//  Истина, если передано существующее правило. Ложь если правило пустое.
// 
Функция ВыполнитьСинхронизацию(ВыполнятьПоискПКО = Истина) Экспорт
        	
	Если ПравилоКО.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПравилоКО.Источник = Null И ПравилоКО.Приемник = Null Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРезультат.Строки.Очистить();
	
	Если ТаблицаРезультат.Колонки.Количество() = 0 Тогда

		ТаблицаРезультат.Колонки.Добавить("ПравилоКС",     ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииСвойств"),  "Правило КС",    25);
	    ТаблицаРезультат.Колонки.Добавить("Источник",      ОписаниеТипа("СправочникСсылка.Свойства"),                   "Источник",      25);
		ТаблицаРезультат.Колонки.Добавить("Приемник",      ОписаниеТипа("СправочникСсылка.Свойства"),                   "Приемник",      25);
		ТаблицаРезультат.Колонки.Добавить("ПравилоКО",     ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииОбъектов"), "Правило КО",    25);
		ТаблицаРезультат.Колонки.Добавить("ТипИсточника",,                                                              "Тип источника", 25);
	    ТаблицаРезультат.Колонки.Добавить("ТипПриемника",,                                                              "Тип приемника", 25);
		
		ТаблицаРезультат.Колонки.Добавить("НаименованиеИсточника");
		ТаблицаРезультат.Колонки.Добавить("ВидИсточника");
		
		ТаблицаРезультат.Колонки.Добавить("НаименованиеПриемника");
		ТаблицаРезультат.Колонки.Добавить("ВидПриемника");
		ТаблицаРезультат.Колонки.Добавить("Пометка",       ОписаниеТипа("Число"));
	
	КонецЕсли;

	СинхронизироватьСвойства(ТаблицаРезультат.Строки, ПравилоКО.Источник, ПравилоКО.Приемник,,, Истина, Ложь, , ВыполнятьПоискПКО);
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДАННЫМИ

Процедура ДобавитьСтрокуВДеревоСоотвествия(НоваяСтрока, ПравилаКС)
	
	НоваяСтрока.Источник  = ПравилаКС.Источник;
	НоваяСтрока.Приемник  = ПравилаКС.Приемник;
	НоваяСтрока.ПравилоКС = ПравилаКС.Ссылка;
	НоваяСтрока.ПравилоКО = ПравилаКС.ПравилоКонвертации;
					
	НоваяСтрока.НаименованиеИсточника  = ПравилаКС.НаименованиеИсточника;
	НоваяСтрока.ВидИсточника  = ПравилаКС.ВидИсточника;	
	
	НоваяСтрока.НаименованиеПриемника  = ПравилаКС.НаименованиеПриемника;
	НоваяСтрока.ВидПриемника  = ПравилаКС.ВидПриемника;
	
КонецПроцедуры

Функция ИнициализироватьДанныеПоТипамСвойств(ВладСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
		|		Свойства.Ссылка КАК Ссылка,
		|		Сумма(1) КАК Количество,
		|		Максимум(ТИПЫСвойства.Тип) КАК ТипДанных,
		|		Максимум(ТИПЫСвойства.Тип.Тип) КАК ТипДанныхТип
		|	ИЗ
		|		Справочник.Свойства КАК Свойства
		|		
		|	Левое Соединение Справочник.Свойства.Типы КАК ТИПЫСвойства
		|		ПО (ТИПЫСвойства.Ссылка = Свойства.Ссылка)	
		|		
		|	ГДЕ
        |
		|		Свойства.Владелец = &ВладСвойства
		|		И НЕ ТИПЫСвойства.Тип Есть NULL
		|		
		|	Сгруппировать ПО
        |
		|	  Свойства.Ссылка
		|	  
		|	 Имеющие Сумма(1) = 1";
		
	Запрос.УстановитьПараметр("ВладСвойства", ВладСвойства);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Ссылка");
	
	Возврат Таблица;
	
КонецФункции

// Осуществляет синхронизацию свойств источника и приемника.
//
// Параметры:
//  Строки                           - Коллекция строк дерева значений
//  Источник                         - Объект источник
//  Приемник                         - Объект приемник
//  СвойстваИсточникРодитель         - Родитель свойств источника
//                                     для синхронизации
//  СвойстваПриемникРодитель         - Родитель свойств приемника
//                                     для синхронизации
//  ЗагружатьПравила                 - Флаг, определяющий необходимость
//                                     загрузки существующих ПКС
//  ИскатьПравила                    - Флаг, определяющий необходимость
//                                     поиска существующих ПКС
//  СинхронизироватьСПустымРодителем - Флаг, определяющий необходимость
//                                     синхронизации свойств при неуказанных параметрах
//                                     СвойстваИсточникРодитель
//                                     или ЯСвойстваПриемникРодитель
//
Процедура СинхронизироватьСвойства(Строки,
	                               Источник,
								   Приемник,
								   СвойстваИсточникРодитель = Неопределено,
								   СвойстваПриемникРодитель = Неопределено,
								   ЗагружатьПравила = Ложь,
								   ИскатьПравила = Ложь,
								   СинхронизироватьСПустымРодителем = Истина,
								   ВыполнятьПоискПКО = истина) Экспорт

	СоответствиеСвойстваИсточника = Новый Соответствие;
	СоответствиеСвойстваПриемника = Новый Соответствие;
	
	МассивИспользованныхИсточников = Новый Массив();
	МассивИспользованныхПриемников = Новый Массив();
	
	мТаблицаСвойствИсточника = ИнициализироватьДанныеПоТипамСвойств(ПравилоКО.Источник);
	мТаблицаСвойствПриемника = ИнициализироватьДанныеПоТипамСвойств(ПравилоКО.Приемник);
	
    Если ЗагружатьПравила Тогда

		//ПравилаКС = Справочники.ПравилаКонвертацииСвойств.ВыбратьИерархически(, ПравилоКО,, "Порядок");
		
		СтрокаОграниченияПоВладельцу = ?(НЕ ЗначениеЗаполнено(ПравилоКО), "", "И ПравилаКонвертацииСвойств.Владелец = &Владелец");
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ различные
					   |	ПравилаКонвертацииСвойств.Порядок,	
		 			   |	ПравилаКонвертацииСвойств.Ссылка КАК Ссылка,
					   |	ПравилаКонвертацииСвойств.ЭтоГруппа КАК ЭтоГруппа,
					   |	ПравилаКонвертацииСвойств.Родитель КАК Родитель,
					   |	ПравилаКонвертацииСвойств.Источник КАК Источник,
					   |	ПравилаКонвертацииСвойств.Приемник КАК Приемник,
					   |	ПравилаКонвертацииСвойств.Источник.Родитель КАК РодительИсточника,
					   |	ПравилаКонвертацииСвойств.Приемник.Родитель КАК РодительПриемника,
					   |	ПравилаКонвертацииСвойств.Источник.Наименование КАК НаименованиеИсточника,
					   |	ПравилаКонвертацииСвойств.Источник.Вид КАК ВидИсточника,
					   |	ПравилаКонвертацииСвойств.Приемник.Наименование КАК НаименованиеПриемника,
					   |	ПравилаКонвертацииСвойств.Приемник.Вид КАК ВидПриемника,
					   |	ПравилаКонвертацииСвойств.ПравилоКонвертации КАК ПравилоКонвертации
					   |ИЗ
					   |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
					   |ГДЕ
					   |	ИСТИНА
					   |	" + СтрокаОграниченияПоВладельцу + "
					   |
					   |Упорядочить ПО ПравилаКонвертацииСвойств.Родитель, ПравилаКонвертацииСвойств.Порядок
					   |
					   |Итоги По ПравилаКонвертацииСвойств.Родитель Иерархия";
					   
		Запрос.УстановитьПараметр("Владелец", ПравилоКО);
		
		ПравилаВременные = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ПравилаВременные.Следующий() Цикл
						
			ПравилаКС = ПравилаВременные.Выбрать();
			
			Пока ПравилаКС.Следующий() Цикл

				Если НЕ ПравилаКС.Источник.Пустая() Тогда

					Если СоответствиеСвойстваИсточника[ПравилаКС.РодительИсточника] = Неопределено Тогда
						НоваяСтрока = Строки.Добавить();
					Иначе
						НоваяСтрока = СоответствиеСвойстваИсточника[ПравилаКС.РодительИсточника].Строки.Добавить();
					КонецЕсли;
					
					ДобавитьСтрокуВДеревоСоотвествия(НоваяСтрока, ПравилаКС);

					Если ПравилаКС.ЭтоГруппа Тогда
						СоответствиеСвойстваИсточника.Вставить(ПравилаКС.Источник, НоваяСтрока);
					КонецЕсли;
					
					МассивИспользованныхИсточников.Добавить(ПравилаКС.Источник);

					Если НЕ ПравилаКС.Приемник.Пустая() Тогда
						
						Если ПравилаКС.ЭтоГруппа Тогда
							СоответствиеСвойстваПриемника.Вставить(ПравилаКС.Приемник, НоваяСтрока);
						КонецЕсли;
						
						МассивИспользованныхПриемников.Добавить(ПравилаКС.Приемник);
						
					КонецЕсли;				

				Иначе

					Если СоответствиеСвойстваПриемника[ПравилаКС.РодительПриемника] = Неопределено Тогда
						НоваяСтрока = Строки.Добавить();
					Иначе
						НоваяСтрока = СоответствиеСвойстваПриемника[ПравилаКС.РодительПриемника].Строки.Добавить();
					КонецЕсли;

					ДобавитьСтрокуВДеревоСоотвествия(НоваяСтрока, ПравилаКС);

					Если ПравилаКС.ЭтоГруппа Тогда
						СоответствиеСвойстваПриемника.Вставить(ПравилаКС.Приемник, НоваяСтрока);
					КонецЕсли;
					
					МассивИспользованныхПриемников.Добавить(ПравилаКС.Приемник);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;

	СинхронизироватьСПустымРодителемИсточник = Истина;

	Если СвойстваИсточникРодитель <> Неопределено
		И НЕ ЗначениеЗаполнено(СвойстваИсточникРодитель)Тогда
		
		СинхронизироватьСПустымРодителемИсточник = СинхронизироватьСПустымРодителем;	
		
	КонецЕсли;

	СинхронизироватьСПустымРодителемПриемник = Истина;

	Если СвойстваПриемникРодитель <> Неопределено 
		И НЕ ЗначениеЗаполнено(СвойстваПриемникРодитель) Тогда
		
        СинхронизироватьСПустымРодителемПриемник = СинхронизироватьСПустымРодителем;
		
	КонецЕсли;

	//Свойства источника
	Если СинхронизироватьСПустымРодителемИсточник Тогда
		
	    //СвойстваИсточника = Справочники.Свойства.ВыбратьИерархически(СвойстваИсточникРодитель, Источник,, "Наименование");
		
		СтрокаОграниченияПоРодителю = ?(НЕ ЗначениеЗаполнено(СвойстваИсточникРодитель), "", "И Свойства.Родитель = &Родитель");
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	*
		               |ИЗ
		               |	Справочник.Свойства КАК Свойства
					   |ГДЕ
					   |	Свойства.Владелец = &Владелец
					   |	" + СтрокаОграниченияПоРодителю + "
					   |    И Свойства.ПометкаУдаления = Ложь
					   |	И НЕ (Свойства.Ссылка В (&МассивИспользованныхСсылок))
					   |
					   |Упорядочить ПО Свойства.Родитель, Свойства.ЭтоГруппа, Свойства.Наименование
					   |
					   |Итоги По Свойства.Родитель Иерархия";
					   
		Запрос.УстановитьПараметр("Родитель", СвойстваИсточникРодитель);
		Запрос.УстановитьПараметр("Владелец", Источник);
		Запрос.УстановитьПараметр("МассивИспользованныхСсылок", МассивИспользованныхИсточников);
		
		ВременныеСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВременныеСвойства.Следующий() Цикл
			
			СвойстваИсточника = ВременныеСвойства.Выбрать();
			
			Пока СвойстваИсточника.Следующий() Цикл

		        Если (СоответствиеСвойстваИсточника[СвойстваИсточника.Ссылка] <> Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СвойстваИсточника.Родитель)
					ИЛИ СоответствиеСвойстваИсточника[СвойстваИсточника.Родитель] = Неопределено Тогда
					НоваяСтрока = Строки.Добавить();
				Иначе
					НоваяСтрока = СоответствиеСвойстваИсточника[СвойстваИсточника.Родитель].Строки.Добавить();
				КонецЕсли;

				НоваяСтрока.Источник = СвойстваИсточника.Ссылка;
				НоваяСтрока.НаименованиеИсточника  = СвойстваИсточника.Наименование;
				НоваяСтрока.ВидИсточника  = СвойстваИсточника.Вид;

				Если НЕ ЗначениеЗаполнено(СвойстваИсточника.Родитель) Тогда
					СоответствиеСвойстваИсточника.Вставить(СвойстваИсточника.Ссылка, НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
    //Свойства приемника
	Если СинхронизироватьСПустымРодителемПриемник Тогда
		
		//СвойстваПриемника = Справочники.Свойства.ВыбратьИерархически(СвойстваПриемникРодитель, Приемник,, "Наименование");
		
		СтрокаОграниченияПоРодителю = ?(НЕ ЗначениеЗаполнено(СвойстваПриемникРодитель), "", "И Свойства.Родитель = &Родитель");
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	*
		               |ИЗ
		               |	Справочник.Свойства КАК Свойства
					   |ГДЕ
					   |	Свойства.Владелец = &Владелец
					   |	" + СтрокаОграниченияПоРодителю + "
					   |     И Свойства.ПометкаУдаления = Ложь
					   |	 И НЕ (Свойства.Ссылка В (&МассивИспользованныхСсылок))
					   |
					   |Упорядочить ПО Свойства.Родитель, Свойства.ЭтоГруппа, Свойства.Наименование
					   |
					   |Итоги По Свойства.Родитель Иерархия";
					   
		Запрос.УстановитьПараметр("Родитель", СвойстваПриемникРодитель);
		Запрос.УстановитьПараметр("Владелец", Приемник);
		Запрос.УстановитьПараметр("МассивИспользованныхСсылок", МассивИспользованныхПриемников);
		
		ВременныеСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВременныеСвойства.Следующий() Цикл
			
			СвойстваПриемника = ВременныеСвойства.Выбрать();
			
			Пока СвойстваПриемника.Следующий() Цикл
						
				Если (СоответствиеСвойстваПриемника[СвойстваПриемника.Ссылка] <> Неопределено) Тогда
					Продолжить;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СвойстваПриемника.Родитель)
					ИЛИ СоответствиеСвойстваПриемника[СвойстваПриемника.Родитель] = Неопределено Тогда
					Таблица = Строки;
				Иначе
					Таблица = СоответствиеСвойстваПриемника[СвойстваПриемника.Родитель].Строки;
				КонецЕсли;

				Если НЕ СинхронизироватьСвойство(Таблица, СвойстваПриемника, СоответствиеСвойстваПриемника) Тогда
					
					Если СоответствиеСвойстваПриемника[СвойстваПриемника.Родитель] = Неопределено Тогда
						НоваяСтрока = Строки.Добавить();
					Иначе
						НоваяСтрока = СоответствиеСвойстваПриемника[СвойстваПриемника.Родитель].Строки.Добавить();
					КонецЕсли;

					НоваяСтрока.Приемник = СвойстваПриемника.Ссылка;
					НоваяСтрока.НаименованиеПриемника  = СвойстваПриемника.Наименование;
					НоваяСтрока.ВидПриемника  = СвойстваПриемника.Вид;

					Если НЕ ЗначениеЗаполнено(СвойстваПриемника.Родитель) Тогда
						СоответствиеСвойстваПриемника.Вставить(СвойстваПриемника.Ссылка, НоваяСтрока);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (НЕ ЗагружатьПравила)
		И ИскатьПравила Тогда
		
		НайтиПравилаКС(ПравилоКО, ТаблицаРезультат.Строки);
		
	КонецЕсли;
	
	Если ВыполнятьПоискПКО Тогда
		
		ЗапросПравил = Новый Запрос;
		ЗапросПравил.Текст = "ВЫБРАТЬ 
	                      |	ПравилаКонвертацииОбъектов.Ссылка КАК СсылкаНаПКО,
						  | ПравилаКонвертацииОбъектов.Источник КАК Источник,
						  |	ПравилаКонвертацииОбъектов.Приемник КАК Приемник
	                      |ИЗ
	                      |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	                      |ГДЕ
	                      |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
	                      |	И ПравилаКонвертацииОбъектов.ЭтоГруппа = Ложь";
						  
		ЗапросПравил.УстановитьПараметр("Владелец", ПравилоКО.Владелец);
		
		мТаблицаНайденныхПКО = ЗапросПравил.Выполнить().Выгрузить();
		мТаблицаНайденныхПКО.Индексы.Добавить("Источник,Приемник");
		
		НайтиПравилаКОДляСтрок(ТаблицаРезультат.Строки);
		
	КонецЕсли;
	
	Если Не ОтображатьВсеДанные Тогда
		РекурсивноУдалитьЛишниеСтрокиДерева(ТаблицаРезультат.Строки);
	КонецЕсли;	
	
КонецПроцедуры // СинхронизироватьСвойства()

Процедура РекурсивноУдалитьЛишниеСтрокиДерева(Строки)
	
	ТекущийНомерСтроки = Строки.Количество() - 1;
	Пока ТекущийНомерСтроки >= 0 Цикл
		
		ТекущаяСтрока = Строки[ТекущийНомерСтроки];
		
		Если ТекущаяСтрока.Строки.Количество() > 0 Тогда
			
			РекурсивноУдалитьЛишниеСтрокиДерева(ТекущаяСтрока.Строки);
			
		КонецЕсли;
		
		Если ТекущаяСтрока.Строки.Количество() = 0
			И ЗначениеЗаполнено(ТекущаяСтрока.ПравилоКС) Тогда
			
			Строки.Удалить(ТекущаяСтрока);	
			
		КонецЕсли;
		
		ТекущийНомерСтроки = ТекущийНомерСтроки - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НужноИскатьИлиСоздаватьПКОДляДанных(Источник, Приемник)
	
	СтрокаТаблицыИсточника = мТаблицаСвойствИсточника.Найти(Источник, "Ссылка");
	СтрокаТаблицыПриемника = мТаблицаСвойствПриемника.Найти(Приемник, "Ссылка");
	
	// это сложный тип - надо искать
	Если СтрокаТаблицыИсточника = Неопределено
		ИЛИ СтрокаТаблицыПриемника = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// это неизвестный тип - не надо искать
	Если СтрокаТаблицыИсточника.Типданных = NULL
		ИЛИ  СтрокаТаблицыПриемника.Типданных = NULL Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// примитивные типы и так преобразуются
	КонечныйТипИсточника = СтрокаТаблицыИсточника.ТипданныхТип;
	КонечныйТипПриемника = СтрокаТаблицыПриемника.ТипданныхТип;
	
	Если (КонечныйТипИсточника = Перечисления.ТипыОбъектов.Булево
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Дата
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Строка
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Число
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Календарь
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.НаборКонстант
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.РегистрБухгалтерии
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.РегистрНакопления
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.РегистрРасчета
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.РегистрСведений
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.УникальныйИдентификатор
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.ХранилищеЗначения)
		
		ИЛИ
		
		(КонечныйТипПриемника = Перечисления.ТипыОбъектов.Булево
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Дата
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Строка
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Число
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Календарь
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.НаборКонстант
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.РегистрБухгалтерии
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.РегистрНакопления
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.РегистрРасчета
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.РегистрСведений
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.УникальныйИдентификатор
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.ХранилищеЗначения)	 Тогда
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьМожноАвтоматическиСопоставитьЭлементы(Источник, Приемник)
	
	СтрокаТаблицыИсточника = мТаблицаСвойствИсточника.Найти(Источник, "Ссылка");
	СтрокаТаблицыПриемника = мТаблицаСвойствПриемника.Найти(Приемник, "Ссылка");
	
	Если СтрокаТаблицыИсточника = Неопределено
		ИЛИ СтрокаТаблицыПриемника = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтрокаТаблицыИсточника.Типданных = NULL
		ИЛИ  СтрокаТаблицыПриемника.Типданных = NULL Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	
	КонечныйТипИсточника = СтрокаТаблицыИсточника.Типданных;
	КонечныйТипПриемника = СтрокаТаблицыПриемника.Типданных;
	
	// нельзя примитивный тип автоматом конвертировать в ссылку на объект
	Если (КонечныйТипИсточника = Перечисления.ТипыОбъектов.Булево
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Дата
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Строка
		ИЛИ КонечныйТипИсточника = Перечисления.ТипыОбъектов.Число)
		
		И
		
		(КонечныйТипПриемника = Перечисления.ТипыОбъектов.БизнесПроцесс
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Документ
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Задача
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.ПланВидовРасчета
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.ПланОбмена
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.ПланСчетов
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.Справочник
		ИЛИ КонечныйТипПриемника = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса) Тогда
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Осуществляет синхронизацию свойства с коллекцией строк.
// Синхронизация осуществляется по наименованиям свойств
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
//  Свойство       - Свойство для синхронизации
//  Соответствие   - Соответствие с уже синхронизированными свойствами
//
// Возвращаемое значение:
//  Истина если свойство синхронизировано. Ложь если не синхронизировано.
// 
Функция СинхронизироватьСвойство(Строки, Свойство, Соответствие)

	НаименованиеСвойства = Свойство.Наименование;
	ВидСвойства = Свойство.Вид;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НаименованиеИсточника", НаименованиеСвойства);
	ПараметрыОтбора.Вставить("ВидИсточника", ВидСвойства);
		
	НайденныеСтроки = Строки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0
		И ИмяРеквизитаМожетБытьИзменено(НаименованиеСвойства) Тогда
			
		НовоеНаименованиеСвойства = ПолучитьАналогИмениРеквизита(НаименованиеСвойства);
				
		ПараметрыОтбора.Вставить("НаименованиеИсточника", НовоеНаименованиеСвойства);				
		НайденныеСтроки = Строки.НайтиСтроки(ПараметрыОтбора);
		
	КонецЕсли;
	
	Для каждого Строка из НайденныеСтроки Цикл
		
		// не все типы автоматически могут быть сопоставлены
		// определим можно ли автоматом из одного типа получить другой
			
		Если РежимАвтоматическогоСопоставления Тогда
			МожноСопоставитьСвойства = ОпределитьМожноАвтоматическиСопоставитьЭлементы(Строка.Источник, Свойство.Ссылка); 
		Иначе
			// в режиме ручного сопоставления, когда показывается форма, то все варианты даем для сопоставления
			МожноСопоставитьСвойства = Истина;	
		КонецЕсли;
			
		Если Не МожноСопоставитьСвойства Тогда
				
			Возврат Ложь;
				
		Иначе
			
			Строка.Приемник = Свойство.Ссылка;
			Строка.НаименованиеПриемника  = Свойство.Наименование;
			Строка.ВидПриемника  = Свойство.Вид;
					
			Соответствие.Вставить(Свойство.Ссылка, Строка);
			
			Возврат Истина;
			
		КонецЕсли;									
				
	КонецЦикла;

    Возврат Ложь;
	
КонецФункции // СинхронизироватьСвойство()

// Осуществляет поиск ПКС для ПКО с учетом соответствия источника и приемника
//
// Параметры:
//  ПравилоКО      - ПКО, для которого необходимо найти ПКС
//  Строки         - коллекция строк дерева значений
// 
Процедура НайтиПравилаКС(ПравилоКО, Строки)

	Для каждого Строка из Строки Цикл
		
		НайтиПравилаКС(ПравилоКО, Строка.Строки);

		Если НЕ Строка.ПравилоКС.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ Строка.Источник.Пустая()) И (НЕ Строка.Приемник.Пустая()) Тогда
			
			мЗапросПоискаПравилКонвертацииСвойств.УстановитьПараметр("Приемник", Строка.Приемник);
			мЗапросПоискаПравилКонвертацииСвойств.УстановитьПараметр("Источник", Строка.Источник);
			мЗапросПоискаПравилКонвертацииСвойств.УстановитьПараметр("Владелец", ПравилоКО);
			
			ВыборкаДанных = мЗапросПоискаПравилКонвертацииСвойств.Выполнить().Выбрать();
			
			Если ВыборкаДанных.Следующий() Тогда
			
				Строка.ПравилоКС = ВыборкаДанных.Ссылка;
							
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // НайтиПравилаКС()

// Осуществляет поиск ПКО с учетом соответствия источника и приемника
//
// Параметры:
//  Строки         - коллекция строк дерева значений
// 
Процедура НайтиПравилаКОДляСтрок(Строки)

	Для каждого Строка из Строки Цикл
		
		Если Строка.Строки.Количество() > 0 Тогда
			НайтиПравилаКОДляСтрок(Строка.Строки);
		КонецЕсли;
		
		Если НЕ Строка.ПравилоКО.Пустая() 
			ИЛИ НЕ Строка.ПравилоКС.Пустая() Тогда
			
        	Продолжить;
			
		КонецЕсли;
		
		Если Строка.ВидИсточника = Перечисления.ВидыСвойств.ВидыСубконтоСчета
			ИЛИ Строка.ВидИсточника = Перечисления.ВидыСвойств.Измерение
			ИЛИ Строка.ВидИсточника = Перечисления.ВидыСвойств.Реквизит
			ИЛИ Строка.ВидИсточника = Перечисления.ВидыСвойств.Ресурс
			ИЛИ Строка.ВидИсточника = Перечисления.ВидыСвойств.Свойство Тогда
		
			Строка.ПравилоКО = НайтиПравилоКО(Строка.Источник, Строка.Приемник);
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // НайтиПравилаКО()

Функция ОпределитьПоТипамНаличиеПКО(ТипПриемника, ТипИсточника) Экспорт
	
	СтрокиТаблицы = мТаблицаНайденныхПКО.НайтиСтроки(Новый Структура("Источник, Приемник", ТипИсточника, ТипПриемника));
	
	Если СтрокиТаблицы.Количество() <> 0 Тогда 
		НайденноеПравилоКО = СтрокиТаблицы[0].СсылкаНаПКО;
	Иначе
		НайденноеПравилоКО = Неопределено;
	КонецЕсли;

	Возврат НайденноеПравилоКО;	
	
КонецФункции

// Осуществляет поиск ПКО с учетом соответствия источника и приемника
//
// Параметры:
//  Источник       - Объект источник
//  Приемник       - Объект приемник
//
// Возвращаемое значение:
//  Найденное ПКО
// 
Функция НайтиПравилоКО(Источник, Приемник) Экспорт

	СтрокаТаблицыИсточника = мТаблицаСвойствИсточника.Найти(Источник, "Ссылка");
	СтрокаТаблицыПриемника = мТаблицаСвойствПриемника.Найти(Приемник, "Ссылка");
	
	Если СтрокаТаблицыИсточника = Неопределено
		ИЛИ СтрокаТаблицыПриемника = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СтрокаТаблицыИсточника.Типданных = NULL
		ИЛИ  СтрокаТаблицыПриемника.Типданных = NULL Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПравилоМожетБыть = ОпределитьНужноИскатьПравило(СтрокаТаблицыИсточника.Типданных, СтрокаТаблицыПриемника.Типданных);
	
	Если Не ПравилоМожетБыть Тогда
		
		НайденноеПравилоКО = Неопределено;
		
	Иначе	
		
		НайденноеПравилоКО = ОпределитьПоТипамНаличиеПКО(СтрокаТаблицыИсточника.Типданных, СтрокаТаблицыПриемника.Типданных);
		
	КонецЕсли;		
    	
	Возврат НайденноеПравилоКО;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПРАВИЛАМИ

Функция ОпределитьПКОПоСтрокеДанных(Строка, СписокСозданныхПравил)
	
	ЕстьНеобходимостьИскатьПКО = НужноИскатьИлиСоздаватьПКОДляДанных(Строка.Источник, Строка.Приемник);
	
	Если Не ЕстьНеобходимостьИскатьПКО Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСоотвествийТипов = Неопределено;
	ПравилоКонвертации = Неопределено;
	ВозможностьАвтоматическогоСозданияПравила = ОпределитьПоИсточникуИПриемникуМожетБытьПКОСозданоНесколькоПКО(ПравилоКО.Владелец, Строка.Источник, Строка.Приемник, ТаблицаСоотвествийТипов, ПравилоКонвертации);
	
	Если ВозможностьАвтоматическогоСозданияПравила Тогда
		
		ПравилоКонвертации = СоздатьМножественноеКоличествоПравилоКО(ПравилоКО, Строка.Источник, Строка.Приемник, 
			Истина, СписокСозданныхПравил, ТаблицаСоотвествийТипов, СоздаватьПКСТолькоДляПолейПоиска);
		
	КонецЕсли;
	
	Возврат ПравилоКонвертации;
	
КонецФункции

// Создает новые ПКС и записывает их в справочник.
// Правила создаются в случае установленной пометки в строке, не пустом
// приемнике и отсутствии ПКС.
//
// Параметры:
//  Строки             - Коллекция строк дерева значений
//  СоздаватьПравилаКО - Флаг, определяющий необходимость создания ПКО
//                                                                                                     
Процедура СохранитьПравилаКС(Строки, СоздаватьПравилаКО, СписокСозданныхПравил = Неопределено) Экспорт

	ТекущийПорядок = 0;
	
	Для каждого Строка из Строки Цикл
		
		Если Строка.Пометка И Строка.ПравилоКС.Пустая() Тогда

			Если Строка.Строки.Количество() > 0 Тогда
            	НовоеПравило = Справочники.ПравилаКонвертацииСвойств.СоздатьГруппу();
			Иначе
				НовоеПравило = Справочники.ПравилаКонвертацииСвойств.СоздатьЭлемент();
			КонецЕсли;
			
			НовоеПравило.Владелец       = ПравилоКО.Ссылка;
			Если Строка.Родитель <> Неопределено Тогда
				НовоеПравило.Родитель       = Строка.Родитель.ПравилоКС;
			КонецЕсли;
			НовоеПравило.Источник       = Строка.Источник;
			НовоеПравило.Приемник       = Строка.Приемник;
						
            НовоеПравило.Порядок   		= ТекущийПорядок;
			НовоеПравило.Отключить      = Строка.Приемник.Пустая();
			
			Если Строка.ПравилоКО.Пустая() И СоздаватьПравилаКО Тогда
				
				НайденноеПравило = ОпределитьПКОПоСтрокеДанных(Строка, СписокСозданныхПравил);
				НовоеПравило.ПравилоКонвертации = НайденноеПравило;
				                				
			Иначе
				
				НовоеПравило.ПравилоКонвертации = Строка.ПравилоКО;
				
			КонецЕсли;
			
			НовоеПравило.мУстанавливатьИмяИВидИсточникаПриемника = Ложь;
			
			НовоеПравило.ИмяИсточника = Строка.НаименованиеИсточника;
			НовоеПравило.ВидИсточника = XMLСтрока(Строка.ВидИсточника);
			
			// тип надо установить
			СтрокаТаблицыИсточника = мТаблицаСвойствИсточника.Найти(НовоеПравило.Источник, "Ссылка");
			Если СтрокаТаблицыИсточника <> Неопределено Тогда
				
				НовоеПравило.ТипИсточника = Строка(СтрокаТаблицыИсточника.Типданных);
				
			КонецЕсли;
			
			// для приемника то же самое...
			НовоеПравило.ИмяПриемника = Строка.НаименованиеПриемника;
			НовоеПравило.ВидПриемника = XMLСтрока(Строка.ВидПриемника);
			
			// тип надо установить
			СтрокаТаблицыПриемника = мТаблицаСвойствПриемника.Найти(НовоеПравило.Приемник, "Ссылка");
			Если СтрокаТаблицыПриемника <> Неопределено Тогда
				
				НовоеПравило.ТипПриемника = Строка(СтрокаТаблицыПриемника.Типданных);
				
			КонецЕсли;
			
			
            			
			НовоеПравило.Записать();
			
			Если ТекущийПорядок % 1000 = 0 Тогда
			
				Состояние("Создано правило конвертации свойств: " + Строка.НаименованиеИсточника + " --> " + Строка.НаименованиеПриемника);
			
			КонецЕсли;
			
			ТекущийПорядок = НовоеПравило.Порядок + 50;

			Строка.ПравилоКС = НовоеПравило.Ссылка;
			Строка.ПравилоКО = НовоеПравило.ПравилоКонвертации;

		Иначе

			Если НЕ Строка.ПравилоКС.Пустая() Тогда
				
				Если Строка.ПравилоКО.Пустая() И СоздаватьПравилаКО Тогда
					
					НайденноеПравило = ОпределитьПКОПоСтрокеДанных(Строка, СписокСозданныхПравил);
					
	                Если Строка.ПравилоКС.ПравилоКонвертации <> НайденноеПравило Тогда
					
						ПравилоКС = Строка.ПравилоКС.ПолучитьОбъект();
						ПравилоКС.ПравилоКонвертации = НайденноеПравило;
						ПравилоКС.Записать();
					
					КонецЕсли;				
					
					Строка.ПравилоКО = ПравилоКС.ПравилоКонвертации;
					
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;

		Строка.Пометка = Ложь;
		СохранитьПравилаКС(Строка.Строки, СоздаватьПравилаКО, СписокСозданныхПравил);
	
	КонецЦикла;

КонецПроцедуры // СохранитьПравилаКС()

Процедура УстановитьПометкиУНайденныхСтрок(ИнтерактивнаяУстановкаПометок) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИнтерактивнаяУстановкаПометок", ИнтерактивнаяУстановкаПометок);
	Параметры.Вставить("СоздаватьПКСТолькоДляПолейПоиска", СоздаватьПКСТолькоДляПолейПоиска);
	
	Параметры.Вставить("ПустойИсточник", Ложь);
	Параметры.Вставить("ПустойПриемник", Ложь);
	
	Для каждого Строка из ТаблицаРезультат.Строки Цикл
		Строка.Пометка = 1;
		глУстановитьПометки(Строка, мТекстАлгоритма, Параметры);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПометкиСогласноПараметрам(ТекущаяСтрока, ИнтерактивнаяУстановкаПометок) Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИнтерактивнаяУстановкаПометок", ИнтерактивнаяУстановкаПометок);
	Параметры.Вставить("СоздаватьПКСТолькоДляПолейПоиска", СоздаватьПКСТолькоДляПолейПоиска);
	Параметры.Вставить("ПустойИсточник", Ложь);
	Параметры.Вставить("ПустойПриемник", Ложь);
		
	глУстановитьПометки(ТекущаяСтрока, мТекстАлгоритма, Параметры);	
	
КонецПроцедуры

#КонецЕсли

мТекстАлгоритма = "
    |Если ТекСтрока.Строки.Количество() Тогда
	|	Отказ = Ложь;
	|ИначеЕсли ТекСтрока.ПравилоКС.Пустая() Тогда
	|
	|   Если Параметры[""СоздаватьПКСТолькоДляПолейПоиска""] Тогда
	|
	|		Если НЕ ТекСтрока.Источник.Пустая()
	|			И НЕ ТекСтрока.Приемник.Пустая()
	|			И (ТекСтрока.НаименованиеИсточника = ""Дата""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""ДатаДок""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""Номер""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""НомерДок""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""Код""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""Наименование""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""Владелец""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""Родитель""
	|				ИЛИ ТекСтрока.НаименованиеИсточника = ""ЭтоГруппа"") Тогда
	|			
	|			Отказ = Ложь;
	|       Иначе
	|          	Отказ = Истина;
	|		КонецЕсли;
	|
	|	  
	|	ИначеЕсли ((НЕ ТекСтрока.Источник.Пустая()) ИЛИ (Параметры[""ИнтерактивнаяУстановкаПометок""] ИЛИ Параметры[""ПустойИсточник""]))
	|	 	И ((НЕ ТекСтрока.Приемник.Пустая()) ИЛИ (Параметры[""ИнтерактивнаяУстановкаПометок""] ИЛИ Параметры[""ПустойПриемник""])) Тогда
	|
	|		Отказ = Ложь;
	|
	|	Иначе
	|		Отказ = Истина;
	|	
	|	КонецЕсли;
	|
	|Иначе
	|	Отказ = Истина;
	|КонецЕсли;";

					  
мЗапросПоискаПравилКонвертацииСвойств = Новый Запрос;
мЗапросПоискаПравилКонвертацииСвойств.Текст = "ВЫБРАТЬ Первые 1
                                               |	ПравилаКонвертацииСвойств.Ссылка КАК Ссылка
                                               |ИЗ
                                               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
                                               |ГДЕ
                                               |	ПравилаКонвертацииСвойств.Источник = &Источник
                                               |	И ПравилаКонвертацииСвойств.Приемник = &Приемник
                                               |	И ПравилаКонвертацииСвойств.Владелец = &Владелец";


РежимАвтоматическогоСопоставления = Истина;
ОтображатьВсеДанные = Ложь;
					  