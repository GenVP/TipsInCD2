Перем глТекущийПользователь Экспорт;

Перем кд_КэшМетаданных;

Функция гл_кдКэш() Экспорт
	Если кд_КэшМетаданных = Неопределено Тогда
		кд_КэшМетаданных = Новый Соответствие;
		
		// Cохранение режима отладки по параметру "/C РежимОтладки"
		РежимОтладки = Ложь;
		МассивПараметров = ирОбщий.СтрРазделитьЛкс(ПараметрЗапуска, ";");
		Для Каждого ИмяПараметра Из МассивПараметров Цикл
			Если НРег(ИмяПараметра) = "режимотладки" Тогда
				РежимОтладки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		кд_КэшМетаданных["РежимОтладки"] = РежимОтладки;
		
	КонецЕсли;
	Возврат кд_КэшМетаданных;
КонецФункции

Процедура ПриНачалеРаботыСистемы()

	АвторизацияТекущегоПользователя();
	ВыполнитьОбновлениеИнформационнойБазы();
	
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить()="");
	
	// Открытие Панели функций
	ОткрытьПанельФункций = УправлениеПользователями.ПолучитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПриЗапускеПанельФункций", Истина);
	Если ОткрытьПанельФункций И (НЕ ПервыйЗапуск) Тогда
		Обработки.ПанельФункций.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	// Открытие формы настройки правил регистрации
	ОткрытьПравилаРегистрации = УправлениеПользователями.ПолучитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПравилаРегистрации", Ложь);
	Если ОткрытьПравилаРегистрации Тогда
		ОткрытьПравилаРегистрации();
	КонецЕсли;
	
	// Открытие формы настройки правил обмена
	ОткрытьПравилаОбмена = УправлениеПользователями.ПолучитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПравилаОбмена", Ложь);
	Если ОткрытьПравилаОбмена Тогда
		ОткрытьПравилаОбмена();
	КонецЕсли;
		
КонецПроцедуры // ПриНачалеРаботыСистемы()

// Процедура инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Процедура АвторизацияТекущегоПользователя()
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		
		ИмяПользователя           = "НеАвторизован";
		ПолноеИмяПользователя     = "Не авторизован";

	Иначе
		
		ИмяПользователя           = ИмяПользователя();

		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;
		
	КонецЕсли;

	глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);

	Если глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();

		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;

		ОбъектПользователь.Записать();
		
		глТекущийПользователь = ОбъектПользователь.Ссылка;
		
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь;
	
КонецПроцедуры // АвторизацияТекущегоПользователя()

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	// Проверка необходимости обновления информационной базы.
	Если НЕ ПустаяСтрока(Метаданные.Версия) 
		И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		
		Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) ИЛИ НЕ ПравоДоступа("Использование", Метаданные.Обработки.ОбновлениеИнформационнойБазы) ИЛИ НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда

		Предупреждение("Недостаточно прав для выполнения обновления. Работа системы будет завершена.");
		ЗавершитьРаботуСистемы();
		Возврат;
		
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		
		УстановитьМонопольныйРежим(Истина);
		
	Исключение
		
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
		ЗавершитьРаботуСистемы();
		Возврат;
		
	КонецПопытки;

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Отключение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		
		Сообщить("Обновление информационной базы не выполнено.", СтатусСообщения.Важное);
		Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			
		КонецЕсли;
		
	Иначе
		
		Сообщить("Обновление информационной базы выполнено успешно.", СтатусСообщения.Информация);
		
	КонецЕсли;

КонецПроцедуры

// Устанавливает алгоритмы обработчиков объекта.
//
// Параметры: 
//  Форма                  - Форма, содержащая тексты алгоритмов обработчиков.
//  Объект                 - Объект, в реквизиты которого необходимо устанавливать тексты алгоритмов обработчиков.
//  МассивИменОбработчиков - Массив, содержащий имена обработчиков.
//
Процедура УстановитьАлгоритмыПередЗаписью(Форма, Объект, МассивИменОбработчиков) Экспорт

	Для каждого ИмяОбработчика Из МассивИменОбработчиков Цикл
		Объект[ИмяОбработчика] = Форма.ЭлементыФормы[ИмяОбработчика].ПолучитьТекст();
	КонецЦикла; 
	
КонецПроцедуры // УстановитьАлгоритмыПередЗаписью()

// Получает алгоритмы обработчиков объекта.
//
// Параметры: 
//  Форма                  - Форма, в которой отображаются тексты алгоритмов обработчиков.
//  Объект                 - Объект, из реквизитов которого необходимо получить тексты алгоритмов обработчиков.
//  МассивИменОбработчиков - Массив, содержащий имена обработчиков.
//
Процедура ПолучитьАлгоритмыПриОткрытии(Форма, Объект, МассивИменОбработчиков) Экспорт
        	
	Для каждого ИмяОбработчика Из МассивИменОбработчиков Цикл
		Форма.ЭлементыФормы[ИмяОбработчика].УстановитьТекст(Объект[ИмяОбработчика]);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьАлгоритмыПриОткрытии()

// Обработчик интерактивного изменения порядка.
//
// Параметры: 
//  Форма                  - Элемент управления.
//  Объект                 - Направление изменения порядка.
//  МассивИменОбработчиков - Флаг стандартной обработки.
//
Процедура ИзменитьПорядокИнтерактивно(Элемент, Направление, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		Элемент.Значение = Цел((50 + Элемент.Значение) / 50) * 50;
    Иначе
		Если Элемент.Значение > 50 Тогда
			Элемент.Значение = Цел((Элемент.Значение - 50) / 50) * 50;
		Иначе
			Элемент.Значение = 50;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьПорядокИнтерактивно()

// Формирует строковое представление типа для свойства или для описания типов.
//
// Параметры: 
//  Свойство       - Свойство, для которого необходимо получить строковое представление типа.
//  Типы           - Типы, для которых необходимо получить строковое представление.
//
// Возвращаемое значение:
//  Строка, содержащая представление типа.
//
Функция глТипыСвойстваСтрокой(Свойство) Экспорт

    Рез = "";

	Типы = Свойство.Типы;
		
	Для каждого Стр Из Типы Цикл

		ИмяТипа = СокрЛП(Стр.Тип);
		
		Если ИмяТипа = "Строка" Тогда
			
			Если Свойство.КвалификаторыСтроки_Длина = 0 Тогда
				ИмяТипа = ИмяТипа + " (Неогр)";
			Иначе
				Если Свойство.КвалификаторыСтроки_Фиксированная Тогда
					ИмяТипа = ИмяТипа + " (Ф" + Свойство.КвалификаторыСтроки_Длина + ")";
				Иначе
					ИмяТипа = ИмяТипа + " (П" + Свойство.КвалификаторыСтроки_Длина + ")";
				КонецЕсли; 
			КонецЕсли; 
			
		ИначеЕсли ИмяТипа = "Число" Тогда
			
			ИмяТипа = ИмяТипа + " (" + Свойство.КвалификаторыЧисла_Длина + "." + Свойство.КвалификаторыЧисла_Точность + ")";
			
		ИначеЕсли ИмяТипа = "Дата" Тогда
			
			ИмяТипа = Свойство.КвалификаторыДаты_Состав;
			Если ПустаяСтрока(ИмяТипа) Тогда
				
				ИмяТипа = "Дата"; // если не известно что за дата - просто пишем, что дата и все
				
			КонецЕсли;
			
		ИначеЕсли Свойство.ЭтоГруппа Тогда
			ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрСведенийЗапись",		"РегистрСведенийНаборЗаписей");
			ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрНакопленияЗапись",	"РегистрНакопленияНаборЗаписей");
			ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрБухгалтерииЗапись",	"РегистрБухгалтерииНаборЗаписей");
			ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрРасчетаЗапись",		"РегистрРасчетаНаборЗаписей");
		КонецЕсли; 
		
        Рез = Рез + ", " + ИмяТипа;
		
	КонецЦикла; 

	Возврат Прав(Рез, СтрДлина(Рез)-2);
	
КонецФункции // глТипыСвойстваСтрокой() 

// Дополняет исходную строку до необходимой длины переданной подстрокой.
//
// Параметры: 
//  Стр            - Исходная строка.
//  Длина          - Необходимая длина результирующей строки.
//  Чем            - Подстрока для дополнения.
//
// Возвращаемое значение:
//  Строка результат дополнения.
//
Функция глДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт
	
	Результат = СокрЛП(Стр);
	Пока Длина - СтрДлина(Результат) > 0 Цикл
		Результат = Результат + Чем;
	КонецЦикла;
	
	Возврат(Результат);
	
КонецФункции // глДополнитьСтроку() 

// Копирует элемент справочника вместе с подчиненными элементами.
//
// Параметры: 
//  Ссылка                  - Ссылка на копируемый элемент справочника.
//  УстанавливаемыйРодитель - Ссылка на устанавливаемого родителя скопированного элемента.
//  УстанавливаемыйВладелец - Ссылка на устанавливаемого владельца скопированного элемента.
//
// Возвращаемое значение:
//  Новый скопированный элемент.
//
Функция СкопироватьСПодчиненными(Ссылка, УстанавливаемыйРодитель = "", УстанавливаемыйВладелец = "", 
	Уровень = 0, СписокОбъектов = Неопределено, НоваяКонвертация = Неопределено, КопироватьПометкиНаУдаление = Ложь) Экспорт
	
	Если Уровень = 0 Тогда
		СписокОбъектов = Новый СписокЗначений();
		НоваяКонвертация = Неопределено;
	КонецЕсли;
	
	ОбъектМД     = Ссылка.Метаданные();
	НовыйЭлемент = Ссылка.Скопировать();

	Если ОбъектМД.Иерархический И ЗначениеЗаполнено(УстанавливаемыйРодитель) Тогда
		НовыйЭлемент.Родитель = УстанавливаемыйРодитель;
	ИначеЕсли ОбъектМД.Иерархический Тогда
		НовыйЭлемент.Родитель = Неопределено;
	КонецЕсли;
	
	Если ОбъектМД.Владельцы.Количество() > 0 И ЗначениеЗаполнено(УстанавливаемыйВладелец) Тогда
		НовыйЭлемент.Владелец = УстанавливаемыйВладелец;
	КонецЕсли;

	Если ОбъектМД.Имя = "ПравилаКонвертацииОбъектов" Тогда  
  		НовыйЭлемент.Код = Ссылка.Код;
	КонецЕсли;
	
	Попытка
		НовыйЭлемент.СгенерироватьУникальныйКод();
	Исключение
		НовыйЭлемент.УстановитьНовыйКод();
	КонецПопытки;
	
	Если КопироватьПометкиНаУдаление Тогда
		НовыйЭлемент.ПометкаУдаления = Ссылка.ПометкаУдаления;
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Если (ОбъектМД.Имя = "ПравилаВыгрузкиДанных"
		ИЛИ ОбъектМД.Имя = "ПравилаКонвертацииСвойств"
		ИЛИ ОбъектМД.Имя = "Параметры")
		И ЗначениеЗаполнено(НовыйЭлемент.ПравилоКонвертации) Тогда
		
		СписокОбъектов.Добавить(НовыйЭлемент);
		Если НоваяКонвертация = Неопределено Тогда
			
			Если ОбъектМД.Имя = "ПравилаВыгрузкиДанных"
				ИЛИ ОбъектМД.Имя = "Параметры" Тогда
			
				НоваяКонвертация = НовыйЭлемент.Владелец;
				
			ИначеЕсли ОбъектМД.Имя = "ПравилаКонвертацииСвойств" Тогда
				
				НоваяКонвертация = НовыйЭлемент.Владелец.Владелец;
				
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЕсли;

	Если ОбъектМД.Иерархический Тогда
		
		Если ОбъектМД.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов 
			Или Ссылка.ЭтоГруппа Тогда
		
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			         |	Спр.Ссылка
			         |ИЗ
			         |	Справочник." + ОбъектМД.Имя + " КАК Спр
			         |ГДЕ
			         |	Спр.Родитель = &Родитель";
			Запрос.УстановитьПараметр("Родитель", Ссылка);
					 
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СкопироватьСПодчиненными(Выборка.Ссылка, НовыйЭлемент.Ссылка, 
						УстанавливаемыйВладелец, Уровень + 1, СписокОбъектов, НоваяКонвертация, Истина);
				КонецЦикла;
				
			КонецЕсли;
					 
		КонецЕсли; 
		
	КонецЕсли;

	Если Не Ссылка.ЭтоГруппа Тогда
		
		Для каждого ОбъектМДПодчиненный из Метаданные.Справочники Цикл
			
			Подчинен = Ложь;
			Для каждого ВладелецМД Из ОбъектМДПодчиненный.Владельцы Цикл
				
				Если ВладелецМД = ОбъектМД Тогда 
					Подчинен = Истина; 
					Прервать; 
				КонецЕсли;
				
			КонецЦикла; 
			
			Если Не Подчинен Тогда Продолжить КонецЕсли;
			
			Запрос = Новый Запрос();
			
			Запрос.Текст = "ВЫБРАТЬ
			 |	Спр.Ссылка
			 |ИЗ
			 |	Справочник." + ОбъектМДПодчиненный.Имя + " КАК Спр
			 |ГДЕ
			 |	Спр.Владелец = &Владелец
			 |" + ?(ОбъектМДПодчиненный.Иерархический, "И Спр.Родитель = &ПустойРодитель", "");						 
			
			Запрос.УстановитьПараметр("Владелец", Ссылка);
			Запрос.УстановитьПараметр("ПустойРодитель", Справочники[ОбъектМДПодчиненный.Имя].ПустаяСсылка());
					 
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда

			 	РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СкопироватьСПодчиненными(Выборка.Ссылка, Справочники[ОбъектМДПодчиненный.Имя].ПустаяСсылка(), 
						НовыйЭлемент.Ссылка, Уровень + 1, СписокОбъектов, НоваяКонвертация, Истина);
				КонецЦикла;
				
			КонецЕсли;		
						
		КонецЦикла;
		
	КонецЕсли;
	
	Если НоваяКонвертация <> Неопределено
		И Уровень = 0 Тогда
		
		Для Каждого ЭлементСписка Из СписокОбъектов Цикл
			
			// установка ПКО у всех элементов
			Объект = ЭлементСписка.Значение;
			Объект.ПравилоКонвертации =	Справочники.ПравилаКонвертацииОбъектов.НайтиПоНаименованию(
				ЭлементСписка.Значение.ПравилоКонвертации.Наименование, Истина, , НоваяКонвертация);
				
			Объект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции // СкопироватьСПодчиненными()

// Устанавливает новый порядок для правил в зависимости от направления сдвига элемента.
//
// Параметры: 
//   ТекРодитель       - Родитель сдвигаемого элемента.
//   ТекВладелец       - Владелец сдвигаемого элемента.
//   СдвигаемыйЭлемент - Сдвигаемый элемент.
//   НаправлениеСдвига - Направление сдвига.
//
Процедура РасстановкаЭлементов(ТекРодитель, ТекВладелец = Ложь, СдвигаемыйЭлемент, НаправлениеСдвига) Экспорт
	
	Если (ТипЗнч(СдвигаемыйЭлемент) = Тип("Неопределено")) Или (СдвигаемыйЭлемент.Пустая()) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСправочника = СдвигаемыйЭлемент.Метаданные().Имя;
	Спр = Справочники[ИдентификаторСправочника];
	
	НачатьТранзакцию();
	
	Спис = Новый СписокЗначений;
	ТекЭлемент = Неопределено;
	Выборка = Спр.Выбрать(ТекРодитель, ТекВладелец, , "Порядок");
	
	Пока Выборка.Следующий() Цикл
		
		НовЭлемент = Спис.Добавить(Выборка.Ссылка, Строка(Выборка.Порядок));
		Если Выборка.Ссылка = СдвигаемыйЭлемент.Ссылка Тогда
			ТекЭлемент = НовЭлемент;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекИнд = Спис.Индекс(ТекЭлемент);
	Если ТекИнд >= 0 Тогда
		
		Если ((НаправлениеСдвига = 1) И (ТекИнд < Спис.Количество() - 1)) ИЛИ ((НаправлениеСдвига = -1) И (ТекИнд > 0)) Тогда
			Спис.Сдвинуть(ТекИнд, НаправлениеСдвига);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ЭлементСписка из Спис Цикл
		
		Порядок = (Спис.Индекс(ЭлементСписка) + 1) * 50;
		ИсходныйПорядок = Число(ЭлементСписка.Представление);
		
		Если ИсходныйПорядок <> Порядок Тогда
			
			Элем = ЭлементСписка.Значение.ПолучитьОбъект();
			Элем.Порядок = Порядок;
			Попытка
				Элем.Записать();
			Исключение
				Возврат;										
			КонецПопытки;				
						
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // РасстановкаЭлементов()

// Открывает форму элемента текущих данных табличного поля при редактировании колонки "Картинка".
//
// Параметры: 
//  Элемент        - Табличное поле.
//  Отказ          - Флаг отказа от стандартной обработки.
//
Процедура ОткрытьФормуЭлементаВСписке(Элемент, Отказ) Экспорт

	Если Элемент.ТекущаяКолонка.Имя = "Картинка" Тогда
		
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Форма = Элемент.ТекущиеДанные.Ссылка.ПолучитьФорму();
		Форма.Открыть();
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуЭлементаВСписке()

// Открывает форму просмотра описания обработчиков событий.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьОписаниеОбработчиковСобытий(ИмяОбъекта, ИмяОбработчика, ФормаВладелец = Неопределено) Экспорт
	
	ОбработкаПросмотра = Обработки.ИнформацияОбОбработчиках.Создать();
	ОбработкаПросмотра.РазделДляОткрытия = ИмяОбъекта + ИмяОбработчика;
	ФормаПросмотра = ОбработкаПросмотра.ПолучитьФорму();
	ФормаПросмотра.Открыть();
	
КонецПроцедуры // ОткрытьОписаниеОбработчиковСобытий() 

// Открывает форму правил обмена.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьПравилаОбмена() Экспорт

	ФормаПравилОбмена = ПолучитьОбщуюФорму("ПравилаОбмена", , 1);
	ФормаПравилОбмена.Открыть();
	
КонецПроцедуры // ОткрытьПравилаОбмена()

// Открывает форму правил регистрации.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьПравилаРегистрации() Экспорт
	
	ФормаПравилРегистрации = ПолучитьОбщуюФорму("ПравилаРегистрации",, 2);
	ФормаПравилРегистрации.Открыть();
	
КонецПроцедуры // ОткрытьПравилаРегистрации()

// Открывает форму описания конфигурации.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьОписаниеКонфигурации() Экспорт

	Форма = ПолучитьОбщуюФорму("Конфигурация");
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьОписаниеКонфигурации()

// Выполняет запуск приложения 1С:Предприятие по переданным параметрам.
//
// Параметры: 
//  ВерсияПриложения  - Версия приложения ("8.0" или "7.7").
//  РежимЗапуска      - Режим запуска ("Предприятие", "ПредприятиеМонопольно", "Конфигуратор", "Отладчик").
//  СпособАвторизации - Способ авторизации ("Предприятие" или "Windows").
//  ТипРасположенияИБ - Тип расположения информационно базы ("Локальная" или "Серверная").
//  КаталогИБ         - Полный путь к каталогу информационной базы.
//  ИмяСервера        - Имя сервера при серверном расположении информационно базы.
//  ИмяИБ             - Имя информационно базы при серверном расположении информационно базы.
//  Пользователь      - Имя пользователя.
//  Пароль            - Пароль пользователя.
//  ИсполняемыйФайл77 - Полный путь к исполняемому файлу 1С:Предприятие 7.7.
//
Процедура глЗапуститьПриложение(ВерсияПриложения  = "8.0",
                                РежимЗапуска      = "Предприятие",
								СпособАвторизации = "Предприятие",
								ТипРасположенияИБ = "Локальная",
								КаталогИБ         = "",
								ИмяСервера        = "",
								ИмяИБ             = "",
								Пользователь      = "",
								Пароль            = "",
								ИсполняемыйФайл77 = "") Экспорт

	Если ВерсияПриложения = "8.0" 
		ИЛИ ВерсияПриложения = "8.1" ИЛИ ВерсияПриложения = "8.2" Тогда

		Если ВерсияПриложения = "8.1" ИЛИ ВерсияПриложения = "8.2" Тогда
			КомандаЗапуска = """" + КаталогПрограммы() + "1cv8.exe""";
		Иначе
			КомандаЗапуска = """" + ИсполняемыйФайл77 + """";
		КонецЕсли;
		
		Если      РежимЗапуска = "Предприятие" ИЛИ РежимЗапуска = "ПредприятиеМонопольно" Тогда
	    	КомандаЗапуска = КомандаЗапуска + " enterprise ";
		ИначеЕсли РежимЗапуска = "Конфигуратор" Тогда
			КомандаЗапуска = КомандаЗапуска + " config ";
		ИначеЕсли РежимЗапуска = "Отладчик" Тогда
			Возврат;
		КонецЕсли;

		Если ТипРасположенияИБ = "Локальная" Тогда
			КомандаЗапуска = КомандаЗапуска + " /F""" + КаталогИБ + """";
		Иначе
			КомандаЗапуска = КомандаЗапуска + " /S" + ИмяСервера + "\" + ИмяИБ;
		КонецЕсли;

		Если СпособАвторизации = "Предприятие" Тогда
			Если НЕ ПустаяСтрока(Пользователь) Тогда
				КомандаЗапуска = КомандаЗапуска + " /N" + """" + Пользователь + """";
			КонецЕсли;
			Если НЕ ПустаяСтрока(Пароль) Тогда
				КомандаЗапуска = КомандаЗапуска + " /P" + Пароль;
			КонецЕсли;
			КомандаЗапуска = КомандаЗапуска + " /WA-";
		Иначе
			КомандаЗапуска = КомандаЗапуска + " /WA+";
		КонецЕсли;
		
	Иначе

		КомандаЗапуска = ИсполняемыйФайл77;

		Если      РежимЗапуска = "ПредприятиеМонопольно" Тогда
	    	КомандаЗапуска = КомандаЗапуска + " enterprise /M ";
		ИначеЕсли РежимЗапуска = "Предприятие" Тогда
	    	КомандаЗапуска = КомандаЗапуска + " enterprise ";
		ИначеЕсли РежимЗапуска = "Конфигуратор" Тогда
			КомандаЗапуска = КомандаЗапуска + " config ";
		ИначеЕсли РежимЗапуска = "Отладчик" Тогда
			КомандаЗапуска = КомандаЗапуска + " debug ";
		КонецЕсли;

		КомандаЗапуска = КомандаЗапуска + " /D""" + КаталогИБ + """";

		Если НЕ ПустаяСтрока(Пользователь) Тогда
			КомандаЗапуска = КомандаЗапуска + " /N" + Пользователь;
		КонецЕсли;
		Если НЕ ПустаяСтрока(Пароль) Тогда
			КомандаЗапуска = КомандаЗапуска + " /P" + Пароль;
		КонецЕсли;
		
	КонецЕсли;

	ЗапуститьПриложение(КомандаЗапуска);

КонецПроцедуры // глЗапуститьПриложение()

// 
//
Процедура НастройкиПользователя() Экспорт

	ОткрытьЗначение(глТекущийПользователь);
	
КонецПроцедуры // НастройкиПользователя()

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура глУстановитьПометкиПодчиненных(СтрокаРодитель, ТекстАлгоритма, Параметры) Экспорт

	Пометка     = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.Строки;

	Для каждого ТекСтрока из Подчиненные Цикл
		Отказ = Ложь;
		Если НЕ ПустаяСтрока(ТекстАлгоритма) Тогда
			Выполнить(ТекстАлгоритма);
		КонецЕсли;
		Если НЕ Отказ Тогда
			ТекСтрока.Пометка = Пометка;
		КонецЕсли;
		
		Если ТекСтрока.Строки.Количество() > 0 Тогда
			глУстановитьПометкиПодчиненных(ТекСтрока, ТекстАлгоритма, Параметры);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // глУстановитьПометкиПодчиненных()

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура глУстановитьПометкиРодителей(Родитель) Экспорт

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	Если Родитель.Строки.Количество() Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для каждого Строка из Родитель.Строки Цикл
	        Если Строка.Пометка = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Пометка = 1 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Пометка = 2;
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			Пометка = 1;
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			Пометка = 0;
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			Пометка = 2;
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	глУстановитьПометкиРодителей(Родитель.Родитель);
	
КонецПроцедуры // глУстановитьПометкиРодителей()

Процедура глУстановитьПометки(ТекСтрока, ТекстАлгоритма = "", Параметры = Неопределено) Экспорт

	Если НЕ ПустаяСтрока(ТекстАлгоритма) Тогда
        Отказ = Ложь;
		Выполнить(ТекстАлгоритма);
		Если Отказ Тогда
			ТекСтрока.Пометка = 0;
		КонецЕсли;
	КонецЕсли;

	Если ТекСтрока.Строки.Количество() > 0 Тогда
		глУстановитьПометкиПодчиненных(ТекСтрока, ТекстАлгоритма, Параметры);
	КонецЕсли;
	
	глУстановитьПометкиРодителей(ТекСтрока);

КонецПроцедуры // глУстановитьПометки()
